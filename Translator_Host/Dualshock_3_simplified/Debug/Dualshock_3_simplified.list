
Dualshock_3_simplified.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800d17c  0800d17c  0001d17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4d4  0800d4d4  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4d4  0800d4d4  0001d4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4dc  0800d4dc  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4dc  0800d4dc  0001d4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4e0  0800d4e0  0001d4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800d4e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d98  200000c0  0800d5a0  000200c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005e58  0800d5a0  00025e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f0ff  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dab  00000000  00000000  0004f1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  00054f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001870  00000000  00000000  00056a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fef  00000000  00000000  000582b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021703  00000000  00000000  0008129f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e104a  00000000  00000000  000a29a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001839ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000725c  00000000  00000000  00183a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d164 	.word	0x0800d164

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800d164 	.word	0x0800d164

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <Dualshock3Init>:
 * @brief  	Dualshock 3 init: this function sets features in the device to start the HID reporting
 * @param  	phost: pointer the the usbh handler
 * @retval	usbh status
 */
static USBH_StatusTypeDef Dualshock3Init(USBH_HandleTypeDef *phost)
{
 80005b8:	b5b0      	push	{r4, r5, r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af02      	add	r7, sp, #8
 80005be:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 80005c0:	2301      	movs	r3, #1
 80005c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	int i = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	643b      	str	r3, [r7, #64]	; 0x40
	while((status != USBH_OK )||(i>=5))
 80005ca:	e01c      	b.n	8000606 <Dualshock3Init+0x4e>
	{
		if(i>=5)
 80005cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005ce:	2b04      	cmp	r3, #4
 80005d0:	dd01      	ble.n	80005d6 <Dualshock3Init+0x1e>
		{
			return USBH_BUSY;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e0c1      	b.n	800075a <Dualshock3Init+0x1a2>
		}
		uint8_t magic[] = {0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0xA0, 0x00,
 80005d6:	4b63      	ldr	r3, [pc, #396]	; (8000764 <Dualshock3Init+0x1ac>)
 80005d8:	f107 040c 	add.w	r4, r7, #12
 80005dc:	461d      	mov	r5, r3
 80005de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
		status = USBH_HID_SetReport(phost, 0x03, 0xEF, magic, 48);
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	9200      	str	r2, [sp, #0]
 80005f6:	22ef      	movs	r2, #239	; 0xef
 80005f8:	2103      	movs	r1, #3
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f001 fa44 	bl	8001a88 <USBH_HID_SetReport>
 8000600:	4603      	mov	r3, r0
 8000602:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while((status != USBH_OK )||(i>=5))
 8000606:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1de      	bne.n	80005cc <Dualshock3Init+0x14>
 800060e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000610:	2b04      	cmp	r3, #4
 8000612:	dcdb      	bgt.n	80005cc <Dualshock3Init+0x14>
	}

	status = USBH_BUSY;
 8000614:	2301      	movs	r3, #1
 8000616:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	i = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	643b      	str	r3, [r7, #64]	; 0x40
	while((status != USBH_OK )||(i>=5))
 800061e:	e01c      	b.n	800065a <Dualshock3Init+0xa2>
	{
		if(i>=5)
 8000620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000622:	2b04      	cmp	r3, #4
 8000624:	dd01      	ble.n	800062a <Dualshock3Init+0x72>
		{
			return USBH_BUSY;
 8000626:	2301      	movs	r3, #1
 8000628:	e097      	b.n	800075a <Dualshock3Init+0x1a2>
		}
		uint8_t magic[] = {0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0xB0, 0x00,
 800062a:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <Dualshock3Init+0x1b0>)
 800062c:	f107 040c 	add.w	r4, r7, #12
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800063e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
		status = USBH_HID_SetReport(phost, 0x03, 0xEF, magic, 48);
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	9200      	str	r2, [sp, #0]
 800064a:	22ef      	movs	r2, #239	; 0xef
 800064c:	2103      	movs	r1, #3
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f001 fa1a 	bl	8001a88 <USBH_HID_SetReport>
 8000654:	4603      	mov	r3, r0
 8000656:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while((status != USBH_OK )||(i>=5))
 800065a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1de      	bne.n	8000620 <Dualshock3Init+0x68>
 8000662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000664:	2b04      	cmp	r3, #4
 8000666:	dcdb      	bgt.n	8000620 <Dualshock3Init+0x68>
	}
	status = USBH_BUSY;
 8000668:	2301      	movs	r3, #1
 800066a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	i = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	643b      	str	r3, [r7, #64]	; 0x40
	while((status != USBH_OK )||(i>=5))
 8000672:	e01c      	b.n	80006ae <Dualshock3Init+0xf6>
	{
		if(i>=5)
 8000674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000676:	2b04      	cmp	r3, #4
 8000678:	dd01      	ble.n	800067e <Dualshock3Init+0xc6>
		{
			return USBH_BUSY;
 800067a:	2301      	movs	r3, #1
 800067c:	e06d      	b.n	800075a <Dualshock3Init+0x1a2>
		}
		uint8_t magic[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 800067e:	4b3b      	ldr	r3, [pc, #236]	; (800076c <Dualshock3Init+0x1b4>)
 8000680:	f107 040c 	add.w	r4, r7, #12
 8000684:	461d      	mov	r5, r3
 8000686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000692:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
		status = USBH_HID_SetReport(phost, 0x02, 0x01, magic, 48);
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	9200      	str	r2, [sp, #0]
 800069e:	2201      	movs	r2, #1
 80006a0:	2102      	movs	r1, #2
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f001 f9f0 	bl	8001a88 <USBH_HID_SetReport>
 80006a8:	4603      	mov	r3, r0
 80006aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while((status != USBH_OK )||(i>=5))
 80006ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1de      	bne.n	8000674 <Dualshock3Init+0xbc>
 80006b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006b8:	2b04      	cmp	r3, #4
 80006ba:	dcdb      	bgt.n	8000674 <Dualshock3Init+0xbc>
	}

	status = USBH_BUSY;
 80006bc:	2301      	movs	r3, #1
 80006be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	i = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	643b      	str	r3, [r7, #64]	; 0x40
	while((status != USBH_OK )||(i>=5))
 80006c6:	e013      	b.n	80006f0 <Dualshock3Init+0x138>
	{
		if(i>=5)
 80006c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	dd01      	ble.n	80006d2 <Dualshock3Init+0x11a>
		{
			return USBH_BUSY;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e043      	b.n	800075a <Dualshock3Init+0x1a2>
		}
		uint8_t magic[] = {0x42, 0x0c, 0x00, 0x00};
 80006d2:	f640 4342 	movw	r3, #3138	; 0xc42
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
		status = USBH_HID_SetReport(phost, 0x03, 0xF4, magic, 4);
 80006d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006dc:	2204      	movs	r2, #4
 80006de:	9200      	str	r2, [sp, #0]
 80006e0:	22f4      	movs	r2, #244	; 0xf4
 80006e2:	2103      	movs	r1, #3
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f001 f9cf 	bl	8001a88 <USBH_HID_SetReport>
 80006ea:	4603      	mov	r3, r0
 80006ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while((status != USBH_OK )||(i>=5))
 80006f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1e7      	bne.n	80006c8 <Dualshock3Init+0x110>
 80006f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	dce4      	bgt.n	80006c8 <Dualshock3Init+0x110>
	}

	status = USBH_BUSY;
 80006fe:	2301      	movs	r3, #1
 8000700:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	i = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
	while((status != USBH_OK )||(i>=5))
 8000708:	e01c      	b.n	8000744 <Dualshock3Init+0x18c>
	{
		if(i>=5)
 800070a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800070c:	2b04      	cmp	r3, #4
 800070e:	dd01      	ble.n	8000714 <Dualshock3Init+0x15c>
		{
			return USBH_BUSY;
 8000710:	2301      	movs	r3, #1
 8000712:	e022      	b.n	800075a <Dualshock3Init+0x1a2>
		}
		uint8_t magic[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <Dualshock3Init+0x1b8>)
 8000716:	f107 040c 	add.w	r4, r7, #12
 800071a:	461d      	mov	r5, r3
 800071c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000724:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				0x27, 0x10, 0x00, 0x32, 0xff, 0x27, 0x10, 0x00,
				0x32, 0xff, 0x27, 0x10, 0x00, 0x32, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
		status = USBH_HID_SetReport(phost, 0x02, 0x01, magic, 48);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2230      	movs	r2, #48	; 0x30
 8000732:	9200      	str	r2, [sp, #0]
 8000734:	2201      	movs	r2, #1
 8000736:	2102      	movs	r1, #2
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f001 f9a5 	bl	8001a88 <USBH_HID_SetReport>
 800073e:	4603      	mov	r3, r0
 8000740:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	while((status != USBH_OK )||(i>=5))
 8000744:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1de      	bne.n	800070a <Dualshock3Init+0x152>
 800074c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800074e:	2b04      	cmp	r3, #4
 8000750:	dcdb      	bgt.n	800070a <Dualshock3Init+0x152>
	}
	Dualshock3_connected_CB();
 8000752:	f000 f859 	bl	8000808 <Dualshock3_connected_CB>
	return status;
 8000756:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800075a:	4618      	mov	r0, r3
 800075c:	3748      	adds	r7, #72	; 0x48
 800075e:	46bd      	mov	sp, r7
 8000760:	bdb0      	pop	{r4, r5, r7, pc}
 8000762:	bf00      	nop
 8000764:	0800d17c 	.word	0x0800d17c
 8000768:	0800d1ac 	.word	0x0800d1ac
 800076c:	0800d1dc 	.word	0x0800d1dc
 8000770:	0800d20c 	.word	0x0800d20c

08000774 <decodeRawData>:
 * @param  	raw_HI: 2 highest bits of the value
 * @param  	raw_LO: 8 lowest bits of the value
 * @retval	decoded value int a signed 16 bits integer
 */
int16_t decodeRawData(uint8_t raw_HI, uint8_t raw_LO)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
	return (((uint16_t)raw_HI<<8) | raw_LO) - 512;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	021b      	lsls	r3, r3, #8
 8000788:	b21a      	sxth	r2, r3
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	b21b      	sxth	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	b21b      	sxth	r3, r3
 8000792:	b29b      	uxth	r3, r3
 8000794:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000798:	b29b      	uxth	r3, r3
 800079a:	b21b      	sxth	r3, r3
}
 800079c:	4618      	mov	r0, r3
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <USBH_HID_EventCallback>:

/**
 * Callback from usbh_hid library, called when an HID report is added to the fifo
 */
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	USBH_HID_GetRawReport(phost, (uint8_t*)&ds3report);
 80007b0:	4905      	ldr	r1, [pc, #20]	; (80007c8 <USBH_HID_EventCallback+0x20>)
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f001 fb96 	bl	8001ee4 <USBH_HID_GetRawReport>
	Dualshock3_newReport_CB(&ds3report);
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <USBH_HID_EventCallback+0x20>)
 80007ba:	f000 f807 	bl	80007cc <Dualshock3_newReport_CB>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20005490 	.word	0x20005490

080007cc <Dualshock3_newReport_CB>:
/* USER CODE BEGIN 0 */

//uint32_t lastReportTime = 0;

void Dualshock3_newReport_CB(DS3_report* report)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
        // check if free space is available in the queue
	if(osMessageQueueGetSpace(reportQueueHandle) == 0)
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <Dualshock3_newReport_CB+0x38>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f008 fb07 	bl	8008dec <osMessageQueueGetSpace>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d104      	bne.n	80007ee <Dualshock3_newReport_CB+0x22>
	{
                // if there are no more space, the queue is resetted 
		osMessageQueueReset(reportQueueHandle);
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <Dualshock3_newReport_CB+0x38>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f008 fb47 	bl	8008e7c <osMessageQueueReset>
	}
        // data put inside the queue
	osMessageQueuePut(reportQueueHandle, report, 0, 0);
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <Dualshock3_newReport_CB+0x38>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2300      	movs	r3, #0
 80007f4:	2200      	movs	r2, #0
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	f008 fa12 	bl	8008c20 <osMessageQueuePut>
        // debug :
	/*char Uart_Buf[100];
	sprintf(Uart_Buf, "got Report \r\n");
	HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf, strlen(Uart_Buf), 100);*/
	//lastReportTime = osKernelGetTickCount();
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20005528 	.word	0x20005528

08000808 <Dualshock3_connected_CB>:

void Dualshock3_connected_CB(){
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
/* callback called when the initialisation of usb is finished */
  
	// use semaphore to start report task
	osSemaphoreRelease(deviceConnected);
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <Dualshock3_connected_CB+0x14>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f008 f927 	bl	8008a64 <osSemaphoreRelease>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20005534 	.word	0x20005534

08000820 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	b087      	sub	sp, #28
 8000824:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000826:	f001 fc4f 	bl	80020c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800082a:	f000 f8bd 	bl	80009a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800082e:	f000 f979 	bl	8000b24 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000832:	f000 f923 	bl	8000a7c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000836:	f000 f94b 	bl	8000ad0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	MX_USB_HOST_Init();
 800083a:	f00b fd35 	bl	800c2a8 <MX_USB_HOST_Init>

	// stops the broken auto generated thread for the usbh process
	MX_USB_HOST_SuspendThread();
 800083e:	f00b fd27 	bl	800c290 <MX_USB_HOST_SuspendThread>

	// loads the dualshock 3 driver
	USBH_HID_GenericRegisterDriver(dualshock3_Driver);
 8000842:	4e3d      	ldr	r6, [pc, #244]	; (8000938 <main+0x118>)
 8000844:	466d      	mov	r5, sp
 8000846:	f106 0410 	add.w	r4, r6, #16
 800084a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800084c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800084e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000852:	e885 0003 	stmia.w	r5, {r0, r1}
 8000856:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800085a:	f001 fa85 	bl	8001d68 <USBH_HID_GenericRegisterDriver>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800085e:	f007 fd45 	bl	80082ec <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of usbhMutex */
	usbhMutexHandle = osMutexNew(&usbhMutex_attributes);
 8000862:	4836      	ldr	r0, [pc, #216]	; (800093c <main+0x11c>)
 8000864:	f007 feb4 	bl	80085d0 <osMutexNew>
 8000868:	4603      	mov	r3, r0
 800086a:	4a35      	ldr	r2, [pc, #212]	; (8000940 <main+0x120>)
 800086c:	6013      	str	r3, [r2, #0]

	/* creation of uart2Mutex */
	uart2MutexHandle = osMutexNew(&uart2Mutex_attributes);
 800086e:	4835      	ldr	r0, [pc, #212]	; (8000944 <main+0x124>)
 8000870:	f007 feae 	bl	80085d0 <osMutexNew>
 8000874:	4603      	mov	r3, r0
 8000876:	4a34      	ldr	r2, [pc, #208]	; (8000948 <main+0x128>)
 8000878:	6013      	str	r3, [r2, #0]

	/* creation of uart3Mutex */
	uart3MutexHandle = osMutexNew(&uart3Mutex_attributes);
 800087a:	4834      	ldr	r0, [pc, #208]	; (800094c <main+0x12c>)
 800087c:	f007 fea8 	bl	80085d0 <osMutexNew>
 8000880:	4603      	mov	r3, r0
 8000882:	4a33      	ldr	r2, [pc, #204]	; (8000950 <main+0x130>)
 8000884:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	idleOn = osSemaphoreNew(1U, 0, NULL);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2001      	movs	r0, #1
 800088c:	f007 ffe8 	bl	8008860 <osSemaphoreNew>
 8000890:	4603      	mov	r3, r0
 8000892:	4a30      	ldr	r2, [pc, #192]	; (8000954 <main+0x134>)
 8000894:	6013      	str	r3, [r2, #0]
	translatorOn = osSemaphoreNew(1U, 0, NULL);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	2001      	movs	r0, #1
 800089c:	f007 ffe0 	bl	8008860 <osSemaphoreNew>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a2d      	ldr	r2, [pc, #180]	; (8000958 <main+0x138>)
 80008a4:	6013      	str	r3, [r2, #0]

	deviceConnected = osSemaphoreNew(1U, 0, NULL);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2001      	movs	r0, #1
 80008ac:	f007 ffd8 	bl	8008860 <osSemaphoreNew>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4a2a      	ldr	r2, [pc, #168]	; (800095c <main+0x13c>)
 80008b4:	6013      	str	r3, [r2, #0]
	deviceDisconnected = osSemaphoreNew(1U, 0, NULL);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2001      	movs	r0, #1
 80008bc:	f007 ffd0 	bl	8008860 <osSemaphoreNew>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4a27      	ldr	r2, [pc, #156]	; (8000960 <main+0x140>)
 80008c4:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of reportQueue */
	reportQueueHandle = osMessageQueueNew (2, sizeof(DS3_report), &reportQueue_attributes);
 80008c6:	4a27      	ldr	r2, [pc, #156]	; (8000964 <main+0x144>)
 80008c8:	2138      	movs	r1, #56	; 0x38
 80008ca:	2002      	movs	r0, #2
 80008cc:	f008 f922 	bl	8008b14 <osMessageQueueNew>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a25      	ldr	r2, [pc, #148]	; (8000968 <main+0x148>)
 80008d4:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008d6:	4a25      	ldr	r2, [pc, #148]	; (800096c <main+0x14c>)
 80008d8:	2100      	movs	r1, #0
 80008da:	4825      	ldr	r0, [pc, #148]	; (8000970 <main+0x150>)
 80008dc:	f007 fd70 	bl	80083c0 <osThreadNew>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4a24      	ldr	r2, [pc, #144]	; (8000974 <main+0x154>)
 80008e4:	6013      	str	r3, [r2, #0]

	/* creation of usbhTask */
	usbhTaskHandle = osThreadNew(usbhTaskFunction, NULL, &usbhTask_attributes);
 80008e6:	4a24      	ldr	r2, [pc, #144]	; (8000978 <main+0x158>)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4824      	ldr	r0, [pc, #144]	; (800097c <main+0x15c>)
 80008ec:	f007 fd68 	bl	80083c0 <osThreadNew>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4a23      	ldr	r2, [pc, #140]	; (8000980 <main+0x160>)
 80008f4:	6013      	str	r3, [r2, #0]

	/* creation of processReport */
	//processReportHandle = osThreadNew(processReportFunction, NULL, &processReport_attributes);

	/* creation of idleThread */
	idleThreadHandle = osThreadNew(idleThread, NULL, &idleThread_attributes);
 80008f6:	4a23      	ldr	r2, [pc, #140]	; (8000984 <main+0x164>)
 80008f8:	2100      	movs	r1, #0
 80008fa:	4823      	ldr	r0, [pc, #140]	; (8000988 <main+0x168>)
 80008fc:	f007 fd60 	bl	80083c0 <osThreadNew>
 8000900:	4603      	mov	r3, r0
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <main+0x16c>)
 8000904:	6013      	str	r3, [r2, #0]

	/* creation of translatorThread */
	translatorThreadHandle = osThreadNew(translatorThread, NULL, &translatorThread_attributes);
 8000906:	4a22      	ldr	r2, [pc, #136]	; (8000990 <main+0x170>)
 8000908:	2100      	movs	r1, #0
 800090a:	4822      	ldr	r0, [pc, #136]	; (8000994 <main+0x174>)
 800090c:	f007 fd58 	bl	80083c0 <osThreadNew>
 8000910:	4603      	mov	r3, r0
 8000912:	4a21      	ldr	r2, [pc, #132]	; (8000998 <main+0x178>)
 8000914:	6013      	str	r3, [r2, #0]

	/* creation of stateMachineThread */
	stateMachineThreadHandle = osThreadNew(stateMachineThread, NULL, &stateMachineThread_attributes);
 8000916:	4a21      	ldr	r2, [pc, #132]	; (800099c <main+0x17c>)
 8000918:	2100      	movs	r1, #0
 800091a:	4821      	ldr	r0, [pc, #132]	; (80009a0 <main+0x180>)
 800091c:	f007 fd50 	bl	80083c0 <osThreadNew>
 8000920:	4603      	mov	r3, r0
 8000922:	4a20      	ldr	r2, [pc, #128]	; (80009a4 <main+0x184>)
 8000924:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	osThreadSuspend(defaultTaskHandle);
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <main+0x154>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f007 fdee 	bl	800850c <osThreadSuspend>
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000930:	f007 fd10 	bl	8008354 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000934:	e7fe      	b.n	8000934 <main+0x114>
 8000936:	bf00      	nop
 8000938:	20000000 	.word	0x20000000
 800093c:	0800d430 	.word	0x0800d430
 8000940:	20005520 	.word	0x20005520
 8000944:	0800d440 	.word	0x0800d440
 8000948:	200054d8 	.word	0x200054d8
 800094c:	0800d450 	.word	0x0800d450
 8000950:	200054c8 	.word	0x200054c8
 8000954:	2000551c 	.word	0x2000551c
 8000958:	2000552c 	.word	0x2000552c
 800095c:	20005534 	.word	0x20005534
 8000960:	20005524 	.word	0x20005524
 8000964:	0800d418 	.word	0x0800d418
 8000968:	20005528 	.word	0x20005528
 800096c:	0800d364 	.word	0x0800d364
 8000970:	08000bf1 	.word	0x08000bf1
 8000974:	200054cc 	.word	0x200054cc
 8000978:	0800d388 	.word	0x0800d388
 800097c:	08000c05 	.word	0x08000c05
 8000980:	200054d0 	.word	0x200054d0
 8000984:	0800d3d0 	.word	0x0800d3d0
 8000988:	08000c35 	.word	0x08000c35
 800098c:	20005530 	.word	0x20005530
 8000990:	0800d3f4 	.word	0x0800d3f4
 8000994:	08000cb1 	.word	0x08000cb1
 8000998:	20005538 	.word	0x20005538
 800099c:	0800d3ac 	.word	0x0800d3ac
 80009a0:	08000fcd 	.word	0x08000fcd
 80009a4:	200054d4 	.word	0x200054d4

080009a8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b094      	sub	sp, #80	; 0x50
 80009ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2234      	movs	r2, #52	; 0x34
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f00b ffac 	bl	800c914 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <SystemClock_Config+0xcc>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a27      	ldr	r2, [pc, #156]	; (8000a74 <SystemClock_Config+0xcc>)
 80009d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <SystemClock_Config+0xcc>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e8:	2300      	movs	r3, #0
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <SystemClock_Config+0xd0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <SystemClock_Config+0xd0>)
 80009f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <SystemClock_Config+0xd0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a0c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a16:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000a1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a20:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a26:	2307      	movs	r3, #7
 8000a28:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 fe4c 	bl	80046cc <HAL_RCC_OscConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000a3a:	f000 fb39 	bl	80010b0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3e:	230f      	movs	r3, #15
 8000a40:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a42:	2302      	movs	r3, #2
 8000a44:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a4e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a54:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	2105      	movs	r1, #5
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 fb37 	bl	80040d0 <HAL_RCC_ClockConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000a68:	f000 fb22 	bl	80010b0 <Error_Handler>
	}
}
 8000a6c:	bf00      	nop
 8000a6e:	3750      	adds	r7, #80	; 0x50
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40007000 	.word	0x40007000

08000a7c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_USART2_UART_Init+0x50>)
 8000a84:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
	//huart2.Init.WordLength = 64;
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	f004 faa2 	bl	8004ffc <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000abe:	f000 faf7 	bl	80010b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000553c 	.word	0x2000553c
 8000acc:	40004400 	.word	0x40004400

08000ad0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <MX_USART3_UART_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000b08:	f004 fa78 	bl	8004ffc <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b12:	f000 facd 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200054dc 	.word	0x200054dc
 8000b20:	40004800 	.word	0x40004800

08000b24 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a21      	ldr	r2, [pc, #132]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a1a      	ldr	r2, [pc, #104]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2101      	movs	r1, #1
 8000b92:	4815      	ldr	r0, [pc, #84]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000b94:	f001 fd74 	bl	8002680 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2120      	movs	r1, #32
 8000b9c:	4813      	ldr	r0, [pc, #76]	; (8000bec <MX_GPIO_Init+0xc8>)
 8000b9e:	f001 fd6f 	bl	8002680 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480b      	ldr	r0, [pc, #44]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000bba:	f001 fbcd 	bl	8002358 <HAL_GPIO_Init>

	/*Configure onboard led */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000bbe:	2320      	movs	r3, #32
 8000bc0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_GPIO_Init+0xc8>)
 8000bd6:	f001 fbbf 	bl	8002358 <HAL_GPIO_Init>

}
 8000bda:	bf00      	nop
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 8000bf8:	f00b fb56 	bl	800c2a8 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f007 fcb9 	bl	8008574 <osDelay>
 8000c02:	e7fb      	b.n	8000bfc <StartDefaultTask+0xc>

08000c04 <usbhTaskFunction>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_usbhTaskFunction */
void usbhTaskFunction(void *argument)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN usbhTaskFunction */
	/* Infinite loop */
	for(;;)
	{
		osMutexAcquire(usbhMutexHandle, 500U);
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <usbhTaskFunction+0x2c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c14:	4618      	mov	r0, r3
 8000c16:	f007 fd75 	bl	8008704 <osMutexAcquire>
		MX_USB_HOST_Process();
 8000c1a:	f00b fb2f 	bl	800c27c <MX_USB_HOST_Process>
		osMutexRelease(usbhMutexHandle);
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <usbhTaskFunction+0x2c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f007 fdcc 	bl	80087c0 <osMutexRelease>

		osDelay(1);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f007 fca3 	bl	8008574 <osDelay>
		osMutexAcquire(usbhMutexHandle, 500U);
 8000c2e:	e7ed      	b.n	8000c0c <usbhTaskFunction+0x8>
 8000c30:	20005520 	.word	0x20005520

08000c34 <idleThread>:
/**
 * @brief  Thread managing the state 1 of the translator.
 * @param  argument: Not used
 * @retval None
 */
void idleThread(void *argument){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b09c      	sub	sp, #112	; 0x70
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
        // variable used for the uart2 (debug)
	char Uart_Buf[100];

	for(;;){
		// acquiring of semaphore
		osStatus_t tmp = osSemaphoreAcquire(idleOn,50U);
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <idleThread+0x68>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2132      	movs	r1, #50	; 0x32
 8000c42:	4618      	mov	r0, r3
 8000c44:	f007 fea8 	bl	8008998 <osSemaphoreAcquire>
 8000c48:	66f8      	str	r0, [r7, #108]	; 0x6c
		if(tmp == osOK){
 8000c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d121      	bne.n	8000c94 <idleThread+0x60>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c50:	2120      	movs	r1, #32
 8000c52:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <idleThread+0x6c>)
 8000c54:	f001 fd2d 	bl	80026b2 <HAL_GPIO_TogglePin>

			// showing up of a message to the console. This ressource is protected by a mutex
			sprintf(Uart_Buf, "in idle\r\n");
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	4911      	ldr	r1, [pc, #68]	; (8000ca4 <idleThread+0x70>)
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f00b ff1a 	bl	800ca98 <siprintf>
			osMutexAcquire(uart2MutexHandle, 50U);
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <idleThread+0x74>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2132      	movs	r1, #50	; 0x32
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f007 fd4a 	bl	8008704 <osMutexAcquire>
			HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf, strlen(Uart_Buf), 100);
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff facb 	bl	8000210 <strlen>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	f107 0108 	add.w	r1, r7, #8
 8000c82:	2364      	movs	r3, #100	; 0x64
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <idleThread+0x78>)
 8000c86:	f004 fa06 	bl	8005096 <HAL_UART_Transmit>
			osMutexRelease(uart2MutexHandle);
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <idleThread+0x74>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f007 fd96 	bl	80087c0 <osMutexRelease>
		}

		osDelay(50);
 8000c94:	2032      	movs	r0, #50	; 0x32
 8000c96:	f007 fc6d 	bl	8008574 <osDelay>
	for(;;){
 8000c9a:	e7cf      	b.n	8000c3c <idleThread+0x8>
 8000c9c:	2000551c 	.word	0x2000551c
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	0800d2b8 	.word	0x0800d2b8
 8000ca8:	200054d8 	.word	0x200054d8
 8000cac:	2000553c 	.word	0x2000553c

08000cb0 <translatorThread>:
/**
 * @brief  Thread managing the state 2 of the translator.
 * @param  argument: Not used
 * @retval None
 */
void translatorThread(void *argument){
 8000cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cb2:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8000cb6:	af04      	add	r7, sp, #16
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	6018      	str	r0, [r3, #0]

	// Run
	for(;;){
               
		// semaphore acquire a token
		osStatus_t tmp = osSemaphoreAcquire(translatorOn,50U);
 8000cbc:	4bb8      	ldr	r3, [pc, #736]	; (8000fa0 <translatorThread+0x2f0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2132      	movs	r1, #50	; 0x32
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f007 fe68 	bl	8008998 <osSemaphoreAcquire>
 8000cc8:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		
		// if the token is acquired, then the process of the task could start
		if(tmp == osOK){
 8000ccc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 8160 	bne.w	8000f96 <translatorThread+0x2e6>

			// debug :  state status displayed to the console with a mutex protection on the uart
			sprintf(Uart_Buf, "in Translator\r\n");
 8000cd6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000cda:	49b2      	ldr	r1, [pc, #712]	; (8000fa4 <translatorThread+0x2f4>)
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f00b fedb 	bl	800ca98 <siprintf>
			osMutexAcquire(uart2MutexHandle, 50U);  
 8000ce2:	4bb1      	ldr	r3, [pc, #708]	; (8000fa8 <translatorThread+0x2f8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2132      	movs	r1, #50	; 0x32
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f007 fd0b 	bl	8008704 <osMutexAcquire>
			HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf, strlen(Uart_Buf), 100);
 8000cee:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fa8c 	bl	8000210 <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	48aa      	ldr	r0, [pc, #680]	; (8000fac <translatorThread+0x2fc>)
 8000d04:	f004 f9c7 	bl	8005096 <HAL_UART_Transmit>
			osMutexRelease(uart2MutexHandle);
 8000d08:	4ba7      	ldr	r3, [pc, #668]	; (8000fa8 <translatorThread+0x2f8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f007 fd57 	bl	80087c0 <osMutexRelease>

			// Get all change from the controller by the queue
			osStatus_t gotMess = osMessageQueueGet(reportQueueHandle, &report, NULL, 50U);
 8000d12:	4ba7      	ldr	r3, [pc, #668]	; (8000fb0 <translatorThread+0x300>)
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8000d1a:	2332      	movs	r3, #50	; 0x32
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f007 fff3 	bl	8008d08 <osMessageQueueGet>
 8000d22:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248

			// If the status is correct and has all we need then the debug and transmission will start
			if(gotMess == osOK){
 8000d26:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f040 812e 	bne.w	8000f8c <translatorThread+0x2dc>
				osMutexRelease(uart2MutexHandle);
				osDelay(5);  */

				// formatting the frame to the console debug. Displaying all data from accelerometer and gyroscope
				sprintf(Uart_Buf1, "X: %4d, Y: %4d, Z: %4d, G: %4d\r\n",
						decodeRawData(report.AccX_Raw_HI, report.AccX_Raw_LO),
 8000d30:	f897 3231 	ldrb.w	r3, [r7, #561]	; 0x231
 8000d34:	f897 2232 	ldrb.w	r2, [r7, #562]	; 0x232
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fd1a 	bl	8000774 <decodeRawData>
 8000d40:	4603      	mov	r3, r0
				sprintf(Uart_Buf1, "X: %4d, Y: %4d, Z: %4d, G: %4d\r\n",
 8000d42:	461d      	mov	r5, r3
						decodeRawData(report.AccY_Raw_HI, report.AccY_Raw_LO),
 8000d44:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8000d48:	f897 2234 	ldrb.w	r2, [r7, #564]	; 0x234
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fd10 	bl	8000774 <decodeRawData>
 8000d54:	4603      	mov	r3, r0
				sprintf(Uart_Buf1, "X: %4d, Y: %4d, Z: %4d, G: %4d\r\n",
 8000d56:	461e      	mov	r6, r3
						decodeRawData(report.AccZ_Raw_HI, report.AccZ_Raw_LO),
 8000d58:	f897 3235 	ldrb.w	r3, [r7, #565]	; 0x235
 8000d5c:	f897 2236 	ldrb.w	r2, [r7, #566]	; 0x236
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fd06 	bl	8000774 <decodeRawData>
 8000d68:	4603      	mov	r3, r0
				sprintf(Uart_Buf1, "X: %4d, Y: %4d, Z: %4d, G: %4d\r\n",
 8000d6a:	461c      	mov	r4, r3
						decodeRawData(report.Gyro_Raw_HI, report.Gyro_Raw_LO));
 8000d6c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000d70:	f897 2238 	ldrb.w	r2, [r7, #568]	; 0x238
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fcfc 	bl	8000774 <decodeRawData>
 8000d7c:	4603      	mov	r3, r0
				sprintf(Uart_Buf1, "X: %4d, Y: %4d, Z: %4d, G: %4d\r\n",
 8000d7e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	9400      	str	r4, [sp, #0]
 8000d86:	4633      	mov	r3, r6
 8000d88:	462a      	mov	r2, r5
 8000d8a:	498a      	ldr	r1, [pc, #552]	; (8000fb4 <translatorThread+0x304>)
 8000d8c:	f00b fe84 	bl	800ca98 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t *)"\033[F\033[F", strlen("\033[F\033[F"), 100);
				osMutexRelease(uart2MutexHandle);*/

				// Formatting the frame to the console debug. Displaying all data from the stick
				sprintf(Uart_Buf2, "LX: %4d, LY: %u, RX: %u, RY: %u\r\n",
						report.LeftStickX,
 8000d90:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
				sprintf(Uart_Buf2, "LX: %4d, LY: %u, RX: %u, RY: %u\r\n",
 8000d94:	4619      	mov	r1, r3
						report.LeftStickY,
 8000d96:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
				sprintf(Uart_Buf2, "LX: %4d, LY: %u, RX: %u, RY: %u\r\n",
 8000d9a:	461c      	mov	r4, r3
						report.RightStickX,
 8000d9c:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
						report.RightStickY);
 8000da0:	f897 2211 	ldrb.w	r2, [r7, #529]	; 0x211
				sprintf(Uart_Buf2, "LX: %4d, LY: %u, RX: %u, RY: %u\r\n",
 8000da4:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8000da8:	9201      	str	r2, [sp, #4]
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	4623      	mov	r3, r4
 8000dae:	460a      	mov	r2, r1
 8000db0:	4981      	ldr	r1, [pc, #516]	; (8000fb8 <translatorThread+0x308>)
 8000db2:	f00b fe71 	bl	800ca98 <siprintf>

				// Displaying all data contained in buf-1-2 to the console with a mutex protection on the uart2
				osMutexAcquire(uart2MutexHandle, 50U);
 8000db6:	4b7c      	ldr	r3, [pc, #496]	; (8000fa8 <translatorThread+0x2f8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2132      	movs	r1, #50	; 0x32
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f007 fca1 	bl	8008704 <osMutexAcquire>
				HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf, strlen(Uart_Buf), 100);
 8000dc2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fa22 	bl	8000210 <strlen>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8000dd4:	2364      	movs	r3, #100	; 0x64
 8000dd6:	4875      	ldr	r0, [pc, #468]	; (8000fac <translatorThread+0x2fc>)
 8000dd8:	f004 f95d 	bl	8005096 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf1, strlen(Uart_Buf1), 100);
 8000ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fa15 	bl	8000210 <strlen>
 8000de6:	4603      	mov	r3, r0
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8000dee:	2364      	movs	r3, #100	; 0x64
 8000df0:	486e      	ldr	r0, [pc, #440]	; (8000fac <translatorThread+0x2fc>)
 8000df2:	f004 f950 	bl	8005096 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf2, strlen(Uart_Buf2), 100);
 8000df6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fa08 	bl	8000210 <strlen>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	4868      	ldr	r0, [pc, #416]	; (8000fac <translatorThread+0x2fc>)
 8000e0c:	f004 f943 	bl	8005096 <HAL_UART_Transmit>
				osMutexRelease(uart2MutexHandle);
 8000e10:	4b65      	ldr	r3, [pc, #404]	; (8000fa8 <translatorThread+0x2f8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f007 fcd3 	bl	80087c0 <osMutexRelease>

				// Translation managing
				uint8_t byte2Received = ((uint8_t*)&report)[2];
 8000e1a:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 8000e1e:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
				uint8_t byte3Received = ((uint8_t*)&report)[3];
 8000e22:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8000e26:	f887 3246 	strb.w	r3, [r7, #582]	; 0x246
				uint8_t byte4Received = ((uint8_t*)&report)[4];
 8000e2a:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8000e2e:	f887 3245 	strb.w	r3, [r7, #581]	; 0x245

				uint8_t byte2ToSend = ((byte2Received & 0b00010000)>>4) | ((byte2Received & 0b01000000)>>5) |
 8000e32:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000e36:	111b      	asrs	r3, r3, #4
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	b25a      	sxtb	r2, r3
 8000e40:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000e44:	115b      	asrs	r3, r3, #5
 8000e46:	b25b      	sxtb	r3, r3
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	b25a      	sxtb	r2, r3
									  ((byte2Received & 0b10000000)>>5) | ((byte2Received & 0b00100000)>>2) |
 8000e52:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000e56:	115b      	asrs	r3, r3, #5
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	b25b      	sxtb	r3, r3
				uint8_t byte2ToSend = ((byte2Received & 0b00010000)>>4) | ((byte2Received & 0b01000000)>>5) |
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b25a      	sxtb	r2, r3
									  ((byte2Received & 0b10000000)>>5) | ((byte2Received & 0b00100000)>>2) |
 8000e64:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000e68:	109b      	asrs	r3, r3, #2
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b25a      	sxtb	r2, r3
									  ((byte2Received & 0b00001000)<<1) | ((byte2Received & 0b00000001)<<5) |
 8000e76:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	b25b      	sxtb	r3, r3
									  ((byte2Received & 0b10000000)>>5) | ((byte2Received & 0b00100000)>>2) |
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b25a      	sxtb	r2, r3
									  ((byte2Received & 0b00001000)<<1) | ((byte2Received & 0b00000001)<<5) |
 8000e88:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000e8c:	015b      	lsls	r3, r3, #5
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	f003 0320 	and.w	r3, r3, #32
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b25a      	sxtb	r2, r3
									  ((byte2Received & 0b00000010)<<5) | ((byte2Received & 0b00000100)<<5);
 8000e9a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000e9e:	015b      	lsls	r3, r3, #5
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea6:	b25b      	sxtb	r3, r3
									  ((byte2Received & 0b00001000)<<1) | ((byte2Received & 0b00000001)<<5) |
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b25a      	sxtb	r2, r3
									  ((byte2Received & 0b00000010)<<5) | ((byte2Received & 0b00000100)<<5);
 8000eac:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000eb0:	015b      	lsls	r3, r3, #5
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b25b      	sxtb	r3, r3
				uint8_t byte2ToSend = ((byte2Received & 0b00010000)>>4) | ((byte2Received & 0b01000000)>>5) |
 8000ebe:	f887 3244 	strb.w	r3, [r7, #580]	; 0x244

				uint8_t byte3ToSend = ((byte3Received & 0b00000100)>>2) | ((byte3Received & 0b00001000)>>2) |
 8000ec2:	f897 3246 	ldrb.w	r3, [r7, #582]	; 0x246
 8000ec6:	109b      	asrs	r3, r3, #2
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	b25a      	sxtb	r2, r3
									  ((byte4Received & 0b00000001)<<2) | ((byte3Received & 0b00000000)<<3) |
 8000ed0:	f897 3245 	ldrb.w	r3, [r7, #581]	; 0x245
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b25a      	sxtb	r2, r3
									  ((byte3Received & 0b01000000)>>2) | ((byte3Received & 0b00100000)<<0) |
 8000ee2:	f897 3246 	ldrb.w	r3, [r7, #582]	; 0x246
 8000ee6:	109b      	asrs	r3, r3, #2
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	b25b      	sxtb	r3, r3
									  ((byte4Received & 0b00000001)<<2) | ((byte3Received & 0b00000000)<<3) |
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b25a      	sxtb	r2, r3
									  ((byte3Received & 0b01000000)>>2) | ((byte3Received & 0b00100000)<<0) |
 8000ef4:	f997 3246 	ldrsb.w	r3, [r7, #582]	; 0x246
 8000ef8:	f003 0320 	and.w	r3, r3, #32
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b25a      	sxtb	r2, r3
									  ((byte3Received & 0b10000000)>>1) | ((byte3Received & 0b00010000)<<3);
 8000f02:	f897 3246 	ldrb.w	r3, [r7, #582]	; 0x246
 8000f06:	105b      	asrs	r3, r3, #1
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f0e:	b25b      	sxtb	r3, r3
									  ((byte3Received & 0b01000000)>>2) | ((byte3Received & 0b00100000)<<0) |
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b25a      	sxtb	r2, r3
									  ((byte3Received & 0b10000000)>>1) | ((byte3Received & 0b00010000)<<3);
 8000f14:	f897 3246 	ldrb.w	r3, [r7, #582]	; 0x246
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b25b      	sxtb	r3, r3
				uint8_t byte3ToSend = ((byte3Received & 0b00000100)>>2) | ((byte3Received & 0b00001000)>>2) |
 8000f26:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
				     	}
						*/

                                
				// sending all data to the another stm32. A total of 6 decimal bytes is sent on uart3
				sprintf(Uart3_buf,"%d%d%d%d%d%d", byte2ToSend, byte3ToSend,
 8000f2a:	f897 2244 	ldrb.w	r2, [r7, #580]	; 0x244
 8000f2e:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
									       report.LeftStickX,report.LeftStickY,
 8000f32:	f897 120e 	ldrb.w	r1, [r7, #526]	; 0x20e
 8000f36:	f897 020f 	ldrb.w	r0, [r7, #527]	; 0x20f
				sprintf(Uart3_buf,"%d%d%d%d%d%d", byte2ToSend, byte3ToSend,
 8000f3a:	4604      	mov	r4, r0
									       report.RightStickX,report.RightStickY);
 8000f3c:	f897 0210 	ldrb.w	r0, [r7, #528]	; 0x210
				sprintf(Uart3_buf,"%d%d%d%d%d%d", byte2ToSend, byte3ToSend,
 8000f40:	4605      	mov	r5, r0
									       report.RightStickX,report.RightStickY);
 8000f42:	f897 0211 	ldrb.w	r0, [r7, #529]	; 0x211
				sprintf(Uart3_buf,"%d%d%d%d%d%d", byte2ToSend, byte3ToSend,
 8000f46:	4606      	mov	r6, r0
 8000f48:	f107 0008 	add.w	r0, r7, #8
 8000f4c:	9603      	str	r6, [sp, #12]
 8000f4e:	9502      	str	r5, [sp, #8]
 8000f50:	9401      	str	r4, [sp, #4]
 8000f52:	9100      	str	r1, [sp, #0]
 8000f54:	4919      	ldr	r1, [pc, #100]	; (8000fbc <translatorThread+0x30c>)
 8000f56:	f00b fd9f 	bl	800ca98 <siprintf>
                                
				// sending data on uart3. A protection is used on the uart3 ressource
				//sprintf(Uart3_buf,"%d\0", Uart3_buf);                                                           //A changer ICI !!!!!!!!!!!!!!!!
				osMutexAcquire(uart3MutexHandle, 50U);
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <translatorThread+0x310>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2132      	movs	r1, #50	; 0x32
 8000f60:	4618      	mov	r0, r3
 8000f62:	f007 fbcf 	bl	8008704 <osMutexAcquire>
				HAL_UART_Transmit(&huart3, (uint8_t *)Uart3_buf, strlen(Uart3_buf), 100);
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff f950 	bl	8000210 <strlen>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	f107 0108 	add.w	r1, r7, #8
 8000f78:	2364      	movs	r3, #100	; 0x64
 8000f7a:	4812      	ldr	r0, [pc, #72]	; (8000fc4 <translatorThread+0x314>)
 8000f7c:	f004 f88b 	bl	8005096 <HAL_UART_Transmit>
				osMutexRelease(uart3MutexHandle);
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <translatorThread+0x310>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f007 fc1b 	bl	80087c0 <osMutexRelease>
 8000f8a:	e004      	b.n	8000f96 <translatorThread+0x2e6>
			}
			else{
				// if the connection is lost, a semaphore send the signal
				osSemaphoreRelease(deviceDisconnected);
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <translatorThread+0x318>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f007 fd67 	bl	8008a64 <osSemaphoreRelease>
			}
		}
                
		osDelay(10);
 8000f96:	200a      	movs	r0, #10
 8000f98:	f007 faec 	bl	8008574 <osDelay>
	for(;;){
 8000f9c:	e68e      	b.n	8000cbc <translatorThread+0xc>
 8000f9e:	bf00      	nop
 8000fa0:	2000552c 	.word	0x2000552c
 8000fa4:	0800d2c4 	.word	0x0800d2c4
 8000fa8:	200054d8 	.word	0x200054d8
 8000fac:	2000553c 	.word	0x2000553c
 8000fb0:	20005528 	.word	0x20005528
 8000fb4:	0800d2d4 	.word	0x0800d2d4
 8000fb8:	0800d2f8 	.word	0x0800d2f8
 8000fbc:	0800d31c 	.word	0x0800d31c
 8000fc0:	200054c8 	.word	0x200054c8
 8000fc4:	200054dc 	.word	0x200054dc
 8000fc8:	20005524 	.word	0x20005524

08000fcc <stateMachineThread>:
 * @brief  Thread allowing to manage the state machine of translator app
 * @note   This function is called every time by the scheduler
 * @param  void : *argument
 * @retval None
 */
void stateMachineThread(void *argument){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09c      	sub	sp, #112	; 0x70
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	int state = 0;           // variable that manages states
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	66fb      	str	r3, [r7, #108]	; 0x6c

        // Run
	for(;;){
                
                
	if(osSemaphoreAcquire(deviceConnected,50U) == osOK){                    // this semaphore allows to manage the connection. if the connection is established then, state equals 1 (state translation)
 8000fd8:	4b25      	ldr	r3, [pc, #148]	; (8001070 <stateMachineThread+0xa4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2132      	movs	r1, #50	; 0x32
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 fcda 	bl	8008998 <osSemaphoreAcquire>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <stateMachineThread+0x22>
			state = 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	66fb      	str	r3, [r7, #108]	; 0x6c
			//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);    // Debug
		}
		if(osSemaphoreAcquire(deviceDisconnected,50U) == osOK){				// this semaphore allows to manage the connection. if the connection is lost then, state equals 0 (state idle)
 8000fee:	4b21      	ldr	r3, [pc, #132]	; (8001074 <stateMachineThread+0xa8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2132      	movs	r1, #50	; 0x32
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f007 fccf 	bl	8008998 <osSemaphoreAcquire>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <stateMachineThread+0x38>
                 	state = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	66fb      	str	r3, [r7, #108]	; 0x6c
		}

		// showing up of a message to the console. This ressource is protected by a mutex
		sprintf(Uart_Buf, "in State : %u\r\n", state);
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800100a:	491b      	ldr	r1, [pc, #108]	; (8001078 <stateMachineThread+0xac>)
 800100c:	4618      	mov	r0, r3
 800100e:	f00b fd43 	bl	800ca98 <siprintf>
		osMutexAcquire(uart2MutexHandle, 50U);
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <stateMachineThread+0xb0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2132      	movs	r1, #50	; 0x32
 8001018:	4618      	mov	r0, r3
 800101a:	f007 fb73 	bl	8008704 <osMutexAcquire>
		HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf, strlen(Uart_Buf), 100);
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f8f4 	bl	8000210 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	f107 0108 	add.w	r1, r7, #8
 8001030:	2364      	movs	r3, #100	; 0x64
 8001032:	4813      	ldr	r0, [pc, #76]	; (8001080 <stateMachineThread+0xb4>)
 8001034:	f004 f82f 	bl	8005096 <HAL_UART_Transmit>
		osMutexRelease(uart2MutexHandle);
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <stateMachineThread+0xb0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f007 fbbf 	bl	80087c0 <osMutexRelease>
		   osMutexAcquire(uart2MutexHandle, 50U);
		   HAL_UART_Transmit(&huart2, (uint8_t *)Uart_Buf, strlen(Uart_Buf), 100);
		   osMutexRelease(uart2MutexHandle);*/

		// according to the value of the state the thread is selected
		switch(state){
 8001042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <stateMachineThread+0x84>
 8001048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800104a:	2b01      	cmp	r3, #1
 800104c:	d006      	beq.n	800105c <stateMachineThread+0x90>
 800104e:	e00b      	b.n	8001068 <stateMachineThread+0x9c>
		case 0:
			osSemaphoreRelease(idleOn);
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <stateMachineThread+0xb8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f007 fd05 	bl	8008a64 <osSemaphoreRelease>
			break;
 800105a:	e005      	b.n	8001068 <stateMachineThread+0x9c>
		case 1:
			osSemaphoreRelease(translatorOn);
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <stateMachineThread+0xbc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f007 fcff 	bl	8008a64 <osSemaphoreRelease>
			break;
 8001066:	bf00      	nop
		}
		osDelay(10);
 8001068:	200a      	movs	r0, #10
 800106a:	f007 fa83 	bl	8008574 <osDelay>
	if(osSemaphoreAcquire(deviceConnected,50U) == osOK){                    // this semaphore allows to manage the connection. if the connection is established then, state equals 1 (state translation)
 800106e:	e7b3      	b.n	8000fd8 <stateMachineThread+0xc>
 8001070:	20005534 	.word	0x20005534
 8001074:	20005524 	.word	0x20005524
 8001078:	0800d32c 	.word	0x0800d32c
 800107c:	200054d8 	.word	0x200054d8
 8001080:	2000553c 	.word	0x2000553c
 8001084:	2000551c 	.word	0x2000551c
 8001088:	2000552c 	.word	0x2000552c

0800108c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800109e:	f001 f835 	bl	800210c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40001000 	.word	0x40001000

080010b0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_MspInit+0x54>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a11      	ldr	r2, [pc, #68]	; (8001114 <HAL_MspInit+0x54>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <HAL_MspInit+0x54>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_MspInit+0x54>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_MspInit+0x54>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_MspInit+0x54>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	210f      	movs	r1, #15
 8001102:	f06f 0001 	mvn.w	r0, #1
 8001106:	f001 f8fd 	bl	8002304 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a41      	ldr	r2, [pc, #260]	; (800123c <HAL_UART_MspInit+0x124>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d12c      	bne.n	8001194 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	4b40      	ldr	r3, [pc, #256]	; (8001240 <HAL_UART_MspInit+0x128>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a3f      	ldr	r2, [pc, #252]	; (8001240 <HAL_UART_MspInit+0x128>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <HAL_UART_MspInit+0x128>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	61bb      	str	r3, [r7, #24]
 8001154:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	4b39      	ldr	r3, [pc, #228]	; (8001240 <HAL_UART_MspInit+0x128>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a38      	ldr	r2, [pc, #224]	; (8001240 <HAL_UART_MspInit+0x128>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b36      	ldr	r3, [pc, #216]	; (8001240 <HAL_UART_MspInit+0x128>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001172:	230c      	movs	r3, #12
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001182:	2307      	movs	r3, #7
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	482d      	ldr	r0, [pc, #180]	; (8001244 <HAL_UART_MspInit+0x12c>)
 800118e:	f001 f8e3 	bl	8002358 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001192:	e04f      	b.n	8001234 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a2b      	ldr	r2, [pc, #172]	; (8001248 <HAL_UART_MspInit+0x130>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d14a      	bne.n	8001234 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_UART_MspInit+0x128>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_UART_MspInit+0x128>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <HAL_UART_MspInit+0x128>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_UART_MspInit+0x128>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <HAL_UART_MspInit+0x128>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HAL_UART_MspInit+0x128>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_UART_MspInit+0x128>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_UART_MspInit+0x128>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_UART_MspInit+0x128>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011f2:	2320      	movs	r3, #32
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001202:	2307      	movs	r3, #7
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	480f      	ldr	r0, [pc, #60]	; (800124c <HAL_UART_MspInit+0x134>)
 800120e:	f001 f8a3 	bl	8002358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001224:	2307      	movs	r3, #7
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	4808      	ldr	r0, [pc, #32]	; (8001250 <HAL_UART_MspInit+0x138>)
 8001230:	f001 f892 	bl	8002358 <HAL_GPIO_Init>
}
 8001234:	bf00      	nop
 8001236:	3730      	adds	r7, #48	; 0x30
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40004400 	.word	0x40004400
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000
 8001248:	40004800 	.word	0x40004800
 800124c:	40020800 	.word	0x40020800
 8001250:	40020400 	.word	0x40020400

08001254 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	2036      	movs	r0, #54	; 0x36
 800126a:	f001 f84b 	bl	8002304 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800126e:	2036      	movs	r0, #54	; 0x36
 8001270:	f001 f864 	bl	800233c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_InitTick+0xa4>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a1e      	ldr	r2, [pc, #120]	; (80012f8 <HAL_InitTick+0xa4>)
 800127e:	f043 0310 	orr.w	r3, r3, #16
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <HAL_InitTick+0xa4>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001290:	f107 0210 	add.w	r2, r7, #16
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f003 f832 	bl	8004304 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80012a0:	f003 f808 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 80012a4:	4603      	mov	r3, r0
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ac:	4a13      	ldr	r2, [pc, #76]	; (80012fc <HAL_InitTick+0xa8>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	0c9b      	lsrs	r3, r3, #18
 80012b4:	3b01      	subs	r3, #1
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_InitTick+0xac>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <HAL_InitTick+0xb0>)
 80012bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_InitTick+0xac>)
 80012c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <HAL_InitTick+0xac>)
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_InitTick+0xac>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_InitTick+0xac>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <HAL_InitTick+0xac>)
 80012da:	f003 fc51 	bl	8004b80 <HAL_TIM_Base_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d104      	bne.n	80012ee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <HAL_InitTick+0xac>)
 80012e6:	f003 fc80 	bl	8004bea <HAL_TIM_Base_Start_IT>
 80012ea:	4603      	mov	r3, r0
 80012ec:	e000      	b.n	80012f0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3730      	adds	r7, #48	; 0x30
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	431bde83 	.word	0x431bde83
 8001300:	20005580 	.word	0x20005580
 8001304:	40001000 	.word	0x40001000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <TIM6_DAC_IRQHandler+0x10>)
 800133a:	f003 fc7a 	bl	8004c32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20005580 	.word	0x20005580

08001348 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <OTG_FS_IRQHandler+0x10>)
 800134e:	f001 fc5b 	bl	8002c08 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20005b84 	.word	0x20005b84

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f00b fa82 	bl	800c894 <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <_sbrk+0x64>)
 80013ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20020000 	.word	0x20020000
 80013bc:	00000400 	.word	0x00000400
 80013c0:	200000dc 	.word	0x200000dc
 80013c4:	20005e58 	.word	0x20005e58

080013c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <SystemInit+0x28>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <SystemInit+0x28>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <SystemInit+0x28>)
 80013de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013e2:	609a      	str	r2, [r3, #8]
#endif
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b08b      	sub	sp, #44	; 0x2c
 80013f8:	af04      	add	r7, sp, #16
 80013fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  #ifndef BOOTMODE
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0xFFU, 0xFFU);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001406:	7919      	ldrb	r1, [r3, #4]
 8001408:	23ff      	movs	r3, #255	; 0xff
 800140a:	22ff      	movs	r2, #255	; 0xff
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f005 faf7 	bl	8006a00 <USBH_FindInterface>
 8001412:	4603      	mov	r3, r0
 8001414:	75bb      	strb	r3, [r7, #22]
  #else
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
  #endif

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8001416:	7dbb      	ldrb	r3, [r7, #22]
 8001418:	2bff      	cmp	r3, #255	; 0xff
 800141a:	d002      	beq.n	8001422 <USBH_HID_InterfaceInit+0x2e>
 800141c:	7dbb      	ldrb	r3, [r7, #22]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d901      	bls.n	8001426 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8001422:	2302      	movs	r3, #2
 8001424:	e106      	b.n	8001634 <USBH_HID_InterfaceInit+0x240>
  }

  status = USBH_SelectInterface(phost, interface);
 8001426:	7dbb      	ldrb	r3, [r7, #22]
 8001428:	4619      	mov	r1, r3
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f005 facc 	bl	80069c8 <USBH_SelectInterface>
 8001430:	4603      	mov	r3, r0
 8001432:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8001434:	7d7b      	ldrb	r3, [r7, #21]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 800143a:	2302      	movs	r3, #2
 800143c:	e0fa      	b.n	8001634 <USBH_HID_InterfaceInit+0x240>
  }

  phost->pActiveClass->pData = class_pData;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001444:	4a7d      	ldr	r2, [pc, #500]	; (800163c <USBH_HID_InterfaceInit+0x248>)
 8001446:	61da      	str	r2, [r3, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <USBH_HID_InterfaceInit+0x68>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8001458:	2302      	movs	r3, #2
 800145a:	e0eb      	b.n	8001634 <USBH_HID_InterfaceInit+0x240>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800145c:	2234      	movs	r2, #52	; 0x34
 800145e:	2100      	movs	r1, #0
 8001460:	6938      	ldr	r0, [r7, #16]
 8001462:	f00b fa57 	bl	800c914 <memset>

  HID_Handle->state = HID_ERROR;
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	2207      	movs	r2, #7
 800146a:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800146c:	7dbb      	ldrb	r3, [r7, #22]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	211a      	movs	r1, #26
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	4413      	add	r3, r2
 8001478:	f203 3349 	addw	r3, r3, #841	; 0x349
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d103      	bne.n	800148a <USBH_HID_InterfaceInit+0x96>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4a6e      	ldr	r2, [pc, #440]	; (8001640 <USBH_HID_InterfaceInit+0x24c>)
 8001486:	631a      	str	r2, [r3, #48]	; 0x30
 8001488:	e011      	b.n	80014ae <USBH_HID_InterfaceInit+0xba>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800148a:	7dbb      	ldrb	r3, [r7, #22]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	211a      	movs	r1, #26
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	4413      	add	r3, r2
 8001496:	f203 3349 	addw	r3, r3, #841	; 0x349
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d103      	bne.n	80014a8 <USBH_HID_InterfaceInit+0xb4>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4a68      	ldr	r2, [pc, #416]	; (8001644 <USBH_HID_InterfaceInit+0x250>)
 80014a4:	631a      	str	r2, [r3, #48]	; 0x30
 80014a6:	e002      	b.n	80014ae <USBH_HID_InterfaceInit+0xba>
  }
  else
  {
    USBH_UsrLog("Generic HID device found!");
    HID_Handle->Init = USBH_HID_GenericInit;
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4a67      	ldr	r2, [pc, #412]	; (8001648 <USBH_HID_InterfaceInit+0x254>)
 80014ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  HID_Handle->state     = HID_INIT;
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2200      	movs	r2, #0
 80014b2:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	2200      	movs	r2, #0
 80014b8:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80014ba:	7dbb      	ldrb	r3, [r7, #22]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	211a      	movs	r1, #26
 80014c0:	fb01 f303 	mul.w	r3, r1, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80014d0:	7dbb      	ldrb	r3, [r7, #22]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	211a      	movs	r1, #26
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	4413      	add	r3, r2
 80014dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80014e0:	881a      	ldrh	r2, [r3, #0]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80014e6:	7dbb      	ldrb	r3, [r7, #22]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	211a      	movs	r1, #26
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	f203 3352 	addw	r3, r3, #850	; 0x352
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	8b9b      	ldrh	r3, [r3, #28]
 8001502:	2b09      	cmp	r3, #9
 8001504:	d802      	bhi.n	800150c <USBH_HID_InterfaceInit+0x118>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	220a      	movs	r2, #10
 800150a:	839a      	strh	r2, [r3, #28]
  }

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800150c:	7dbb      	ldrb	r3, [r7, #22]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	211a      	movs	r1, #26
 8001512:	fb01 f303 	mul.w	r3, r1, r3
 8001516:	4413      	add	r3, r2
 8001518:	f203 3346 	addw	r3, r3, #838	; 0x346
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b02      	cmp	r3, #2
 8001520:	bf28      	it	cs
 8001522:	2302      	movcs	r3, #2
 8001524:	73fb      	strb	r3, [r7, #15]
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]
 800152a:	e07d      	b.n	8001628 <USBH_HID_InterfaceInit+0x234>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 800152c:	7dbb      	ldrb	r3, [r7, #22]
 800152e:	7df9      	ldrb	r1, [r7, #23]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	3101      	adds	r1, #1
 8001534:	00c9      	lsls	r1, r1, #3
 8001536:	201a      	movs	r0, #26
 8001538:	fb00 f303 	mul.w	r3, r0, r3
 800153c:	440b      	add	r3, r1
 800153e:	4413      	add	r3, r2
 8001540:	f203 3346 	addw	r3, r3, #838	; 0x346
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b25b      	sxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	da35      	bge.n	80015b8 <USBH_HID_InterfaceInit+0x1c4>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800154c:	7dbb      	ldrb	r3, [r7, #22]
 800154e:	7df9      	ldrb	r1, [r7, #23]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	3101      	adds	r1, #1
 8001554:	00c9      	lsls	r1, r1, #3
 8001556:	201a      	movs	r0, #26
 8001558:	fb00 f303 	mul.w	r3, r0, r3
 800155c:	440b      	add	r3, r1
 800155e:	4413      	add	r3, r2
 8001560:	f203 3346 	addw	r3, r3, #838	; 0x346
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	791b      	ldrb	r3, [r3, #4]
 800156e:	4619      	mov	r1, r3
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f006 fe50 	bl	8008216 <USBH_AllocPipe>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	7859      	ldrb	r1, [r3, #1]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	7918      	ldrb	r0, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	8b12      	ldrh	r2, [r2, #24]
 8001596:	9202      	str	r2, [sp, #8]
 8001598:	2203      	movs	r2, #3
 800159a:	9201      	str	r2, [sp, #4]
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	4623      	mov	r3, r4
 80015a0:	4602      	mov	r2, r0
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f006 fe08 	bl	80081b8 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	785b      	ldrb	r3, [r3, #1]
 80015ac:	2200      	movs	r2, #0
 80015ae:	4619      	mov	r1, r3
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f00b f8e9 	bl	800c788 <USBH_LL_SetToggle>
 80015b6:	e034      	b.n	8001622 <USBH_HID_InterfaceInit+0x22e>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 80015b8:	7dbb      	ldrb	r3, [r7, #22]
 80015ba:	7df9      	ldrb	r1, [r7, #23]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	3101      	adds	r1, #1
 80015c0:	00c9      	lsls	r1, r1, #3
 80015c2:	201a      	movs	r0, #26
 80015c4:	fb00 f303 	mul.w	r3, r0, r3
 80015c8:	440b      	add	r3, r1
 80015ca:	4413      	add	r3, r2
 80015cc:	f203 3346 	addw	r3, r3, #838	; 0x346
 80015d0:	781a      	ldrb	r2, [r3, #0]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	78db      	ldrb	r3, [r3, #3]
 80015da:	4619      	mov	r1, r3
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f006 fe1a 	bl	8008216 <USBH_AllocPipe>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	7819      	ldrb	r1, [r3, #0]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	78d8      	ldrb	r0, [r3, #3]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	8b12      	ldrh	r2, [r2, #24]
 8001602:	9202      	str	r2, [sp, #8]
 8001604:	2203      	movs	r2, #3
 8001606:	9201      	str	r2, [sp, #4]
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	4623      	mov	r3, r4
 800160c:	4602      	mov	r2, r0
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f006 fdd2 	bl	80081b8 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	4619      	mov	r1, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f00b f8b3 	bl	800c788 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8001622:	7dfb      	ldrb	r3, [r7, #23]
 8001624:	3301      	adds	r3, #1
 8001626:	75fb      	strb	r3, [r7, #23]
 8001628:	7dfa      	ldrb	r2, [r7, #23]
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	429a      	cmp	r2, r3
 800162e:	f4ff af7d 	bcc.w	800152c <USBH_HID_InterfaceInit+0x138>
    }
  }



  return USBH_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}
 800163c:	200000e0 	.word	0x200000e0
 8001640:	08001f31 	.word	0x08001f31
 8001644:	08001fe1 	.word	0x08001fe1
 8001648:	08001dcd 	.word	0x08001dcd

0800164c <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	785b      	ldrb	r3, [r3, #1]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00e      	beq.n	8001684 <USBH_HID_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	785b      	ldrb	r3, [r3, #1]
 800166a:	4619      	mov	r1, r3
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f006 fdc2 	bl	80081f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	785b      	ldrb	r3, [r3, #1]
 8001676:	4619      	mov	r1, r3
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f006 fded 	bl	8008258 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00e      	beq.n	80016aa <USBH_HID_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f006 fdaf 	bl	80081f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f006 fdda 	bl	8008258 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4618      	mov	r0, r3
 80016c0:	f00b f912 	bl	800c8e8 <free>
    phost->pActiveClass->pData = 0U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	795b      	ldrb	r3, [r3, #5]
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d851      	bhi.n	800179e <USBH_HID_ClassRequest+0xc6>
 80016fa:	a201      	add	r2, pc, #4	; (adr r2, 8001700 <USBH_HID_ClassRequest+0x28>)
 80016fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001700:	08001719 	.word	0x08001719
 8001704:	0800179f 	.word	0x0800179f
 8001708:	08001733 	.word	0x08001733
 800170c:	08001719 	.word	0x08001719
 8001710:	0800175d 	.word	0x0800175d
 8001714:	08001787 	.word	0x08001787
  {
  case HID_REQ_INIT:
  case HID_REQ_GET_HID_DESC:

    USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	331c      	adds	r3, #28
 8001722:	4619      	mov	r1, r3
 8001724:	4610      	mov	r0, r2
 8001726:	f000 fa07 	bl	8001b38 <USBH_HID_ParseHIDDesc>

    HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2202      	movs	r2, #2
 800172e:	715a      	strb	r2, [r3, #5]

    break;
 8001730:	e03a      	b.n	80017a8 <USBH_HID_ClassRequest+0xd0>
  case HID_REQ_GET_REPORT_DESC:

    /* Get Report Desc */
    classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001736:	4619      	mov	r1, r3
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f962 	bl	8001a02 <USBH_HID_GetHIDReportDescriptor>
 800173e:	4603      	mov	r3, r0
 8001740:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8001742:	7bbb      	ldrb	r3, [r7, #14]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d103      	bne.n	8001750 <USBH_HID_ClassRequest+0x78>
    {
      /* The descriptor is available in phost->device.Data */
      HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	2204      	movs	r2, #4
 800174c:	715a      	strb	r2, [r3, #5]
    else
    {
      /* .. */
    }

    break;
 800174e:	e028      	b.n	80017a2 <USBH_HID_ClassRequest+0xca>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d125      	bne.n	80017a2 <USBH_HID_ClassRequest+0xca>
      status = USBH_FAIL;
 8001756:	2302      	movs	r3, #2
 8001758:	73fb      	strb	r3, [r7, #15]
    break;
 800175a:	e022      	b.n	80017a2 <USBH_HID_ClassRequest+0xca>

  case HID_REQ_SET_IDLE:

    classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f967 	bl	8001a34 <USBH_HID_SetIdle>
 8001766:	4603      	mov	r3, r0
 8001768:	73bb      	strb	r3, [r7, #14]

    /* set Idle */
    if (classReqStatus == USBH_OK)
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <USBH_HID_ClassRequest+0xa0>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2205      	movs	r2, #5
 8001774:	715a      	strb	r2, [r3, #5]
      if (classReqStatus == USBH_NOT_SUPPORTED)
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
      }
    }
    break;
 8001776:	e016      	b.n	80017a6 <USBH_HID_ClassRequest+0xce>
      if (classReqStatus == USBH_NOT_SUPPORTED)
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d113      	bne.n	80017a6 <USBH_HID_ClassRequest+0xce>
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2205      	movs	r2, #5
 8001782:	715a      	strb	r2, [r3, #5]
    break;
 8001784:	e00f      	b.n	80017a6 <USBH_HID_ClassRequest+0xce>

  case HID_REQ_SET_PROTOCOL:
#ifndef BOOTMODE
	  /* bypass the set protocol state */
	  HID_Handle->ctl_state = HID_REQ_IDLE;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2201      	movs	r2, #1
 800178a:	715a      	strb	r2, [r3, #5]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8001792:	2102      	movs	r1, #2
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
      status = USBH_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
    {
      /* .. */
    }

#endif
    break;
 800179c:	e004      	b.n	80017a8 <USBH_HID_ClassRequest+0xd0>

  case HID_REQ_IDLE:
  default:
    break;
 800179e:	bf00      	nop
 80017a0:	e002      	b.n	80017a8 <USBH_HID_ClassRequest+0xd0>
    break;
 80017a2:	bf00      	nop
 80017a4:	e000      	b.n	80017a8 <USBH_HID_ClassRequest+0xd0>
    break;
 80017a6:	bf00      	nop
  }

  return status;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop

080017b4 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;
  USBH_URBStateTypeDef urb_state;

  switch (HID_Handle->state)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	789b      	ldrb	r3, [r3, #2]
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	f200 80e2 	bhi.w	8001998 <USBH_HID_Process+0x1e4>
 80017d4:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <USBH_HID_Process+0x28>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017f9 	.word	0x080017f9
 80017e0:	08001825 	.word	0x08001825
 80017e4:	08001999 	.word	0x08001999
 80017e8:	08001999 	.word	0x08001999
 80017ec:	080018cd 	.word	0x080018cd
 80017f0:	0800189b 	.word	0x0800189b
 80017f4:	080018fb 	.word	0x080018fb
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	2201      	movs	r2, #1
 8001804:	709a      	strb	r2, [r3, #2]



#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2202      	movs	r2, #2
 800180a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800181a:	2300      	movs	r3, #0
 800181c:	2200      	movs	r2, #0
 800181e:	f007 f9ff 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      break;
 8001822:	e0bc      	b.n	800199e <USBH_HID_Process+0x1ea>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	8b1b      	ldrh	r3, [r3, #24]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	2200      	movs	r2, #0
 8001834:	2101      	movs	r1, #1
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f952 	bl	8001ae0 <USBH_HID_GetReport>
 800183c:	4603      	mov	r3, r0
 800183e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d103      	bne.n	800184e <USBH_HID_Process+0x9a>
      {
        HID_Handle->state = HID_SYNC;
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	2205      	movs	r2, #5
 800184a:	709a      	strb	r2, [r3, #2]
 800184c:	e016      	b.n	800187c <USBH_HID_Process+0xc8>
      }
      else if (status == USBH_BUSY)
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <USBH_HID_Process+0xac>
      {
        HID_Handle->state = HID_IDLE;
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	2201      	movs	r2, #1
 8001858:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]
 800185e:	e00d      	b.n	800187c <USBH_HID_Process+0xc8>
      }
      else if (status == USBH_NOT_SUPPORTED)
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d105      	bne.n	8001872 <USBH_HID_Process+0xbe>
      {
        HID_Handle->state = HID_SYNC;
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2205      	movs	r2, #5
 800186a:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	75fb      	strb	r3, [r7, #23]
 8001870:	e004      	b.n	800187c <USBH_HID_Process+0xc8>
      }
      else
      {
        HID_Handle->state = HID_ERROR;
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2207      	movs	r2, #7
 8001876:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8001878:	2302      	movs	r3, #2
 800187a:	75fb      	strb	r3, [r7, #23]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2202      	movs	r2, #2
 8001880:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8001890:	2300      	movs	r3, #0
 8001892:	2200      	movs	r2, #0
 8001894:	f007 f9c4 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      break;
 8001898:	e081      	b.n	800199e <USBH_HID_Process+0x1ea>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d002      	beq.n	80018ae <USBH_HID_Process+0xfa>
      {
        HID_Handle->state = HID_GET_DATA;
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	2204      	movs	r2, #4
 80018ac:	709a      	strb	r2, [r3, #2]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2202      	movs	r2, #2
 80018b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80018c2:	2300      	movs	r3, #0
 80018c4:	2200      	movs	r2, #0
 80018c6:	f007 f9ab 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      break;
 80018ca:	e068      	b.n	800199e <USBH_HID_Process+0x1ea>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	785b      	ldrb	r3, [r3, #1]
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f006 fc4d 	bl	800817a <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2206      	movs	r2, #6
 80018e4:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 80018f8:	e051      	b.n	800199e <USBH_HID_Process+0x1ea>

    case HID_POLL:

    	urb_state = USBH_LL_GetURBState(phost, HID_Handle->InPipe);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	785b      	ldrb	r3, [r3, #1]
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f00a ff17 	bl	800c734 <USBH_LL_GetURBState>
 8001906:	4603      	mov	r3, r0
 8001908:	73fb      	strb	r3, [r7, #15]
      if (urb_state == USBH_URB_DONE || urb_state == USBH_URB_IDLE)
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d002      	beq.n	8001916 <USBH_HID_Process+0x162>
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d12e      	bne.n	8001974 <USBH_HID_Process+0x1c0>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	785b      	ldrb	r3, [r3, #1]
 800191a:	4619      	mov	r1, r3
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f00a fe77 	bl	800c610 <USBH_LL_GetLastXferSize>
 8001922:	60b8      	str	r0, [r7, #8]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800192a:	2b00      	cmp	r3, #0
 800192c:	d132      	bne.n	8001994 <USBH_HID_Process+0x1e0>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d02f      	beq.n	8001994 <USBH_HID_Process+0x1e0>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f103 0008 	add.w	r0, r3, #8
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	6959      	ldr	r1, [r3, #20]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	8b1b      	ldrh	r3, [r3, #24]
 8001942:	461a      	mov	r2, r3
 8001944:	f000 f9bb 	bl	8001cbe <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7fe ff29 	bl	80007a8 <USBH_HID_EventCallback>

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2202      	movs	r2, #2
 800195a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800196a:	2300      	movs	r3, #0
 800196c:	2200      	movs	r2, #0
 800196e:	f007 f957 	bl	8008c20 <osMessageQueuePut>
        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8001972:	e00f      	b.n	8001994 <USBH_HID_Process+0x1e0>
        }
      }
      else
      {
        /* IN Endpoint Stalled */
        if (urb_state == USBH_URB_STALL)
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	2b05      	cmp	r3, #5
 8001978:	d110      	bne.n	800199c <USBH_HID_Process+0x1e8>
        {
          /* Issue Clear Feature on interrupt IN endpoint */
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	7e9b      	ldrb	r3, [r3, #26]
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f005 ff1c 	bl	80077be <USBH_ClrFeature>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d107      	bne.n	800199c <USBH_HID_Process+0x1e8>
          {
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	2204      	movs	r2, #4
 8001990:	709a      	strb	r2, [r3, #2]
          }
        }
      }
      break;
 8001992:	e003      	b.n	800199c <USBH_HID_Process+0x1e8>
        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8001994:	bf00      	nop
      break;
 8001996:	e001      	b.n	800199c <USBH_HID_Process+0x1e8>

    default:
      break;
 8001998:	bf00      	nop
 800199a:	e000      	b.n	800199e <USBH_HID_Process+0x1ea>
      break;
 800199c:	bf00      	nop
  }

  return status;
 800199e:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	789b      	ldrb	r3, [r3, #2]
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d11a      	bne.n	80019f8 <USBH_HID_SOFProcess+0x50>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	8b92      	ldrh	r2, [r2, #28]
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d310      	bcc.n	80019f8 <USBH_HID_SOFProcess+0x50>
    {
      HID_Handle->state = HID_GET_DATA;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2204      	movs	r2, #4
 80019da:	709a      	strb	r2, [r3, #2]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80019f0:	2300      	movs	r3, #0
 80019f2:	2200      	movs	r2, #0
 80019f4:	f007 f914 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
    }
  }
  return USBH_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af02      	add	r7, sp, #8
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                                USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                                USB_DESC_HID_REPORT,
                                phost->device.Data,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8001a1e:	2101      	movs	r1, #1
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f005 fe2c 	bl	800767e <USBH_GetDescriptor>
 8001a26:	4603      	mov	r3, r0
 8001a28:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	70fb      	strb	r3, [r7, #3]
 8001a40:	4613      	mov	r3, r2
 8001a42:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2221      	movs	r2, #33	; 0x21
 8001a48:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	220a      	movs	r2, #10
 8001a4e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	78bb      	ldrb	r3, [r7, #2]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	82da      	strh	r2, [r3, #22]
  USBH_StatusTypeDef status = USBH_CtlReq(phost, 0U, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f006 f882 	bl	8007b7e <USBH_CtlReq>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	73fb      	strb	r3, [r7, #15]

  return status;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <USBH_HID_SetReport>:
USBH_StatusTypeDef USBH_HID_SetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	72fb      	strb	r3, [r7, #11]
 8001a96:	4613      	mov	r3, r2
 8001a98:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2221      	movs	r2, #33	; 0x21
 8001a9e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_REPORT;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2209      	movs	r2, #9
 8001aa4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8001aa6:	7afb      	ldrb	r3, [r7, #11]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	7abb      	ldrb	r3, [r7, #10]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8001ac0:	7e3b      	ldrb	r3, [r7, #24]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8001ac8:	7e3b      	ldrb	r3, [r7, #24]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f006 f854 	bl	8007b7e <USBH_CtlReq>
 8001ad6:	4603      	mov	r3, r0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	72fb      	strb	r3, [r7, #11]
 8001aee:	4613      	mov	r3, r2
 8001af0:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	22a1      	movs	r2, #161	; 0xa1
 8001af6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2201      	movs	r2, #1
 8001afc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8001afe:	7afb      	ldrb	r3, [r7, #11]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	7abb      	ldrb	r3, [r7, #10]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8001b18:	7e3b      	ldrb	r3, [r7, #24]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8001b20:	7e3b      	ldrb	r3, [r7, #24]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f006 f828 	bl	8007b7e <USBH_CtlReq>
 8001b2e:	4603      	mov	r3, r0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	3303      	adds	r3, #3
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8001b5e:	897b      	ldrh	r3, [r7, #10]
 8001b60:	2b09      	cmp	r3, #9
 8001b62:	d943      	bls.n	8001bec <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8001b64:	2309      	movs	r3, #9
 8001b66:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8001b68:	e03c      	b.n	8001be4 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	4619      	mov	r1, r3
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f005 ffe9 	bl	8007b48 <USBH_GetNextDesc>
 8001b76:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	785b      	ldrb	r3, [r3, #1]
 8001b7c:	2b21      	cmp	r3, #33	; 0x21
 8001b7e:	d131      	bne.n	8001be4 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	785a      	ldrb	r2, [r3, #1]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3302      	adds	r3, #2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3303      	adds	r3, #3
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	791a      	ldrb	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	795a      	ldrb	r2, [r3, #5]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	799a      	ldrb	r2, [r3, #6]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3307      	adds	r3, #7
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3308      	adds	r3, #8
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	811a      	strh	r2, [r3, #8]
        break;
 8001be0:	bf00      	nop
      }
    }
  }
}
 8001be2:	e003      	b.n	8001bec <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 8001be4:	893b      	ldrh	r3, [r7, #8]
 8001be6:	897a      	ldrh	r2, [r7, #10]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d8be      	bhi.n	8001b6a <USBH_HID_ParseHIDDesc+0x32>
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	88fa      	ldrh	r2, [r7, #6]
 8001c18:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	601a      	str	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	4613      	mov	r3, r2
 8001c38:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	7a9b      	ldrb	r3, [r3, #10]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d131      	bne.n	8001caa <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	82fb      	strh	r3, [r7, #22]
 8001c50:	e027      	b.n	8001ca2 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	88da      	ldrh	r2, [r3, #6]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	889b      	ldrh	r3, [r3, #4]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d019      	beq.n	8001c92 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	88d2      	ldrh	r2, [r2, #6]
 8001c66:	441a      	add	r2, r3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1c59      	adds	r1, r3, #1
 8001c6c:	6139      	str	r1, [r7, #16]
 8001c6e:	7812      	ldrb	r2, [r2, #0]
 8001c70:	701a      	strb	r2, [r3, #0]
        f->tail++;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	88db      	ldrh	r3, [r3, #6]
 8001c76:	3301      	adds	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	88da      	ldrh	r2, [r3, #6]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	891b      	ldrh	r3, [r3, #8]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d108      	bne.n	8001c9c <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	80da      	strh	r2, [r3, #6]
 8001c90:	e004      	b.n	8001c9c <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	729a      	strb	r2, [r3, #10]
        return i;
 8001c98:	8afb      	ldrh	r3, [r7, #22]
 8001c9a:	e00a      	b.n	8001cb2 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8001c9c:	8afb      	ldrh	r3, [r7, #22]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	82fb      	strh	r3, [r7, #22]
 8001ca2:	8afa      	ldrh	r2, [r7, #22]
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d3d3      	bcc.n	8001c52 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b087      	sub	sp, #28
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	7a9b      	ldrb	r3, [r3, #10]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d13c      	bne.n	8001d52 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	82fb      	strh	r3, [r7, #22]
 8001ce2:	e032      	b.n	8001d4a <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	889b      	ldrh	r3, [r3, #4]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	88d2      	ldrh	r2, [r2, #6]
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00a      	beq.n	8001d08 <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	889b      	ldrh	r3, [r3, #4]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d108      	bne.n	8001d12 <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	88db      	ldrh	r3, [r3, #6]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d104      	bne.n	8001d12 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	729a      	strb	r2, [r3, #10]
        return i;
 8001d0e:	8afb      	ldrh	r3, [r7, #22]
 8001d10:	e023      	b.n	8001d5a <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	613a      	str	r2, [r7, #16]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	68f9      	ldr	r1, [r7, #12]
 8001d1e:	8889      	ldrh	r1, [r1, #4]
 8001d20:	440a      	add	r2, r1
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	7013      	strb	r3, [r2, #0]
        f->head++;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	889b      	ldrh	r3, [r3, #4]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	889a      	ldrh	r2, [r3, #4]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	891b      	ldrh	r3, [r3, #8]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d102      	bne.n	8001d44 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8001d44:	8afb      	ldrh	r3, [r7, #22]
 8001d46:	3301      	adds	r3, #1
 8001d48:	82fb      	strh	r3, [r7, #22]
 8001d4a:	8afa      	ldrh	r2, [r7, #22]
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d3c8      	bcc.n	8001ce4 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8001d58:	88fb      	ldrh	r3, [r7, #6]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <USBH_HID_GenericRegisterDriver>:
 *         It is added to an array of drivers available.
 * @param  driver: driver to be loaded
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GenericRegisterDriver(USBH_HID_DriverTypeDef driver)
{
 8001d68:	b084      	sub	sp, #16
 8001d6a:	b4b0      	push	{r4, r5, r7}
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	f107 040c 	add.w	r4, r7, #12
 8001d72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (n_drivers == (MAX_DRIVERS-1))
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <USBH_HID_GenericRegisterDriver+0x5c>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d101      	bne.n	8001d82 <USBH_HID_GenericRegisterDriver+0x1a>
	{
		return USBH_FAIL;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e01a      	b.n	8001db8 <USBH_HID_GenericRegisterDriver+0x50>
	}

	drivers[n_drivers] = driver;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <USBH_HID_GenericRegisterDriver+0x5c>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	4619      	mov	r1, r3
 8001d88:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <USBH_HID_GenericRegisterDriver+0x60>)
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	461d      	mov	r5, r3
 8001d96:	f107 040c 	add.w	r4, r7, #12
 8001d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001da6:	e885 0003 	stmia.w	r5, {r0, r1}
	n_drivers += 1;
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <USBH_HID_GenericRegisterDriver+0x5c>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <USBH_HID_GenericRegisterDriver+0x5c>)
 8001db4:	701a      	strb	r2, [r3, #0]
	return USBH_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bcb0      	pop	{r4, r5, r7}
 8001dbe:	b004      	add	sp, #16
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000b70 	.word	0x20000b70
 8001dc8:	20005668 	.word	0x20005668

08001dcc <USBH_HID_GenericInit>:
 *         The function init the HID generic device.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_HID_GenericInit(USBH_HandleTypeDef *phost)
{
 8001dcc:	b5b0      	push	{r4, r5, r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	60fb      	str	r3, [r7, #12]

	for (i = 0U; i < (sizeof(rx_report_buf) / sizeof(uint8_t)); i++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	e007      	b.n	8001df4 <USBH_HID_GenericInit+0x28>
	{
		rx_report_buf[i] = 0U;
 8001de4:	4a3a      	ldr	r2, [pc, #232]	; (8001ed0 <USBH_HID_GenericInit+0x104>)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	4413      	add	r3, r2
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
	for (i = 0U; i < (sizeof(rx_report_buf) / sizeof(uint8_t)); i++)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	3301      	adds	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b7f      	cmp	r3, #127	; 0x7f
 8001df8:	d9f4      	bls.n	8001de4 <USBH_HID_GenericInit+0x18>
	}

	if (HID_Handle->length > sizeof(rx_report_buf))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8b1b      	ldrh	r3, [r3, #24]
 8001dfe:	2b80      	cmp	r3, #128	; 0x80
 8001e00:	d902      	bls.n	8001e08 <USBH_HID_GenericInit+0x3c>
	{
		HID_Handle->length = sizeof(rx_report_buf);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2280      	movs	r2, #128	; 0x80
 8001e06:	831a      	strh	r2, [r3, #24]
	}

	HID_Handle->pData = (uint8_t *)(void *)rx_report_buf;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4a31      	ldr	r2, [pc, #196]	; (8001ed0 <USBH_HID_GenericInit+0x104>)
 8001e0c:	615a      	str	r2, [r3, #20]

	USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, 2 * sizeof(rx_report_buf));
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f103 0008 	add.w	r0, r3, #8
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f7ff fee8 	bl	8001bf4 <USBH_HID_FifoInit>

	USBH_StatusTypeDef status = USBH_NOT_SUPPORTED;
 8001e24:	2303      	movs	r3, #3
 8001e26:	74fb      	strb	r3, [r7, #19]
	// loads the null driver
	current_driver = null_Driver;
 8001e28:	4a2a      	ldr	r2, [pc, #168]	; (8001ed4 <USBH_HID_GenericInit+0x108>)
 8001e2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <USBH_HID_GenericInit+0x10c>)
 8001e2c:	4614      	mov	r4, r2
 8001e2e:	461d      	mov	r5, r3
 8001e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e3c:	e884 0003 	stmia.w	r4, {r0, r1}
	// looks for a compatible driver amongst the registered drivers
	for(uint8_t i = 0; i < n_drivers; i++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	74bb      	strb	r3, [r7, #18]
 8001e44:	e039      	b.n	8001eba <USBH_HID_GenericInit+0xee>
	{
		if((phost->device.DevDesc.idVendor == drivers[i].vid) && (phost->device.DevDesc.idProduct == drivers[i].pid))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f8b3 132e 	ldrh.w	r1, [r3, #814]	; 0x32e
 8001e4c:	7cba      	ldrb	r2, [r7, #18]
 8001e4e:	4823      	ldr	r0, [pc, #140]	; (8001edc <USBH_HID_GenericInit+0x110>)
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4403      	add	r3, r0
 8001e5a:	3320      	adds	r3, #32
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	4299      	cmp	r1, r3
 8001e60:	d126      	bne.n	8001eb0 <USBH_HID_GenericInit+0xe4>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f8b3 1330 	ldrh.w	r1, [r3, #816]	; 0x330
 8001e68:	7cba      	ldrb	r2, [r7, #18]
 8001e6a:	481c      	ldr	r0, [pc, #112]	; (8001edc <USBH_HID_GenericInit+0x110>)
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4403      	add	r3, r0
 8001e76:	3322      	adds	r3, #34	; 0x22
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	4299      	cmp	r1, r3
 8001e7c:	d118      	bne.n	8001eb0 <USBH_HID_GenericInit+0xe4>
		{
			current_driver = drivers[i];
 8001e7e:	7cba      	ldrb	r2, [r7, #18]
 8001e80:	4814      	ldr	r0, [pc, #80]	; (8001ed4 <USBH_HID_GenericInit+0x108>)
 8001e82:	4916      	ldr	r1, [pc, #88]	; (8001edc <USBH_HID_GenericInit+0x110>)
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	4604      	mov	r4, r0
 8001e90:	461d      	mov	r5, r3
 8001e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e9e:	e884 0003 	stmia.w	r4, {r0, r1}
			status = current_driver.DeviceSpecificInit(phost);
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <USBH_HID_GenericInit+0x108>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	4798      	blx	r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	74fb      	strb	r3, [r7, #19]
 8001eae:	e001      	b.n	8001eb4 <USBH_HID_GenericInit+0xe8>
		}
		else
		{
			status = USBH_NOT_SUPPORTED;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	74fb      	strb	r3, [r7, #19]
	for(uint8_t i = 0; i < n_drivers; i++)
 8001eb4:	7cbb      	ldrb	r3, [r7, #18]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	74bb      	strb	r3, [r7, #18]
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <USBH_HID_GenericInit+0x114>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	7cba      	ldrb	r2, [r7, #18]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d3c0      	bcc.n	8001e46 <USBH_HID_GenericInit+0x7a>
		}
	}

	return status;
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
	//return USBH_HID_DeviceSpecificInit(phost);
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200055c0 	.word	0x200055c0
 8001ed4:	20005640 	.word	0x20005640
 8001ed8:	0800d478 	.word	0x0800d478
 8001edc:	20005668 	.word	0x20005668
 8001ee0:	20000b70 	.word	0x20000b70

08001ee4 <USBH_HID_GetRawReport>:
 * @param  report: pointer to the raw report
 *
 * @retval USBH status
 */
USBH_StatusTypeDef USBH_HID_GetRawReport(USBH_HandleTypeDef *phost, uint8_t* report)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
	HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	60fb      	str	r3, [r7, #12]

	if (HID_Handle->length == 0U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8b1b      	ldrh	r3, [r3, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <USBH_HID_GetRawReport+0x20>
	{
		return USBH_FAIL;
 8001f00:	2302      	movs	r3, #2
 8001f02:	e011      	b.n	8001f28 <USBH_HID_GetRawReport+0x44>
	}
	/*Fill report */
	if(USBH_HID_FifoRead(&HID_Handle->fifo, report, HID_Handle->length) !=  HID_Handle->length)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f103 0008 	add.w	r0, r3, #8
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8b1b      	ldrh	r3, [r3, #24]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	6839      	ldr	r1, [r7, #0]
 8001f12:	f7ff fe8b 	bl	8001c2c <USBH_HID_FifoRead>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8b1b      	ldrh	r3, [r3, #24]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <USBH_HID_GetRawReport+0x42>
	{
		return USBH_FAIL;
 8001f22:	2302      	movs	r3, #2
 8001f24:	e000      	b.n	8001f28 <USBH_HID_GetRawReport+0x44>
	}
	return USBH_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <USBH_HID_KeybdInit+0xa4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	709a      	strb	r2, [r3, #2]
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <USBH_HID_KeybdInit+0xa4>)
 8001f4a:	789a      	ldrb	r2, [r3, #2]
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <USBH_HID_KeybdInit+0xa4>)
 8001f4e:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 8001f50:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <USBH_HID_KeybdInit+0xa4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	711a      	strb	r2, [r3, #4]
 8001f56:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <USBH_HID_KeybdInit+0xa4>)
 8001f58:	791a      	ldrb	r2, [r3, #4]
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <USBH_HID_KeybdInit+0xa4>)
 8001f5c:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <USBH_HID_KeybdInit+0xa4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	719a      	strb	r2, [r3, #6]
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <USBH_HID_KeybdInit+0xa4>)
 8001f66:	799a      	ldrb	r2, [r3, #6]
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <USBH_HID_KeybdInit+0xa4>)
 8001f6a:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8001f6c:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <USBH_HID_KeybdInit+0xa4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	721a      	strb	r2, [r3, #8]
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <USBH_HID_KeybdInit+0xa4>)
 8001f74:	7a1a      	ldrb	r2, [r3, #8]
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <USBH_HID_KeybdInit+0xa4>)
 8001f78:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	e00c      	b.n	8001f9a <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 8001f80:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <USBH_HID_KeybdInit+0xa8>)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2100      	movs	r1, #0
 8001f86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8001f8a:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <USBH_HID_KeybdInit+0xac>)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2100      	movs	r1, #0
 8001f90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3301      	adds	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d9ef      	bls.n	8001f80 <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	8b1b      	ldrh	r3, [r3, #24]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d902      	bls.n	8001fae <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2208      	movs	r2, #8
 8001fac:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <USBH_HID_KeybdInit+0xac>)
 8001fb2:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f103 0008 	add.w	r0, r3, #8
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8001fc0:	2250      	movs	r2, #80	; 0x50
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f7ff fe16 	bl	8001bf4 <USBH_HID_FifoInit>

  return USBH_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20005718 	.word	0x20005718
 8001fd8:	20005708 	.word	0x20005708
 8001fdc:	20005710 	.word	0x20005710

08001fe0 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <USBH_HID_MouseInit+0x88>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <USBH_HID_MouseInit+0x88>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <USBH_HID_MouseInit+0x88>)
 8002000:	2200      	movs	r2, #0
 8002002:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <USBH_HID_MouseInit+0x88>)
 8002006:	2200      	movs	r2, #0
 8002008:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <USBH_HID_MouseInit+0x88>)
 800200c:	2200      	movs	r2, #0
 800200e:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	e00c      	b.n	8002030 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8002016:	4a15      	ldr	r2, [pc, #84]	; (800206c <USBH_HID_MouseInit+0x8c>)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2100      	movs	r1, #0
 800201c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    rx_report_buf[i] = 0U;
 8002020:	4a13      	ldr	r2, [pc, #76]	; (8002070 <USBH_HID_MouseInit+0x90>)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2100      	movs	r1, #0
 8002026:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3301      	adds	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d9ef      	bls.n	8002016 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	8b1b      	ldrh	r3, [r3, #24]
 800203a:	2b08      	cmp	r3, #8
 800203c:	d902      	bls.n	8002044 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2208      	movs	r2, #8
 8002042:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)rx_report_buf;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <USBH_HID_MouseInit+0x90>)
 8002048:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f103 0008 	add.w	r0, r3, #8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8002056:	2250      	movs	r2, #80	; 0x50
 8002058:	4619      	mov	r1, r3
 800205a:	f7ff fdcb 	bl	8001bf4 <USBH_HID_FifoInit>

  return USBH_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20005728 	.word	0x20005728
 800206c:	20005730 	.word	0x20005730
 8002070:	200055c0 	.word	0x200055c0

08002074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002078:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800207a:	e003      	b.n	8002084 <LoopCopyDataInit>

0800207c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800207e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002080:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002082:	3104      	adds	r1, #4

08002084 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002084:	480b      	ldr	r0, [pc, #44]	; (80020b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002088:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800208a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800208c:	d3f6      	bcc.n	800207c <CopyDataInit>
  ldr  r2, =_sbss
 800208e:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002090:	e002      	b.n	8002098 <LoopFillZerobss>

08002092 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002092:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002094:	f842 3b04 	str.w	r3, [r2], #4

08002098 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800209a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800209c:	d3f9      	bcc.n	8002092 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800209e:	f7ff f993 	bl	80013c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020a2:	f00a fbfd 	bl	800c8a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a6:	f7fe fbbb 	bl	8000820 <main>
  bx  lr    
 80020aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020b0:	0800d4e4 	.word	0x0800d4e4
  ldr  r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020b8:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 80020bc:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 80020c0:	20005e58 	.word	0x20005e58

080020c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <ADC_IRQHandler>
	...

080020c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <HAL_Init+0x40>)
 80020d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <HAL_Init+0x40>)
 80020de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <HAL_Init+0x40>)
 80020ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f0:	2003      	movs	r0, #3
 80020f2:	f000 f8fc 	bl	80022ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f7ff f8ac 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020fc:	f7fe ffe0 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023c00 	.word	0x40023c00

0800210c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_IncTick+0x20>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_IncTick+0x24>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_IncTick+0x24>)
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000050 	.word	0x20000050
 8002130:	20005738 	.word	0x20005738

08002134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return uwTick;
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_GetTick+0x14>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20005738 	.word	0x20005738

0800214c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff ffee 	bl	8002134 <HAL_GetTick>
 8002158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d005      	beq.n	8002172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_Delay+0x44>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4413      	add	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002172:	bf00      	nop
 8002174:	f7ff ffde 	bl	8002134 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d8f7      	bhi.n	8002174 <HAL_Delay+0x28>
  {
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000050 	.word	0x20000050

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ff4c 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002316:	f7ff ff61 	bl	80021dc <__NVIC_GetPriorityGrouping>
 800231a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	6978      	ldr	r0, [r7, #20]
 8002322:	f7ff ffb1 	bl	8002288 <NVIC_EncodePriority>
 8002326:	4602      	mov	r2, r0
 8002328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff80 	bl	8002234 <__NVIC_SetPriority>
}
 8002334:	bf00      	nop
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff54 	bl	80021f8 <__NVIC_EnableIRQ>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	e165      	b.n	8002640 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002374:	2201      	movs	r2, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	f040 8154 	bne.w	800263a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d00b      	beq.n	80023b2 <HAL_GPIO_Init+0x5a>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d007      	beq.n	80023b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023a6:	2b11      	cmp	r3, #17
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d130      	bne.n	8002414 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2203      	movs	r2, #3
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e8:	2201      	movs	r2, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 0201 	and.w	r2, r3, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0xfc>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b12      	cmp	r3, #18
 8002452:	d123      	bne.n	800249c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	08da      	lsrs	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3208      	adds	r2, #8
 800245c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	08da      	lsrs	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3208      	adds	r2, #8
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0203 	and.w	r2, r3, #3
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80ae 	beq.w	800263a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	4b5d      	ldr	r3, [pc, #372]	; (8002658 <HAL_GPIO_Init+0x300>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	4a5c      	ldr	r2, [pc, #368]	; (8002658 <HAL_GPIO_Init+0x300>)
 80024e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ec:	6453      	str	r3, [r2, #68]	; 0x44
 80024ee:	4b5a      	ldr	r3, [pc, #360]	; (8002658 <HAL_GPIO_Init+0x300>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024fa:	4a58      	ldr	r2, [pc, #352]	; (800265c <HAL_GPIO_Init+0x304>)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	3302      	adds	r3, #2
 8002502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	220f      	movs	r2, #15
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4f      	ldr	r2, [pc, #316]	; (8002660 <HAL_GPIO_Init+0x308>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d025      	beq.n	8002572 <HAL_GPIO_Init+0x21a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4e      	ldr	r2, [pc, #312]	; (8002664 <HAL_GPIO_Init+0x30c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01f      	beq.n	800256e <HAL_GPIO_Init+0x216>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4d      	ldr	r2, [pc, #308]	; (8002668 <HAL_GPIO_Init+0x310>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d019      	beq.n	800256a <HAL_GPIO_Init+0x212>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4c      	ldr	r2, [pc, #304]	; (800266c <HAL_GPIO_Init+0x314>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0x20e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4b      	ldr	r2, [pc, #300]	; (8002670 <HAL_GPIO_Init+0x318>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00d      	beq.n	8002562 <HAL_GPIO_Init+0x20a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <HAL_GPIO_Init+0x31c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <HAL_GPIO_Init+0x206>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a49      	ldr	r2, [pc, #292]	; (8002678 <HAL_GPIO_Init+0x320>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_GPIO_Init+0x202>
 8002556:	2306      	movs	r3, #6
 8002558:	e00c      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 800255a:	2307      	movs	r3, #7
 800255c:	e00a      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 800255e:	2305      	movs	r3, #5
 8002560:	e008      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 8002562:	2304      	movs	r3, #4
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 8002566:	2303      	movs	r3, #3
 8002568:	e004      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 800256a:	2302      	movs	r3, #2
 800256c:	e002      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 8002572:	2300      	movs	r3, #0
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f002 0203 	and.w	r2, r2, #3
 800257a:	0092      	lsls	r2, r2, #2
 800257c:	4093      	lsls	r3, r2
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002584:	4935      	ldr	r1, [pc, #212]	; (800265c <HAL_GPIO_Init+0x304>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002592:	4b3a      	ldr	r3, [pc, #232]	; (800267c <HAL_GPIO_Init+0x324>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b6:	4a31      	ldr	r2, [pc, #196]	; (800267c <HAL_GPIO_Init+0x324>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025bc:	4b2f      	ldr	r3, [pc, #188]	; (800267c <HAL_GPIO_Init+0x324>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025e0:	4a26      	ldr	r2, [pc, #152]	; (800267c <HAL_GPIO_Init+0x324>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e6:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_GPIO_Init+0x324>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <HAL_GPIO_Init+0x324>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_GPIO_Init+0x324>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002634:	4a11      	ldr	r2, [pc, #68]	; (800267c <HAL_GPIO_Init+0x324>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b0f      	cmp	r3, #15
 8002644:	f67f ae96 	bls.w	8002374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40013800 	.word	0x40013800
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400
 8002668:	40020800 	.word	0x40020800
 800266c:	40020c00 	.word	0x40020c00
 8002670:	40021000 	.word	0x40021000
 8002674:	40021400 	.word	0x40021400
 8002678:	40021800 	.word	0x40021800
 800267c:	40013c00 	.word	0x40013c00

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800269c:	e003      	b.n	80026a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	401a      	ands	r2, r3
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d104      	bne.n	80026d6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	041a      	lsls	r2, r3, #16
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80026d4:	e002      	b.n	80026dc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80026e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ea:	b08f      	sub	sp, #60	; 0x3c
 80026ec:	af0a      	add	r7, sp, #40	; 0x28
 80026ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e054      	b.n	80027a4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d106      	bne.n	800271a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f009 fe1b 	bl	800c350 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2203      	movs	r2, #3
 800271e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f003 f99d 	bl	8005a78 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	687e      	ldr	r6, [r7, #4]
 8002746:	466d      	mov	r5, sp
 8002748:	f106 0410 	add.w	r4, r6, #16
 800274c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800274e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002754:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002758:	e885 0003 	stmia.w	r5, {r0, r1}
 800275c:	1d33      	adds	r3, r6, #4
 800275e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002760:	6838      	ldr	r0, [r7, #0]
 8002762:	f003 f917 	bl	8005994 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2101      	movs	r1, #1
 800276c:	4618      	mov	r0, r3
 800276e:	f003 f994 	bl	8005a9a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	687e      	ldr	r6, [r7, #4]
 800277a:	466d      	mov	r5, sp
 800277c:	f106 0410 	add.w	r4, r6, #16
 8002780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002788:	e894 0003 	ldmia.w	r4, {r0, r1}
 800278c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002790:	1d33      	adds	r3, r6, #4
 8002792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002794:	6838      	ldr	r0, [r7, #0]
 8002796:	f003 faa7 	bl	8005ce8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027ac <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af04      	add	r7, sp, #16
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	4608      	mov	r0, r1
 80027b6:	4611      	mov	r1, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	70fb      	strb	r3, [r7, #3]
 80027be:	460b      	mov	r3, r1
 80027c0:	70bb      	strb	r3, [r7, #2]
 80027c2:	4613      	mov	r3, r2
 80027c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_HCD_HC_Init+0x28>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e07f      	b.n	80028d4 <HAL_HCD_HC_Init+0x128>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	333d      	adds	r3, #61	; 0x3d
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	3338      	adds	r3, #56	; 0x38
 8002800:	787a      	ldrb	r2, [r7, #1]
 8002802:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	3340      	adds	r3, #64	; 0x40
 8002814:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002816:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	3339      	adds	r3, #57	; 0x39
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	333f      	adds	r3, #63	; 0x3f
 800283c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002840:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	78bb      	ldrb	r3, [r7, #2]
 8002846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800284a:	b2d8      	uxtb	r0, r3
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	440b      	add	r3, r1
 8002858:	333a      	adds	r3, #58	; 0x3a
 800285a:	4602      	mov	r2, r0
 800285c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800285e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002862:	2b00      	cmp	r3, #0
 8002864:	da0a      	bge.n	800287c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	333b      	adds	r3, #59	; 0x3b
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	e009      	b.n	8002890 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	333b      	adds	r3, #59	; 0x3b
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	333c      	adds	r3, #60	; 0x3c
 80028a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80028a4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	787c      	ldrb	r4, [r7, #1]
 80028ac:	78ba      	ldrb	r2, [r7, #2]
 80028ae:	78f9      	ldrb	r1, [r7, #3]
 80028b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	4623      	mov	r3, r4
 80028c2:	f003 fb87 	bl	8005fd4 <USB_HC_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd90      	pop	{r4, r7, pc}

080028dc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_HCD_HC_Halt+0x1e>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e00f      	b.n	800291a <HAL_HCD_HC_Halt+0x3e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f003 fdc1 	bl	8006492 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	4608      	mov	r0, r1
 800292e:	4611      	mov	r1, r2
 8002930:	461a      	mov	r2, r3
 8002932:	4603      	mov	r3, r0
 8002934:	70fb      	strb	r3, [r7, #3]
 8002936:	460b      	mov	r3, r1
 8002938:	70bb      	strb	r3, [r7, #2]
 800293a:	4613      	mov	r3, r2
 800293c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	333b      	adds	r3, #59	; 0x3b
 800294e:	78ba      	ldrb	r2, [r7, #2]
 8002950:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	333f      	adds	r3, #63	; 0x3f
 8002962:	787a      	ldrb	r2, [r7, #1]
 8002964:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002966:	7c3b      	ldrb	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d114      	bne.n	8002996 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	3342      	adds	r3, #66	; 0x42
 800297c:	2203      	movs	r2, #3
 800297e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	333d      	adds	r3, #61	; 0x3d
 8002990:	7f3a      	ldrb	r2, [r7, #28]
 8002992:	701a      	strb	r2, [r3, #0]
 8002994:	e009      	b.n	80029aa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	3342      	adds	r3, #66	; 0x42
 80029a6:	2202      	movs	r2, #2
 80029a8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80029aa:	787b      	ldrb	r3, [r7, #1]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	f200 80d6 	bhi.w	8002b5e <HAL_HCD_HC_SubmitRequest+0x23a>
 80029b2:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	080029c9 	.word	0x080029c9
 80029bc:	08002b49 	.word	0x08002b49
 80029c0:	08002a35 	.word	0x08002a35
 80029c4:	08002abf 	.word	0x08002abf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80029c8:	7c3b      	ldrb	r3, [r7, #16]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	f040 80c9 	bne.w	8002b62 <HAL_HCD_HC_SubmitRequest+0x23e>
 80029d0:	78bb      	ldrb	r3, [r7, #2]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 80c5 	bne.w	8002b62 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80029d8:	8b3b      	ldrh	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	3351      	adds	r3, #81	; 0x51
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	3351      	adds	r3, #81	; 0x51
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	3342      	adds	r3, #66	; 0x42
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a1c:	e0a1      	b.n	8002b62 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3342      	adds	r3, #66	; 0x42
 8002a2e:	2202      	movs	r2, #2
 8002a30:	701a      	strb	r2, [r3, #0]
      break;
 8002a32:	e096      	b.n	8002b62 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002a34:	78bb      	ldrb	r3, [r7, #2]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d120      	bne.n	8002a7c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	3351      	adds	r3, #81	; 0x51
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3342      	adds	r3, #66	; 0x42
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002a64:	e07e      	b.n	8002b64 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	3342      	adds	r3, #66	; 0x42
 8002a76:	2202      	movs	r2, #2
 8002a78:	701a      	strb	r2, [r3, #0]
      break;
 8002a7a:	e073      	b.n	8002b64 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	3350      	adds	r3, #80	; 0x50
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3342      	adds	r3, #66	; 0x42
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
      break;
 8002aa6:	e05d      	b.n	8002b64 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3342      	adds	r3, #66	; 0x42
 8002ab8:	2202      	movs	r2, #2
 8002aba:	701a      	strb	r2, [r3, #0]
      break;
 8002abc:	e052      	b.n	8002b64 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002abe:	78bb      	ldrb	r3, [r7, #2]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d120      	bne.n	8002b06 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3351      	adds	r3, #81	; 0x51
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3342      	adds	r3, #66	; 0x42
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002aee:	e039      	b.n	8002b64 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	440b      	add	r3, r1
 8002afe:	3342      	adds	r3, #66	; 0x42
 8002b00:	2202      	movs	r2, #2
 8002b02:	701a      	strb	r2, [r3, #0]
      break;
 8002b04:	e02e      	b.n	8002b64 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	3350      	adds	r3, #80	; 0x50
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	3342      	adds	r3, #66	; 0x42
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
      break;
 8002b30:	e018      	b.n	8002b64 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	3342      	adds	r3, #66	; 0x42
 8002b42:	2202      	movs	r2, #2
 8002b44:	701a      	strb	r2, [r3, #0]
      break;
 8002b46:	e00d      	b.n	8002b64 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	3342      	adds	r3, #66	; 0x42
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
      break;
 8002b5c:	e002      	b.n	8002b64 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002b5e:	bf00      	nop
 8002b60:	e000      	b.n	8002b64 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002b62:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	3344      	adds	r3, #68	; 0x44
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	8b39      	ldrh	r1, [r7, #24]
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4403      	add	r3, r0
 8002b88:	3348      	adds	r3, #72	; 0x48
 8002b8a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	335c      	adds	r3, #92	; 0x5c
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	334c      	adds	r3, #76	; 0x4c
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3339      	adds	r3, #57	; 0x39
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	335d      	adds	r3, #93	; 0x5d
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	3338      	adds	r3, #56	; 0x38
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	18d1      	adds	r1, r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f003 faf6 	bl	80061e8 <USB_HC_StartXfer>
 8002bfc:	4603      	mov	r3, r0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop

08002c08 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f003 f81f 	bl	8005c62 <USB_GetMode>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	f040 80ef 	bne.w	8002e0a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 f803 	bl	8005c3c <USB_ReadInterrupts>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80e5 	beq.w	8002e08 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f002 fffa 	bl	8005c3c <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c52:	d104      	bne.n	8002c5e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 ffea 	bl	8005c3c <USB_ReadInterrupts>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c72:	d104      	bne.n	8002c7e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f002 ffda 	bl	8005c3c <USB_ReadInterrupts>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c92:	d104      	bne.n	8002c9e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 ffca 	bl	8005c3c <USB_ReadInterrupts>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d103      	bne.n	8002cba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f002 ffbc 	bl	8005c3c <USB_ReadInterrupts>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cce:	d115      	bne.n	8002cfc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002cd8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d108      	bne.n	8002cfc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f009 fba0 	bl	800c430 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 f8a6 	bl	8005e48 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f002 ff9b 	bl	8005c3c <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d10:	d102      	bne.n	8002d18 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f001 f968 	bl	8003fe8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 ff8d 	bl	8005c3c <USB_ReadInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d106      	bne.n	8002d3a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f009 fb63 	bl	800c3f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2208      	movs	r2, #8
 8002d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f002 ff7c 	bl	8005c3c <USB_ReadInterrupts>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d4e:	d138      	bne.n	8002dc2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f003 fb8b 	bl	8006470 <USB_HC_ReadInterrupt>
 8002d5a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e025      	b.n	8002dae <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d018      	beq.n	8002da8 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d8c:	d106      	bne.n	8002d9c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	4619      	mov	r1, r3
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f8cf 	bl	8002f38 <HCD_HC_IN_IRQHandler>
 8002d9a:	e005      	b.n	8002da8 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	4619      	mov	r1, r3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fcfd 	bl	80037a2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	3301      	adds	r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d3d4      	bcc.n	8002d62 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f002 ff38 	bl	8005c3c <USB_ReadInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b10      	cmp	r3, #16
 8002dd4:	d101      	bne.n	8002dda <HAL_HCD_IRQHandler+0x1d2>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_HCD_IRQHandler+0x1d4>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d014      	beq.n	8002e0a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0210 	bic.w	r2, r2, #16
 8002dee:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f001 f84b 	bl	8003e8c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699a      	ldr	r2, [r3, #24]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0210 	orr.w	r2, r2, #16
 8002e04:	619a      	str	r2, [r3, #24]
 8002e06:	e000      	b.n	8002e0a <HAL_HCD_IRQHandler+0x202>
      return;
 8002e08:	bf00      	nop
    }
  }
}
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_HCD_Start+0x16>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e013      	b.n	8002e4e <HAL_HCD_Start+0x3e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f002 fe0f 	bl	8005a56 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 f866 	bl	8005f10 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_HCD_Stop+0x16>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e00d      	b.n	8002e88 <HAL_HCD_Stop+0x32>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f003 fc45 	bl	8006708 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 f80d 	bl	8005ebc <USB_ResetPort>
 8002ea2:	4603      	mov	r3, r0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	440b      	add	r3, r1
 8002ec6:	335c      	adds	r3, #92	; 0x5c
 8002ec8:	781b      	ldrb	r3, [r3, #0]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	334c      	adds	r3, #76	; 0x4c
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 f84f 	bl	8005fb0 <USB_GetCurrentFrame>
 8002f12:	4603      	mov	r3, r0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 f82a 	bl	8005f82 <USB_GetHostSpeed>
 8002f2e:	4603      	mov	r3, r0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d119      	bne.n	8002f9c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	461a      	mov	r2, r3
 8002f76:	2304      	movs	r3, #4
 8002f78:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	0151      	lsls	r1, r2, #5
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	440a      	add	r2, r1
 8002f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	60d3      	str	r3, [r2, #12]
 8002f9a:	e0ce      	b.n	800313a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d12c      	bne.n	800300e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	440b      	add	r3, r1
 8002fd6:	335d      	adds	r3, #93	; 0x5d
 8002fd8:	2207      	movs	r2, #7
 8002fda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	0151      	lsls	r1, r2, #5
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	440a      	add	r2, r1
 8002ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ff6:	f043 0302 	orr.w	r3, r3, #2
 8002ffa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f003 fa43 	bl	8006492 <USB_HC_Halt>
 800300c:	e095      	b.n	800313a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b20      	cmp	r3, #32
 8003022:	d109      	bne.n	8003038 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003030:	461a      	mov	r2, r3
 8003032:	2320      	movs	r3, #32
 8003034:	6093      	str	r3, [r2, #8]
 8003036:	e080      	b.n	800313a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b08      	cmp	r3, #8
 800304c:	d134      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	0151      	lsls	r1, r2, #5
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	440a      	add	r2, r1
 8003064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	335d      	adds	r3, #93	; 0x5d
 800307e:	2205      	movs	r2, #5
 8003080:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	461a      	mov	r2, r3
 8003090:	2310      	movs	r3, #16
 8003092:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a0:	461a      	mov	r2, r3
 80030a2:	2308      	movs	r3, #8
 80030a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f003 f9ee 	bl	8006492 <USB_HC_Halt>
 80030b6:	e040      	b.n	800313a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ce:	d134      	bne.n	800313a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	0151      	lsls	r1, r2, #5
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	440a      	add	r2, r1
 80030e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 f9c9 	bl	8006492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	461a      	mov	r2, r3
 800310e:	2310      	movs	r3, #16
 8003110:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	335d      	adds	r3, #93	; 0x5d
 8003122:	2208      	movs	r2, #8
 8003124:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	461a      	mov	r2, r3
 8003134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003138:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003150:	d122      	bne.n	8003198 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4413      	add	r3, r2
 800315a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	0151      	lsls	r1, r2, #5
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	440a      	add	r2, r1
 8003168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800316c:	f043 0302 	orr.w	r3, r3, #2
 8003170:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f003 f988 	bl	8006492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4413      	add	r3, r2
 800318a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318e:	461a      	mov	r2, r3
 8003190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003194:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003196:	e300      	b.n	800379a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	f040 80fd 	bne.w	80033aa <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01b      	beq.n	80031f0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	3348      	adds	r3, #72	; 0x48
 80031c8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	0159      	lsls	r1, r3, #5
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	440b      	add	r3, r1
 80031d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80031dc:	1ad1      	subs	r1, r2, r3
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4403      	add	r3, r0
 80031ec:	334c      	adds	r3, #76	; 0x4c
 80031ee:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	440b      	add	r3, r1
 80031fe:	335d      	adds	r3, #93	; 0x5d
 8003200:	2201      	movs	r2, #1
 8003202:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	3358      	adds	r3, #88	; 0x58
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003224:	461a      	mov	r2, r3
 8003226:	2301      	movs	r3, #1
 8003228:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	333f      	adds	r3, #63	; 0x3f
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	333f      	adds	r3, #63	; 0x3f
 8003250:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003252:	2b02      	cmp	r3, #2
 8003254:	d121      	bne.n	800329a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	0151      	lsls	r1, r2, #5
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	440a      	add	r2, r1
 800326c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003270:	f043 0302 	orr.w	r3, r3, #2
 8003274:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f003 f906 	bl	8006492 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	461a      	mov	r2, r3
 8003294:	2310      	movs	r3, #16
 8003296:	6093      	str	r3, [r2, #8]
 8003298:	e070      	b.n	800337c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	440b      	add	r3, r1
 80032a8:	333f      	adds	r3, #63	; 0x3f
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d12a      	bne.n	8003306 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	0151      	lsls	r1, r2, #5
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	440a      	add	r2, r1
 80032c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032ce:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	335c      	adds	r3, #92	; 0x5c
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	b2d8      	uxtb	r0, r3
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	440b      	add	r3, r1
 80032f6:	335c      	adds	r3, #92	; 0x5c
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	4601      	mov	r1, r0
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f009 f8a4 	bl	800c44c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003304:	e03a      	b.n	800337c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	333f      	adds	r3, #63	; 0x3f
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d12f      	bne.n	800337c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	335c      	adds	r3, #92	; 0x5c
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	440b      	add	r3, r1
 800333e:	3350      	adds	r3, #80	; 0x50
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	f083 0301 	eor.w	r3, r3, #1
 8003346:	b2d8      	uxtb	r0, r3
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	440b      	add	r3, r1
 8003356:	3350      	adds	r3, #80	; 0x50
 8003358:	4602      	mov	r2, r0
 800335a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	b2d8      	uxtb	r0, r3
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	440b      	add	r3, r1
 800336e:	335c      	adds	r3, #92	; 0x5c
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	4601      	mov	r1, r0
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f009 f868 	bl	800c44c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	440b      	add	r3, r1
 800338a:	3350      	adds	r3, #80	; 0x50
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	f083 0301 	eor.w	r3, r3, #1
 8003392:	b2d8      	uxtb	r0, r3
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	3350      	adds	r3, #80	; 0x50
 80033a4:	4602      	mov	r2, r0
 80033a6:	701a      	strb	r2, [r3, #0]
}
 80033a8:	e1f7      	b.n	800379a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b02      	cmp	r3, #2
 80033be:	f040 811a 	bne.w	80035f6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	0151      	lsls	r1, r2, #5
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	440a      	add	r2, r1
 80033d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033dc:	f023 0302 	bic.w	r3, r3, #2
 80033e0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	440b      	add	r3, r1
 80033f0:	335d      	adds	r3, #93	; 0x5d
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10a      	bne.n	800340e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	440b      	add	r3, r1
 8003406:	335c      	adds	r3, #92	; 0x5c
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	e0d9      	b.n	80035c2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	440b      	add	r3, r1
 800341c:	335d      	adds	r3, #93	; 0x5d
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b05      	cmp	r3, #5
 8003422:	d10a      	bne.n	800343a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	440b      	add	r3, r1
 8003432:	335c      	adds	r3, #92	; 0x5c
 8003434:	2205      	movs	r2, #5
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	e0c3      	b.n	80035c2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	440b      	add	r3, r1
 8003448:	335d      	adds	r3, #93	; 0x5d
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b06      	cmp	r3, #6
 800344e:	d00a      	beq.n	8003466 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	440b      	add	r3, r1
 800345e:	335d      	adds	r3, #93	; 0x5d
 8003460:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003462:	2b08      	cmp	r3, #8
 8003464:	d156      	bne.n	8003514 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	440b      	add	r3, r1
 8003474:	3358      	adds	r3, #88	; 0x58
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	1c59      	adds	r1, r3, #1
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4403      	add	r3, r0
 8003488:	3358      	adds	r3, #88	; 0x58
 800348a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	440b      	add	r3, r1
 800349a:	3358      	adds	r3, #88	; 0x58
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d914      	bls.n	80034cc <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	3358      	adds	r3, #88	; 0x58
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	335c      	adds	r3, #92	; 0x5c
 80034c6:	2204      	movs	r2, #4
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e009      	b.n	80034e0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	440b      	add	r3, r1
 80034da:	335c      	adds	r3, #92	; 0x5c
 80034dc:	2202      	movs	r2, #2
 80034de:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034f6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034fe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350c:	461a      	mov	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e056      	b.n	80035c2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	335d      	adds	r3, #93	; 0x5d
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b03      	cmp	r3, #3
 8003528:	d123      	bne.n	8003572 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	440b      	add	r3, r1
 8003538:	335c      	adds	r3, #92	; 0x5c
 800353a:	2202      	movs	r2, #2
 800353c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003554:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800355c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	461a      	mov	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	e027      	b.n	80035c2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	335d      	adds	r3, #93	; 0x5d
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b07      	cmp	r3, #7
 8003586:	d11c      	bne.n	80035c2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	3358      	adds	r3, #88	; 0x58
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	1c59      	adds	r1, r3, #1
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4403      	add	r3, r0
 80035aa:	3358      	adds	r3, #88	; 0x58
 80035ac:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	440b      	add	r3, r1
 80035bc:	335c      	adds	r3, #92	; 0x5c
 80035be:	2204      	movs	r2, #4
 80035c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ce:	461a      	mov	r2, r3
 80035d0:	2302      	movs	r3, #2
 80035d2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	b2d8      	uxtb	r0, r3
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	335c      	adds	r3, #92	; 0x5c
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	4601      	mov	r1, r0
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f008 ff2c 	bl	800c44c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035f4:	e0d1      	b.n	800379a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d13e      	bne.n	800368a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	0151      	lsls	r1, r2, #5
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	440a      	add	r2, r1
 8003622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003626:	f043 0302 	orr.w	r3, r3, #2
 800362a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	3358      	adds	r3, #88	; 0x58
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	1c59      	adds	r1, r3, #1
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4403      	add	r3, r0
 800364e:	3358      	adds	r3, #88	; 0x58
 8003650:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	440b      	add	r3, r1
 8003660:	335d      	adds	r3, #93	; 0x5d
 8003662:	2206      	movs	r2, #6
 8003664:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f002 ff0e 	bl	8006492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4413      	add	r3, r2
 800367e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003682:	461a      	mov	r2, r3
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	6093      	str	r3, [r2, #8]
}
 8003688:	e087      	b.n	800379a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4413      	add	r3, r2
 8003692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b10      	cmp	r3, #16
 800369e:	d17c      	bne.n	800379a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	440b      	add	r3, r1
 80036ae:	333f      	adds	r3, #63	; 0x3f
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d122      	bne.n	80036fc <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	440b      	add	r3, r1
 80036c4:	3358      	adds	r3, #88	; 0x58
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	0151      	lsls	r1, r2, #5
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	440a      	add	r2, r1
 80036e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f002 fecc 	bl	8006492 <USB_HC_Halt>
 80036fa:	e045      	b.n	8003788 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	440b      	add	r3, r1
 800370a:	333f      	adds	r3, #63	; 0x3f
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	440b      	add	r3, r1
 8003720:	333f      	adds	r3, #63	; 0x3f
 8003722:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003724:	2b02      	cmp	r3, #2
 8003726:	d12f      	bne.n	8003788 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	440b      	add	r3, r1
 8003736:	3358      	adds	r3, #88	; 0x58
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d121      	bne.n	8003788 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	440b      	add	r3, r1
 8003752:	335d      	adds	r3, #93	; 0x5d
 8003754:	2203      	movs	r2, #3
 8003756:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	0151      	lsls	r1, r2, #5
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	440a      	add	r2, r1
 800376e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f002 fe85 	bl	8006492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003794:	461a      	mov	r2, r3
 8003796:	2310      	movs	r3, #16
 8003798:	6093      	str	r3, [r2, #8]
}
 800379a:	bf00      	nop
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	460b      	mov	r3, r1
 80037ac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d119      	bne.n	8003806 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037de:	461a      	mov	r2, r3
 80037e0:	2304      	movs	r3, #4
 80037e2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	0151      	lsls	r1, r2, #5
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	440a      	add	r2, r1
 80037fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003804:	e33e      	b.n	8003e84 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4413      	add	r3, r2
 800380e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b20      	cmp	r3, #32
 800381a:	d141      	bne.n	80038a0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2320      	movs	r3, #32
 800382c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	440b      	add	r3, r1
 800383c:	333d      	adds	r3, #61	; 0x3d
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	f040 831f 	bne.w	8003e84 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	440b      	add	r3, r1
 8003854:	333d      	adds	r3, #61	; 0x3d
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	440b      	add	r3, r1
 8003868:	335c      	adds	r3, #92	; 0x5c
 800386a:	2202      	movs	r2, #2
 800386c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	0151      	lsls	r1, r2, #5
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	440a      	add	r2, r1
 8003884:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003888:	f043 0302 	orr.w	r3, r3, #2
 800388c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f002 fdfa 	bl	8006492 <USB_HC_Halt>
}
 800389e:	e2f1      	b.n	8003e84 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	d13f      	bne.n	8003936 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	440b      	add	r3, r1
 80038c4:	335d      	adds	r3, #93	; 0x5d
 80038c6:	2204      	movs	r2, #4
 80038c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	440b      	add	r3, r1
 80038d8:	333d      	adds	r3, #61	; 0x3d
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	440b      	add	r3, r1
 80038ec:	3358      	adds	r3, #88	; 0x58
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	0151      	lsls	r1, r2, #5
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	440a      	add	r2, r1
 8003908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f002 fdb8 	bl	8006492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4413      	add	r3, r2
 800392a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392e:	461a      	mov	r2, r3
 8003930:	2340      	movs	r3, #64	; 0x40
 8003932:	6093      	str	r3, [r2, #8]
}
 8003934:	e2a6      	b.n	8003e84 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800394c:	d122      	bne.n	8003994 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4413      	add	r3, r2
 8003956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	0151      	lsls	r1, r2, #5
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	440a      	add	r2, r1
 8003964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003968:	f043 0302 	orr.w	r3, r3, #2
 800396c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f002 fd8a 	bl	8006492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398a:	461a      	mov	r2, r3
 800398c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003990:	6093      	str	r3, [r2, #8]
}
 8003992:	e277      	b.n	8003e84 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4413      	add	r3, r2
 800399c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d135      	bne.n	8003a16 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	440b      	add	r3, r1
 80039b8:	3358      	adds	r3, #88	; 0x58
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	0151      	lsls	r1, r2, #5
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	440a      	add	r2, r1
 80039d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f002 fd52 	bl	8006492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fa:	461a      	mov	r2, r3
 80039fc:	2301      	movs	r3, #1
 80039fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	440b      	add	r3, r1
 8003a0e:	335d      	adds	r3, #93	; 0x5d
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]
}
 8003a14:	e236      	b.n	8003e84 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d12b      	bne.n	8003a84 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a38:	461a      	mov	r2, r3
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	0151      	lsls	r1, r2, #5
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	440a      	add	r2, r1
 8003a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a58:	f043 0302 	orr.w	r3, r3, #2
 8003a5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	4611      	mov	r1, r2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f002 fd12 	bl	8006492 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	440b      	add	r3, r1
 8003a7c:	335d      	adds	r3, #93	; 0x5d
 8003a7e:	2205      	movs	r2, #5
 8003a80:	701a      	strb	r2, [r3, #0]
}
 8003a82:	e1ff      	b.n	8003e84 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b10      	cmp	r3, #16
 8003a98:	d155      	bne.n	8003b46 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	440b      	add	r3, r1
 8003aa8:	3358      	adds	r3, #88	; 0x58
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	440b      	add	r3, r1
 8003abc:	335d      	adds	r3, #93	; 0x5d
 8003abe:	2203      	movs	r2, #3
 8003ac0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	440b      	add	r3, r1
 8003ad0:	333d      	adds	r3, #61	; 0x3d
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d114      	bne.n	8003b02 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	440b      	add	r3, r1
 8003ae6:	333c      	adds	r3, #60	; 0x3c
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	440b      	add	r3, r1
 8003afc:	333d      	adds	r3, #61	; 0x3d
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	0151      	lsls	r1, r2, #5
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	440a      	add	r2, r1
 8003b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b1c:	f043 0302 	orr.w	r3, r3, #2
 8003b20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f002 fcb0 	bl	8006492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3e:	461a      	mov	r2, r3
 8003b40:	2310      	movs	r3, #16
 8003b42:	6093      	str	r3, [r2, #8]
}
 8003b44:	e19e      	b.n	8003e84 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b58:	2b80      	cmp	r3, #128	; 0x80
 8003b5a:	d12b      	bne.n	8003bb4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b76:	f043 0302 	orr.w	r3, r3, #2
 8003b7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f002 fc83 	bl	8006492 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	440b      	add	r3, r1
 8003b9a:	335d      	adds	r3, #93	; 0x5d
 8003b9c:	2206      	movs	r2, #6
 8003b9e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bac:	461a      	mov	r2, r3
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	6093      	str	r3, [r2, #8]
}
 8003bb2:	e167      	b.n	8003e84 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bca:	d135      	bne.n	8003c38 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	0151      	lsls	r1, r2, #5
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	440a      	add	r2, r1
 8003be2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003be6:	f043 0302 	orr.w	r3, r3, #2
 8003bea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f002 fc4b 	bl	8006492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2310      	movs	r3, #16
 8003c0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	440b      	add	r3, r1
 8003c30:	335d      	adds	r3, #93	; 0x5d
 8003c32:	2208      	movs	r2, #8
 8003c34:	701a      	strb	r2, [r3, #0]
}
 8003c36:	e125      	b.n	8003e84 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	f040 811a 	bne.w	8003e84 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	0151      	lsls	r1, r2, #5
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	440a      	add	r2, r1
 8003c66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c6a:	f023 0302 	bic.w	r3, r3, #2
 8003c6e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	440b      	add	r3, r1
 8003c7e:	335d      	adds	r3, #93	; 0x5d
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d137      	bne.n	8003cf6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	440b      	add	r3, r1
 8003c94:	335c      	adds	r3, #92	; 0x5c
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	440b      	add	r3, r1
 8003ca8:	333f      	adds	r3, #63	; 0x3f
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d00b      	beq.n	8003cc8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	440b      	add	r3, r1
 8003cbe:	333f      	adds	r3, #63	; 0x3f
 8003cc0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	f040 80c5 	bne.w	8003e52 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3351      	adds	r3, #81	; 0x51
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	f083 0301 	eor.w	r3, r3, #1
 8003cde:	b2d8      	uxtb	r0, r3
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	3351      	adds	r3, #81	; 0x51
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	e0ad      	b.n	8003e52 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	440b      	add	r3, r1
 8003d04:	335d      	adds	r3, #93	; 0x5d
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d10a      	bne.n	8003d22 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	440b      	add	r3, r1
 8003d1a:	335c      	adds	r3, #92	; 0x5c
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	e097      	b.n	8003e52 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	440b      	add	r3, r1
 8003d30:	335d      	adds	r3, #93	; 0x5d
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d10a      	bne.n	8003d4e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	440b      	add	r3, r1
 8003d46:	335c      	adds	r3, #92	; 0x5c
 8003d48:	2202      	movs	r2, #2
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e081      	b.n	8003e52 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	440b      	add	r3, r1
 8003d5c:	335d      	adds	r3, #93	; 0x5d
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b05      	cmp	r3, #5
 8003d62:	d10a      	bne.n	8003d7a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	440b      	add	r3, r1
 8003d72:	335c      	adds	r3, #92	; 0x5c
 8003d74:	2205      	movs	r2, #5
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e06b      	b.n	8003e52 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	440b      	add	r3, r1
 8003d88:	335d      	adds	r3, #93	; 0x5d
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b06      	cmp	r3, #6
 8003d8e:	d00a      	beq.n	8003da6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	335d      	adds	r3, #93	; 0x5d
 8003da0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d155      	bne.n	8003e52 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	440b      	add	r3, r1
 8003db4:	3358      	adds	r3, #88	; 0x58
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	1c59      	adds	r1, r3, #1
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4403      	add	r3, r0
 8003dc8:	3358      	adds	r3, #88	; 0x58
 8003dca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	440b      	add	r3, r1
 8003dda:	3358      	adds	r3, #88	; 0x58
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d914      	bls.n	8003e0c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	440b      	add	r3, r1
 8003df0:	3358      	adds	r3, #88	; 0x58
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	440b      	add	r3, r1
 8003e04:	335c      	adds	r3, #92	; 0x5c
 8003e06:	2204      	movs	r2, #4
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	e009      	b.n	8003e20 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	440b      	add	r3, r1
 8003e1a:	335c      	adds	r3, #92	; 0x5c
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e36:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e3e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2302      	movs	r3, #2
 8003e62:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	b2d8      	uxtb	r0, r3
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	335c      	adds	r3, #92	; 0x5c
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4601      	mov	r1, r0
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f008 fae4 	bl	800c44c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e84:	bf00      	nop
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08a      	sub	sp, #40	; 0x28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	0c5b      	lsrs	r3, r3, #17
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ec0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d004      	beq.n	8003ed2 <HCD_RXQLVL_IRQHandler+0x46>
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	f000 8082 	beq.w	8003fd4 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ed0:	e083      	b.n	8003fda <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d07f      	beq.n	8003fd8 <HCD_RXQLVL_IRQHandler+0x14c>
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3344      	adds	r3, #68	; 0x44
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d074      	beq.n	8003fd8 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	440b      	add	r3, r1
 8003f00:	3344      	adds	r3, #68	; 0x44
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	b292      	uxth	r2, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f001 fe6e 	bl	8005bea <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3344      	adds	r3, #68	; 0x44
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	18d1      	adds	r1, r2, r3
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4403      	add	r3, r0
 8003f32:	3344      	adds	r3, #68	; 0x44
 8003f34:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	440b      	add	r3, r1
 8003f44:	334c      	adds	r3, #76	; 0x4c
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	18d1      	adds	r1, r2, r3
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4403      	add	r3, r0
 8003f5a:	334c      	adds	r3, #76	; 0x4c
 8003f5c:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HCD_RXQLVL_IRQHandler+0x158>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d031      	beq.n	8003fd8 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f8a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f92:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	440b      	add	r3, r1
 8003fb4:	3350      	adds	r3, #80	; 0x50
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	f083 0301 	eor.w	r3, r3, #1
 8003fbc:	b2d8      	uxtb	r0, r3
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	440b      	add	r3, r1
 8003fcc:	3350      	adds	r3, #80	; 0x50
 8003fce:	4602      	mov	r2, r0
 8003fd0:	701a      	strb	r2, [r3, #0]
      break;
 8003fd2:	e001      	b.n	8003fd8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003fd4:	bf00      	nop
 8003fd6:	e000      	b.n	8003fda <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8003fd8:	bf00      	nop
  }
}
 8003fda:	bf00      	nop
 8003fdc:	3728      	adds	r7, #40	; 0x28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	1ff80000 	.word	0x1ff80000

08003fe8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004014:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b02      	cmp	r3, #2
 800401e:	d10b      	bne.n	8004038 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	d102      	bne.n	8004030 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f008 f9f2 	bl	800c414 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f043 0302 	orr.w	r3, r3, #2
 8004036:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b08      	cmp	r3, #8
 8004040:	d132      	bne.n	80040a8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f043 0308 	orr.w	r3, r3, #8
 8004048:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b04      	cmp	r3, #4
 8004052:	d126      	bne.n	80040a2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d113      	bne.n	8004084 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004062:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004066:	d106      	bne.n	8004076 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2102      	movs	r1, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f001 feea 	bl	8005e48 <USB_InitFSLSPClkSel>
 8004074:	e011      	b.n	800409a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2101      	movs	r1, #1
 800407c:	4618      	mov	r0, r3
 800407e:	f001 fee3 	bl	8005e48 <USB_InitFSLSPClkSel>
 8004082:	e00a      	b.n	800409a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d106      	bne.n	800409a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004092:	461a      	mov	r2, r3
 8004094:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004098:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f008 f9e8 	bl	800c470 <HAL_HCD_PortEnabled_Callback>
 80040a0:	e002      	b.n	80040a8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f008 f9f2 	bl	800c48c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d103      	bne.n	80040ba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f043 0320 	orr.w	r3, r3, #32
 80040b8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040c0:	461a      	mov	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	6013      	str	r3, [r2, #0]
}
 80040c6:	bf00      	nop
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0cc      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	4b68      	ldr	r3, [pc, #416]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d90c      	bls.n	800410c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b65      	ldr	r3, [pc, #404]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b63      	ldr	r3, [pc, #396]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0b8      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d020      	beq.n	800415a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004124:	4b59      	ldr	r3, [pc, #356]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a58      	ldr	r2, [pc, #352]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800412e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800413c:	4b53      	ldr	r3, [pc, #332]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a52      	ldr	r2, [pc, #328]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004148:	4b50      	ldr	r3, [pc, #320]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	494d      	ldr	r1, [pc, #308]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d044      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	4b47      	ldr	r3, [pc, #284]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d119      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e07f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d003      	beq.n	800418e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800418a:	2b03      	cmp	r3, #3
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418e:	4b3f      	ldr	r3, [pc, #252]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e06f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419e:	4b3b      	ldr	r3, [pc, #236]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e067      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ae:	4b37      	ldr	r3, [pc, #220]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 0203 	bic.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4934      	ldr	r1, [pc, #208]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c0:	f7fd ffb8 	bl	8002134 <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	e00a      	b.n	80041de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7fd ffb4 	bl	8002134 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e04f      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	4b2b      	ldr	r3, [pc, #172]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 020c 	and.w	r2, r3, #12
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1eb      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f0:	4b25      	ldr	r3, [pc, #148]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d20c      	bcs.n	8004218 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b22      	ldr	r3, [pc, #136]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b20      	ldr	r3, [pc, #128]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e032      	b.n	800427e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d008      	beq.n	8004236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004224:	4b19      	ldr	r3, [pc, #100]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4916      	ldr	r1, [pc, #88]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	490e      	ldr	r1, [pc, #56]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004256:	f000 f887 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 800425a:	4602      	mov	r2, r0
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	490a      	ldr	r1, [pc, #40]	; (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	5ccb      	ldrb	r3, [r1, r3]
 800426a:	fa22 f303 	lsr.w	r3, r2, r3
 800426e:	4a09      	ldr	r2, [pc, #36]	; (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004272:	4b09      	ldr	r3, [pc, #36]	; (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc ffec 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40023c00 	.word	0x40023c00
 800428c:	40023800 	.word	0x40023800
 8004290:	0800d460 	.word	0x0800d460
 8004294:	20000028 	.word	0x20000028
 8004298:	2000004c 	.word	0x2000004c

0800429c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a0:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000028 	.word	0x20000028

080042b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042b8:	f7ff fff0 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0a9b      	lsrs	r3, r3, #10
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4903      	ldr	r1, [pc, #12]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40023800 	.word	0x40023800
 80042d8:	0800d470 	.word	0x0800d470

080042dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042e0:	f7ff ffdc 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	0b5b      	lsrs	r3, r3, #13
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	4903      	ldr	r1, [pc, #12]	; (8004300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f2:	5ccb      	ldrb	r3, [r1, r3]
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40023800 	.word	0x40023800
 8004300:	0800d470 	.word	0x0800d470

08004304 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	220f      	movs	r2, #15
 8004312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004314:	4b12      	ldr	r3, [pc, #72]	; (8004360 <HAL_RCC_GetClockConfig+0x5c>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0203 	and.w	r2, r3, #3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <HAL_RCC_GetClockConfig+0x5c>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800432c:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <HAL_RCC_GetClockConfig+0x5c>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_GetClockConfig+0x5c>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	08db      	lsrs	r3, r3, #3
 800433e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <HAL_RCC_GetClockConfig+0x60>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 020f 	and.w	r2, r3, #15
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	601a      	str	r2, [r3, #0]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800
 8004364:	40023c00 	.word	0x40023c00

08004368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800436c:	b088      	sub	sp, #32
 800436e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004384:	4bce      	ldr	r3, [pc, #824]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	2b0c      	cmp	r3, #12
 800438e:	f200 818d 	bhi.w	80046ac <HAL_RCC_GetSysClockFreq+0x344>
 8004392:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <HAL_RCC_GetSysClockFreq+0x30>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	080043cd 	.word	0x080043cd
 800439c:	080046ad 	.word	0x080046ad
 80043a0:	080046ad 	.word	0x080046ad
 80043a4:	080046ad 	.word	0x080046ad
 80043a8:	080043d3 	.word	0x080043d3
 80043ac:	080046ad 	.word	0x080046ad
 80043b0:	080046ad 	.word	0x080046ad
 80043b4:	080046ad 	.word	0x080046ad
 80043b8:	080043d9 	.word	0x080043d9
 80043bc:	080046ad 	.word	0x080046ad
 80043c0:	080046ad 	.word	0x080046ad
 80043c4:	080046ad 	.word	0x080046ad
 80043c8:	0800454d 	.word	0x0800454d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043cc:	4bbd      	ldr	r3, [pc, #756]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80043ce:	61bb      	str	r3, [r7, #24]
       break;
 80043d0:	e16f      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043d2:	4bbd      	ldr	r3, [pc, #756]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x360>)
 80043d4:	61bb      	str	r3, [r7, #24]
      break;
 80043d6:	e16c      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d8:	4bb9      	ldr	r3, [pc, #740]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043e2:	4bb7      	ldr	r3, [pc, #732]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d053      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ee:	4bb4      	ldr	r3, [pc, #720]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	099b      	lsrs	r3, r3, #6
 80043f4:	461a      	mov	r2, r3
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043fe:	f04f 0100 	mov.w	r1, #0
 8004402:	ea02 0400 	and.w	r4, r2, r0
 8004406:	603c      	str	r4, [r7, #0]
 8004408:	400b      	ands	r3, r1
 800440a:	607b      	str	r3, [r7, #4]
 800440c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004410:	4620      	mov	r0, r4
 8004412:	4629      	mov	r1, r5
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	014b      	lsls	r3, r1, #5
 800441e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004422:	0142      	lsls	r2, r0, #5
 8004424:	4610      	mov	r0, r2
 8004426:	4619      	mov	r1, r3
 8004428:	4623      	mov	r3, r4
 800442a:	1ac0      	subs	r0, r0, r3
 800442c:	462b      	mov	r3, r5
 800442e:	eb61 0103 	sbc.w	r1, r1, r3
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	018b      	lsls	r3, r1, #6
 800443c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004440:	0182      	lsls	r2, r0, #6
 8004442:	1a12      	subs	r2, r2, r0
 8004444:	eb63 0301 	sbc.w	r3, r3, r1
 8004448:	f04f 0000 	mov.w	r0, #0
 800444c:	f04f 0100 	mov.w	r1, #0
 8004450:	00d9      	lsls	r1, r3, #3
 8004452:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004456:	00d0      	lsls	r0, r2, #3
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4621      	mov	r1, r4
 800445e:	1852      	adds	r2, r2, r1
 8004460:	4629      	mov	r1, r5
 8004462:	eb43 0101 	adc.w	r1, r3, r1
 8004466:	460b      	mov	r3, r1
 8004468:	f04f 0000 	mov.w	r0, #0
 800446c:	f04f 0100 	mov.w	r1, #0
 8004470:	0259      	lsls	r1, r3, #9
 8004472:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004476:	0250      	lsls	r0, r2, #9
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	461a      	mov	r2, r3
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	f7fb ff1a 	bl	80002c0 <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4613      	mov	r3, r2
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	e04c      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004496:	4b8a      	ldr	r3, [pc, #552]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	099b      	lsrs	r3, r3, #6
 800449c:	461a      	mov	r2, r3
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	ea02 0a00 	and.w	sl, r2, r0
 80044ae:	ea03 0b01 	and.w	fp, r3, r1
 80044b2:	4650      	mov	r0, sl
 80044b4:	4659      	mov	r1, fp
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	014b      	lsls	r3, r1, #5
 80044c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044c4:	0142      	lsls	r2, r0, #5
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	ebb0 000a 	subs.w	r0, r0, sl
 80044ce:	eb61 010b 	sbc.w	r1, r1, fp
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	018b      	lsls	r3, r1, #6
 80044dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044e0:	0182      	lsls	r2, r0, #6
 80044e2:	1a12      	subs	r2, r2, r0
 80044e4:	eb63 0301 	sbc.w	r3, r3, r1
 80044e8:	f04f 0000 	mov.w	r0, #0
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	00d9      	lsls	r1, r3, #3
 80044f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044f6:	00d0      	lsls	r0, r2, #3
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	eb12 020a 	adds.w	r2, r2, sl
 8004500:	eb43 030b 	adc.w	r3, r3, fp
 8004504:	f04f 0000 	mov.w	r0, #0
 8004508:	f04f 0100 	mov.w	r1, #0
 800450c:	0299      	lsls	r1, r3, #10
 800450e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004512:	0290      	lsls	r0, r2, #10
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	461a      	mov	r2, r3
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	f7fb fecc 	bl	80002c0 <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4613      	mov	r3, r2
 800452e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004530:	4b63      	ldr	r3, [pc, #396]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	3301      	adds	r3, #1
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	61bb      	str	r3, [r7, #24]
      break;
 800454a:	e0b2      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800454c:	4b5c      	ldr	r3, [pc, #368]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x358>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004554:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004556:	4b5a      	ldr	r3, [pc, #360]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d04d      	beq.n	80045fe <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004562:	4b57      	ldr	r3, [pc, #348]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	461a      	mov	r2, r3
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004572:	f04f 0100 	mov.w	r1, #0
 8004576:	ea02 0800 	and.w	r8, r2, r0
 800457a:	ea03 0901 	and.w	r9, r3, r1
 800457e:	4640      	mov	r0, r8
 8004580:	4649      	mov	r1, r9
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	014b      	lsls	r3, r1, #5
 800458c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004590:	0142      	lsls	r2, r0, #5
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	ebb0 0008 	subs.w	r0, r0, r8
 800459a:	eb61 0109 	sbc.w	r1, r1, r9
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	018b      	lsls	r3, r1, #6
 80045a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045ac:	0182      	lsls	r2, r0, #6
 80045ae:	1a12      	subs	r2, r2, r0
 80045b0:	eb63 0301 	sbc.w	r3, r3, r1
 80045b4:	f04f 0000 	mov.w	r0, #0
 80045b8:	f04f 0100 	mov.w	r1, #0
 80045bc:	00d9      	lsls	r1, r3, #3
 80045be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045c2:	00d0      	lsls	r0, r2, #3
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	eb12 0208 	adds.w	r2, r2, r8
 80045cc:	eb43 0309 	adc.w	r3, r3, r9
 80045d0:	f04f 0000 	mov.w	r0, #0
 80045d4:	f04f 0100 	mov.w	r1, #0
 80045d8:	0259      	lsls	r1, r3, #9
 80045da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80045de:	0250      	lsls	r0, r2, #9
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4610      	mov	r0, r2
 80045e6:	4619      	mov	r1, r3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	461a      	mov	r2, r3
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	f7fb fe66 	bl	80002c0 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4613      	mov	r3, r2
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	e04a      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045fe:	4b30      	ldr	r3, [pc, #192]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	099b      	lsrs	r3, r3, #6
 8004604:	461a      	mov	r2, r3
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800460e:	f04f 0100 	mov.w	r1, #0
 8004612:	ea02 0400 	and.w	r4, r2, r0
 8004616:	ea03 0501 	and.w	r5, r3, r1
 800461a:	4620      	mov	r0, r4
 800461c:	4629      	mov	r1, r5
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	014b      	lsls	r3, r1, #5
 8004628:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800462c:	0142      	lsls	r2, r0, #5
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	1b00      	subs	r0, r0, r4
 8004634:	eb61 0105 	sbc.w	r1, r1, r5
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	018b      	lsls	r3, r1, #6
 8004642:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004646:	0182      	lsls	r2, r0, #6
 8004648:	1a12      	subs	r2, r2, r0
 800464a:	eb63 0301 	sbc.w	r3, r3, r1
 800464e:	f04f 0000 	mov.w	r0, #0
 8004652:	f04f 0100 	mov.w	r1, #0
 8004656:	00d9      	lsls	r1, r3, #3
 8004658:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800465c:	00d0      	lsls	r0, r2, #3
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	1912      	adds	r2, r2, r4
 8004664:	eb45 0303 	adc.w	r3, r5, r3
 8004668:	f04f 0000 	mov.w	r0, #0
 800466c:	f04f 0100 	mov.w	r1, #0
 8004670:	0299      	lsls	r1, r3, #10
 8004672:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004676:	0290      	lsls	r0, r2, #10
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4610      	mov	r0, r2
 800467e:	4619      	mov	r1, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	461a      	mov	r2, r3
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	f7fb fe1a 	bl	80002c0 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4613      	mov	r3, r2
 8004692:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004694:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	0f1b      	lsrs	r3, r3, #28
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	61bb      	str	r3, [r7, #24]
      break;
 80046aa:	e002      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80046ae:	61bb      	str	r3, [r7, #24]
      break;
 80046b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b2:	69bb      	ldr	r3, [r7, #24]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046be:	bf00      	nop
 80046c0:	40023800 	.word	0x40023800
 80046c4:	00f42400 	.word	0x00f42400
 80046c8:	007a1200 	.word	0x007a1200

080046cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8083 	beq.w	80047ec <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046e6:	4b95      	ldr	r3, [pc, #596]	; (800493c <HAL_RCC_OscConfig+0x270>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d019      	beq.n	8004726 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046f2:	4b92      	ldr	r3, [pc, #584]	; (800493c <HAL_RCC_OscConfig+0x270>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d106      	bne.n	800470c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046fe:	4b8f      	ldr	r3, [pc, #572]	; (800493c <HAL_RCC_OscConfig+0x270>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800470a:	d00c      	beq.n	8004726 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800470c:	4b8b      	ldr	r3, [pc, #556]	; (800493c <HAL_RCC_OscConfig+0x270>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004714:	2b0c      	cmp	r3, #12
 8004716:	d112      	bne.n	800473e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004718:	4b88      	ldr	r3, [pc, #544]	; (800493c <HAL_RCC_OscConfig+0x270>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004724:	d10b      	bne.n	800473e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004726:	4b85      	ldr	r3, [pc, #532]	; (800493c <HAL_RCC_OscConfig+0x270>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d05b      	beq.n	80047ea <HAL_RCC_OscConfig+0x11e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d157      	bne.n	80047ea <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e216      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004746:	d106      	bne.n	8004756 <HAL_RCC_OscConfig+0x8a>
 8004748:	4b7c      	ldr	r3, [pc, #496]	; (800493c <HAL_RCC_OscConfig+0x270>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a7b      	ldr	r2, [pc, #492]	; (800493c <HAL_RCC_OscConfig+0x270>)
 800474e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	e01d      	b.n	8004792 <HAL_RCC_OscConfig+0xc6>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800475e:	d10c      	bne.n	800477a <HAL_RCC_OscConfig+0xae>
 8004760:	4b76      	ldr	r3, [pc, #472]	; (800493c <HAL_RCC_OscConfig+0x270>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a75      	ldr	r2, [pc, #468]	; (800493c <HAL_RCC_OscConfig+0x270>)
 8004766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b73      	ldr	r3, [pc, #460]	; (800493c <HAL_RCC_OscConfig+0x270>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a72      	ldr	r2, [pc, #456]	; (800493c <HAL_RCC_OscConfig+0x270>)
 8004772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	e00b      	b.n	8004792 <HAL_RCC_OscConfig+0xc6>
 800477a:	4b70      	ldr	r3, [pc, #448]	; (800493c <HAL_RCC_OscConfig+0x270>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a6f      	ldr	r2, [pc, #444]	; (800493c <HAL_RCC_OscConfig+0x270>)
 8004780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	4b6d      	ldr	r3, [pc, #436]	; (800493c <HAL_RCC_OscConfig+0x270>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a6c      	ldr	r2, [pc, #432]	; (800493c <HAL_RCC_OscConfig+0x270>)
 800478c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004790:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d013      	beq.n	80047c2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479a:	f7fd fccb 	bl	8002134 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047a2:	f7fd fcc7 	bl	8002134 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b64      	cmp	r3, #100	; 0x64
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e1db      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b4:	4b61      	ldr	r3, [pc, #388]	; (800493c <HAL_RCC_OscConfig+0x270>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCC_OscConfig+0xd6>
 80047c0:	e014      	b.n	80047ec <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7fd fcb7 	bl	8002134 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ca:	f7fd fcb3 	bl	8002134 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b64      	cmp	r3, #100	; 0x64
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e1c7      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047dc:	4b57      	ldr	r3, [pc, #348]	; (800493c <HAL_RCC_OscConfig+0x270>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f0      	bne.n	80047ca <HAL_RCC_OscConfig+0xfe>
 80047e8:	e000      	b.n	80047ec <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d06f      	beq.n	80048d8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047f8:	4b50      	ldr	r3, [pc, #320]	; (800493c <HAL_RCC_OscConfig+0x270>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b00      	cmp	r3, #0
 8004802:	d017      	beq.n	8004834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004804:	4b4d      	ldr	r3, [pc, #308]	; (800493c <HAL_RCC_OscConfig+0x270>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800480c:	2b08      	cmp	r3, #8
 800480e:	d105      	bne.n	800481c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004810:	4b4a      	ldr	r3, [pc, #296]	; (800493c <HAL_RCC_OscConfig+0x270>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00b      	beq.n	8004834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800481c:	4b47      	ldr	r3, [pc, #284]	; (800493c <HAL_RCC_OscConfig+0x270>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004824:	2b0c      	cmp	r3, #12
 8004826:	d11c      	bne.n	8004862 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004828:	4b44      	ldr	r3, [pc, #272]	; (800493c <HAL_RCC_OscConfig+0x270>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d116      	bne.n	8004862 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004834:	4b41      	ldr	r3, [pc, #260]	; (800493c <HAL_RCC_OscConfig+0x270>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_RCC_OscConfig+0x180>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d001      	beq.n	800484c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e18f      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484c:	4b3b      	ldr	r3, [pc, #236]	; (800493c <HAL_RCC_OscConfig+0x270>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	4938      	ldr	r1, [pc, #224]	; (800493c <HAL_RCC_OscConfig+0x270>)
 800485c:	4313      	orrs	r3, r2
 800485e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004860:	e03a      	b.n	80048d8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d020      	beq.n	80048ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800486a:	4b35      	ldr	r3, [pc, #212]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fd fc60 	bl	8002134 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004878:	f7fd fc5c 	bl	8002134 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e170      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488a:	4b2c      	ldr	r3, [pc, #176]	; (800493c <HAL_RCC_OscConfig+0x270>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004896:	4b29      	ldr	r3, [pc, #164]	; (800493c <HAL_RCC_OscConfig+0x270>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4925      	ldr	r1, [pc, #148]	; (800493c <HAL_RCC_OscConfig+0x270>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	600b      	str	r3, [r1, #0]
 80048aa:	e015      	b.n	80048d8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ac:	4b24      	ldr	r3, [pc, #144]	; (8004940 <HAL_RCC_OscConfig+0x274>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b2:	f7fd fc3f 	bl	8002134 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ba:	f7fd fc3b 	bl	8002134 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e14f      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <HAL_RCC_OscConfig+0x270>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f0      	bne.n	80048ba <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d037      	beq.n	8004954 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d016      	beq.n	800491a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ec:	4b15      	ldr	r3, [pc, #84]	; (8004944 <HAL_RCC_OscConfig+0x278>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f2:	f7fd fc1f 	bl	8002134 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048fa:	f7fd fc1b 	bl	8002134 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e12f      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <HAL_RCC_OscConfig+0x270>)
 800490e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x22e>
 8004918:	e01c      	b.n	8004954 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491a:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <HAL_RCC_OscConfig+0x278>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fd fc08 	bl	8002134 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004926:	e00f      	b.n	8004948 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004928:	f7fd fc04 	bl	8002134 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d908      	bls.n	8004948 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e118      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800
 8004940:	42470000 	.word	0x42470000
 8004944:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	4b8a      	ldr	r3, [pc, #552]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 800494a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e9      	bne.n	8004928 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 8097 	beq.w	8004a90 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004962:	2300      	movs	r3, #0
 8004964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004966:	4b83      	ldr	r3, [pc, #524]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	4b7f      	ldr	r3, [pc, #508]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	4a7e      	ldr	r2, [pc, #504]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 800497c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004980:	6413      	str	r3, [r2, #64]	; 0x40
 8004982:	4b7c      	ldr	r3, [pc, #496]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800498e:	2301      	movs	r3, #1
 8004990:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004992:	4b79      	ldr	r3, [pc, #484]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d118      	bne.n	80049d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800499e:	4b76      	ldr	r3, [pc, #472]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a75      	ldr	r2, [pc, #468]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 80049a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049aa:	f7fd fbc3 	bl	8002134 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b2:	f7fd fbbf 	bl	8002134 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e0d3      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c4:	4b6c      	ldr	r3, [pc, #432]	; (8004b78 <HAL_RCC_OscConfig+0x4ac>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0f0      	beq.n	80049b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d106      	bne.n	80049e6 <HAL_RCC_OscConfig+0x31a>
 80049d8:	4b66      	ldr	r3, [pc, #408]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049dc:	4a65      	ldr	r2, [pc, #404]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6713      	str	r3, [r2, #112]	; 0x70
 80049e4:	e01c      	b.n	8004a20 <HAL_RCC_OscConfig+0x354>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b05      	cmp	r3, #5
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x33c>
 80049ee:	4b61      	ldr	r3, [pc, #388]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a60      	ldr	r2, [pc, #384]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 80049f4:	f043 0304 	orr.w	r3, r3, #4
 80049f8:	6713      	str	r3, [r2, #112]	; 0x70
 80049fa:	4b5e      	ldr	r3, [pc, #376]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004a00:	f043 0301 	orr.w	r3, r3, #1
 8004a04:	6713      	str	r3, [r2, #112]	; 0x70
 8004a06:	e00b      	b.n	8004a20 <HAL_RCC_OscConfig+0x354>
 8004a08:	4b5a      	ldr	r3, [pc, #360]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	4a59      	ldr	r2, [pc, #356]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	6713      	str	r3, [r2, #112]	; 0x70
 8004a14:	4b57      	ldr	r3, [pc, #348]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a56      	ldr	r2, [pc, #344]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004a1a:	f023 0304 	bic.w	r3, r3, #4
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d015      	beq.n	8004a54 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fd fb84 	bl	8002134 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2e:	e00a      	b.n	8004a46 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a30:	f7fd fb80 	bl	8002134 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e092      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a46:	4b4b      	ldr	r3, [pc, #300]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0ee      	beq.n	8004a30 <HAL_RCC_OscConfig+0x364>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fd fb6e 	bl	8002134 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7fd fb6a 	bl	8002134 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e07c      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a72:	4b40      	ldr	r3, [pc, #256]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1ee      	bne.n	8004a5c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d105      	bne.n	8004a90 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a84:	4b3b      	ldr	r3, [pc, #236]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	4a3a      	ldr	r2, [pc, #232]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d068      	beq.n	8004b6a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a98:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 030c 	and.w	r3, r3, #12
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d060      	beq.n	8004b66 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d145      	bne.n	8004b38 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aac:	4b33      	ldr	r3, [pc, #204]	; (8004b7c <HAL_RCC_OscConfig+0x4b0>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7fd fb3f 	bl	8002134 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aba:	f7fd fb3b 	bl	8002134 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e04f      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004acc:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f0      	bne.n	8004aba <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	019b      	lsls	r3, r3, #6
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	3b01      	subs	r3, #1
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	061b      	lsls	r3, r3, #24
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	071b      	lsls	r3, r3, #28
 8004b04:	491b      	ldr	r1, [pc, #108]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b0a:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <HAL_RCC_OscConfig+0x4b0>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd fb10 	bl	8002134 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b18:	f7fd fb0c 	bl	8002134 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e020      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCC_OscConfig+0x44c>
 8004b36:	e018      	b.n	8004b6a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b38:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <HAL_RCC_OscConfig+0x4b0>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fd faf9 	bl	8002134 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b46:	f7fd faf5 	bl	8002134 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e009      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_RCC_OscConfig+0x4a8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <HAL_RCC_OscConfig+0x47a>
 8004b64:	e001      	b.n	8004b6a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40023800 	.word	0x40023800
 8004b78:	40007000 	.word	0x40007000
 8004b7c:	42470060 	.word	0x42470060

08004b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e01d      	b.n	8004bce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f815 	bl	8004bd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f000 f968 	bl	8004e94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b085      	sub	sp, #20
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0201 	orr.w	r2, r2, #1
 8004c00:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b06      	cmp	r3, #6
 8004c12:	d007      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d122      	bne.n	8004c8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d11b      	bne.n	8004c8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f06f 0202 	mvn.w	r2, #2
 8004c5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f8ee 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004c7a:	e005      	b.n	8004c88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f8e0 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f8f1 	bl	8004e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d122      	bne.n	8004ce2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d11b      	bne.n	8004ce2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f06f 0204 	mvn.w	r2, #4
 8004cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f8c4 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004cce:	e005      	b.n	8004cdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f8b6 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f8c7 	bl	8004e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d122      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d11b      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f06f 0208 	mvn.w	r2, #8
 8004d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f89a 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004d22:	e005      	b.n	8004d30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f88c 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f89d 	bl	8004e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b10      	cmp	r3, #16
 8004d42:	d122      	bne.n	8004d8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	2b10      	cmp	r3, #16
 8004d50:	d11b      	bne.n	8004d8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f06f 0210 	mvn.w	r2, #16
 8004d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2208      	movs	r2, #8
 8004d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f870 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004d76:	e005      	b.n	8004d84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f862 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f873 	bl	8004e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d10e      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d107      	bne.n	8004db6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f06f 0201 	mvn.w	r2, #1
 8004dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7fc f96b 	bl	800108c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc0:	2b80      	cmp	r3, #128	; 0x80
 8004dc2:	d10e      	bne.n	8004de2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b80      	cmp	r3, #128	; 0x80
 8004dd0:	d107      	bne.n	8004de2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f903 	bl	8004fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d10e      	bne.n	8004e0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d107      	bne.n	8004e0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f838 	bl	8004e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d10e      	bne.n	8004e3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	d107      	bne.n	8004e3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f06f 0220 	mvn.w	r2, #32
 8004e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f8cd 	bl	8004fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a40      	ldr	r2, [pc, #256]	; (8004fa8 <TIM_Base_SetConfig+0x114>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d013      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb2:	d00f      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a3d      	ldr	r2, [pc, #244]	; (8004fac <TIM_Base_SetConfig+0x118>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a3c      	ldr	r2, [pc, #240]	; (8004fb0 <TIM_Base_SetConfig+0x11c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a3b      	ldr	r2, [pc, #236]	; (8004fb4 <TIM_Base_SetConfig+0x120>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a3a      	ldr	r2, [pc, #232]	; (8004fb8 <TIM_Base_SetConfig+0x124>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d108      	bne.n	8004ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a2f      	ldr	r2, [pc, #188]	; (8004fa8 <TIM_Base_SetConfig+0x114>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d02b      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef4:	d027      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2c      	ldr	r2, [pc, #176]	; (8004fac <TIM_Base_SetConfig+0x118>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d023      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a2b      	ldr	r2, [pc, #172]	; (8004fb0 <TIM_Base_SetConfig+0x11c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01f      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2a      	ldr	r2, [pc, #168]	; (8004fb4 <TIM_Base_SetConfig+0x120>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d01b      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a29      	ldr	r2, [pc, #164]	; (8004fb8 <TIM_Base_SetConfig+0x124>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d017      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a28      	ldr	r2, [pc, #160]	; (8004fbc <TIM_Base_SetConfig+0x128>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a27      	ldr	r2, [pc, #156]	; (8004fc0 <TIM_Base_SetConfig+0x12c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00f      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a26      	ldr	r2, [pc, #152]	; (8004fc4 <TIM_Base_SetConfig+0x130>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00b      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a25      	ldr	r2, [pc, #148]	; (8004fc8 <TIM_Base_SetConfig+0x134>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d007      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a24      	ldr	r2, [pc, #144]	; (8004fcc <TIM_Base_SetConfig+0x138>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d003      	beq.n	8004f46 <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a23      	ldr	r2, [pc, #140]	; (8004fd0 <TIM_Base_SetConfig+0x13c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d108      	bne.n	8004f58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <TIM_Base_SetConfig+0x114>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_Base_SetConfig+0xf8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a0c      	ldr	r2, [pc, #48]	; (8004fb8 <TIM_Base_SetConfig+0x124>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d103      	bne.n	8004f94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	615a      	str	r2, [r3, #20]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800
 8004fb4:	40000c00 	.word	0x40000c00
 8004fb8:	40010400 	.word	0x40010400
 8004fbc:	40014000 	.word	0x40014000
 8004fc0:	40014400 	.word	0x40014400
 8004fc4:	40014800 	.word	0x40014800
 8004fc8:	40001800 	.word	0x40001800
 8004fcc:	40001c00 	.word	0x40001c00
 8004fd0:	40002000 	.word	0x40002000

08004fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e03f      	b.n	800508e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fc f878 	bl	8001118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2224      	movs	r2, #36	; 0x24
 800502c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800503e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f90b 	bl	800525c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695a      	ldr	r2, [r3, #20]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b088      	sub	sp, #32
 800509a:	af02      	add	r7, sp, #8
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	f040 8083 	bne.w	80051be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <HAL_UART_Transmit+0x2e>
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e07b      	b.n	80051c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_UART_Transmit+0x40>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e074      	b.n	80051c0 <HAL_UART_Transmit+0x12a>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2221      	movs	r2, #33	; 0x21
 80050e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80050ec:	f7fd f822 	bl	8002134 <HAL_GetTick>
 80050f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	88fa      	ldrh	r2, [r7, #6]
 80050f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	88fa      	ldrh	r2, [r7, #6]
 80050fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005106:	e042      	b.n	800518e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511e:	d122      	bne.n	8005166 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2200      	movs	r2, #0
 8005128:	2180      	movs	r1, #128	; 0x80
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f84c 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e042      	b.n	80051c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800514c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d103      	bne.n	800515e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	3302      	adds	r3, #2
 800515a:	60bb      	str	r3, [r7, #8]
 800515c:	e017      	b.n	800518e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	3301      	adds	r3, #1
 8005162:	60bb      	str	r3, [r7, #8]
 8005164:	e013      	b.n	800518e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2200      	movs	r2, #0
 800516e:	2180      	movs	r1, #128	; 0x80
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f829 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e01f      	b.n	80051c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	60ba      	str	r2, [r7, #8]
 8005186:	781a      	ldrb	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1b7      	bne.n	8005108 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2200      	movs	r2, #0
 80051a0:	2140      	movs	r1, #64	; 0x40
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f810 	bl	80051c8 <UART_WaitOnFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e006      	b.n	80051c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e000      	b.n	80051c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80051be:	2302      	movs	r3, #2
  }
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d8:	e02c      	b.n	8005234 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d028      	beq.n	8005234 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051e8:	f7fc ffa4 	bl	8002134 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d21d      	bcs.n	8005234 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005206:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695a      	ldr	r2, [r3, #20]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e00f      	b.n	8005254 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4013      	ands	r3, r2
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	429a      	cmp	r2, r3
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	461a      	mov	r2, r3
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	429a      	cmp	r2, r3
 8005250:	d0c3      	beq.n	80051da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800525c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005260:	b0bd      	sub	sp, #244	; 0xf4
 8005262:	af00      	add	r7, sp, #0
 8005264:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005278:	68d9      	ldr	r1, [r3, #12]
 800527a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	ea40 0301 	orr.w	r3, r0, r1
 8005284:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	431a      	orrs	r2, r3
 8005294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	431a      	orrs	r2, r3
 800529c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80052a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052b4:	f021 010c 	bic.w	r1, r1, #12
 80052b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80052c2:	430b      	orrs	r3, r1
 80052c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d6:	6999      	ldr	r1, [r3, #24]
 80052d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	ea40 0301 	orr.w	r3, r0, r1
 80052e2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ee:	f040 81a5 	bne.w	800563c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	4bcd      	ldr	r3, [pc, #820]	; (8005630 <UART_SetConfig+0x3d4>)
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d006      	beq.n	800530c <UART_SetConfig+0xb0>
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	4bcb      	ldr	r3, [pc, #812]	; (8005634 <UART_SetConfig+0x3d8>)
 8005306:	429a      	cmp	r2, r3
 8005308:	f040 80cb 	bne.w	80054a2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800530c:	f7fe ffe6 	bl	80042dc <HAL_RCC_GetPCLK2Freq>
 8005310:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005314:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005318:	461c      	mov	r4, r3
 800531a:	f04f 0500 	mov.w	r5, #0
 800531e:	4622      	mov	r2, r4
 8005320:	462b      	mov	r3, r5
 8005322:	1891      	adds	r1, r2, r2
 8005324:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005328:	415b      	adcs	r3, r3
 800532a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800532e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005332:	1912      	adds	r2, r2, r4
 8005334:	eb45 0303 	adc.w	r3, r5, r3
 8005338:	f04f 0000 	mov.w	r0, #0
 800533c:	f04f 0100 	mov.w	r1, #0
 8005340:	00d9      	lsls	r1, r3, #3
 8005342:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005346:	00d0      	lsls	r0, r2, #3
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	1911      	adds	r1, r2, r4
 800534e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005352:	416b      	adcs	r3, r5
 8005354:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	461a      	mov	r2, r3
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	1891      	adds	r1, r2, r2
 8005366:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800536a:	415b      	adcs	r3, r3
 800536c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005370:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005374:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005378:	f7fa ffa2 	bl	80002c0 <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4bad      	ldr	r3, [pc, #692]	; (8005638 <UART_SetConfig+0x3dc>)
 8005382:	fba3 2302 	umull	r2, r3, r3, r2
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	011e      	lsls	r6, r3, #4
 800538a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800538e:	461c      	mov	r4, r3
 8005390:	f04f 0500 	mov.w	r5, #0
 8005394:	4622      	mov	r2, r4
 8005396:	462b      	mov	r3, r5
 8005398:	1891      	adds	r1, r2, r2
 800539a:	67b9      	str	r1, [r7, #120]	; 0x78
 800539c:	415b      	adcs	r3, r3
 800539e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053a0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80053a4:	1912      	adds	r2, r2, r4
 80053a6:	eb45 0303 	adc.w	r3, r5, r3
 80053aa:	f04f 0000 	mov.w	r0, #0
 80053ae:	f04f 0100 	mov.w	r1, #0
 80053b2:	00d9      	lsls	r1, r3, #3
 80053b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053b8:	00d0      	lsls	r0, r2, #3
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	1911      	adds	r1, r2, r4
 80053c0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80053c4:	416b      	adcs	r3, r5
 80053c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80053ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	461a      	mov	r2, r3
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	1891      	adds	r1, r2, r2
 80053d8:	6739      	str	r1, [r7, #112]	; 0x70
 80053da:	415b      	adcs	r3, r3
 80053dc:	677b      	str	r3, [r7, #116]	; 0x74
 80053de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80053e2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80053e6:	f7fa ff6b 	bl	80002c0 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4b92      	ldr	r3, [pc, #584]	; (8005638 <UART_SetConfig+0x3dc>)
 80053f0:	fba3 1302 	umull	r1, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	2164      	movs	r1, #100	; 0x64
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	3332      	adds	r3, #50	; 0x32
 8005402:	4a8d      	ldr	r2, [pc, #564]	; (8005638 <UART_SetConfig+0x3dc>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005410:	441e      	add	r6, r3
 8005412:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005416:	4618      	mov	r0, r3
 8005418:	f04f 0100 	mov.w	r1, #0
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	1894      	adds	r4, r2, r2
 8005422:	66bc      	str	r4, [r7, #104]	; 0x68
 8005424:	415b      	adcs	r3, r3
 8005426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005428:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800542c:	1812      	adds	r2, r2, r0
 800542e:	eb41 0303 	adc.w	r3, r1, r3
 8005432:	f04f 0400 	mov.w	r4, #0
 8005436:	f04f 0500 	mov.w	r5, #0
 800543a:	00dd      	lsls	r5, r3, #3
 800543c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005440:	00d4      	lsls	r4, r2, #3
 8005442:	4622      	mov	r2, r4
 8005444:	462b      	mov	r3, r5
 8005446:	1814      	adds	r4, r2, r0
 8005448:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800544c:	414b      	adcs	r3, r1
 800544e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	461a      	mov	r2, r3
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	1891      	adds	r1, r2, r2
 8005460:	6639      	str	r1, [r7, #96]	; 0x60
 8005462:	415b      	adcs	r3, r3
 8005464:	667b      	str	r3, [r7, #100]	; 0x64
 8005466:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800546a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800546e:	f7fa ff27 	bl	80002c0 <__aeabi_uldivmod>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4b70      	ldr	r3, [pc, #448]	; (8005638 <UART_SetConfig+0x3dc>)
 8005478:	fba3 1302 	umull	r1, r3, r3, r2
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	2164      	movs	r1, #100	; 0x64
 8005480:	fb01 f303 	mul.w	r3, r1, r3
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	3332      	adds	r3, #50	; 0x32
 800548a:	4a6b      	ldr	r2, [pc, #428]	; (8005638 <UART_SetConfig+0x3dc>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	f003 0207 	and.w	r2, r3, #7
 8005496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4432      	add	r2, r6
 800549e:	609a      	str	r2, [r3, #8]
 80054a0:	e26d      	b.n	800597e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054a2:	f7fe ff07 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 80054a6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054ae:	461c      	mov	r4, r3
 80054b0:	f04f 0500 	mov.w	r5, #0
 80054b4:	4622      	mov	r2, r4
 80054b6:	462b      	mov	r3, r5
 80054b8:	1891      	adds	r1, r2, r2
 80054ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80054bc:	415b      	adcs	r3, r3
 80054be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054c4:	1912      	adds	r2, r2, r4
 80054c6:	eb45 0303 	adc.w	r3, r5, r3
 80054ca:	f04f 0000 	mov.w	r0, #0
 80054ce:	f04f 0100 	mov.w	r1, #0
 80054d2:	00d9      	lsls	r1, r3, #3
 80054d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054d8:	00d0      	lsls	r0, r2, #3
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	1911      	adds	r1, r2, r4
 80054e0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80054e4:	416b      	adcs	r3, r5
 80054e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	461a      	mov	r2, r3
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	1891      	adds	r1, r2, r2
 80054f8:	6539      	str	r1, [r7, #80]	; 0x50
 80054fa:	415b      	adcs	r3, r3
 80054fc:	657b      	str	r3, [r7, #84]	; 0x54
 80054fe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005502:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005506:	f7fa fedb 	bl	80002c0 <__aeabi_uldivmod>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4b4a      	ldr	r3, [pc, #296]	; (8005638 <UART_SetConfig+0x3dc>)
 8005510:	fba3 2302 	umull	r2, r3, r3, r2
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	011e      	lsls	r6, r3, #4
 8005518:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800551c:	461c      	mov	r4, r3
 800551e:	f04f 0500 	mov.w	r5, #0
 8005522:	4622      	mov	r2, r4
 8005524:	462b      	mov	r3, r5
 8005526:	1891      	adds	r1, r2, r2
 8005528:	64b9      	str	r1, [r7, #72]	; 0x48
 800552a:	415b      	adcs	r3, r3
 800552c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800552e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005532:	1912      	adds	r2, r2, r4
 8005534:	eb45 0303 	adc.w	r3, r5, r3
 8005538:	f04f 0000 	mov.w	r0, #0
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	00d9      	lsls	r1, r3, #3
 8005542:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005546:	00d0      	lsls	r0, r2, #3
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	1911      	adds	r1, r2, r4
 800554e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005552:	416b      	adcs	r3, r5
 8005554:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	461a      	mov	r2, r3
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	1891      	adds	r1, r2, r2
 8005566:	6439      	str	r1, [r7, #64]	; 0x40
 8005568:	415b      	adcs	r3, r3
 800556a:	647b      	str	r3, [r7, #68]	; 0x44
 800556c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005570:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005574:	f7fa fea4 	bl	80002c0 <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4b2e      	ldr	r3, [pc, #184]	; (8005638 <UART_SetConfig+0x3dc>)
 800557e:	fba3 1302 	umull	r1, r3, r3, r2
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	2164      	movs	r1, #100	; 0x64
 8005586:	fb01 f303 	mul.w	r3, r1, r3
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	3332      	adds	r3, #50	; 0x32
 8005590:	4a29      	ldr	r2, [pc, #164]	; (8005638 <UART_SetConfig+0x3dc>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800559e:	441e      	add	r6, r3
 80055a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055a4:	4618      	mov	r0, r3
 80055a6:	f04f 0100 	mov.w	r1, #0
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	1894      	adds	r4, r2, r2
 80055b0:	63bc      	str	r4, [r7, #56]	; 0x38
 80055b2:	415b      	adcs	r3, r3
 80055b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055ba:	1812      	adds	r2, r2, r0
 80055bc:	eb41 0303 	adc.w	r3, r1, r3
 80055c0:	f04f 0400 	mov.w	r4, #0
 80055c4:	f04f 0500 	mov.w	r5, #0
 80055c8:	00dd      	lsls	r5, r3, #3
 80055ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055ce:	00d4      	lsls	r4, r2, #3
 80055d0:	4622      	mov	r2, r4
 80055d2:	462b      	mov	r3, r5
 80055d4:	1814      	adds	r4, r2, r0
 80055d6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80055da:	414b      	adcs	r3, r1
 80055dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	461a      	mov	r2, r3
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	1891      	adds	r1, r2, r2
 80055ee:	6339      	str	r1, [r7, #48]	; 0x30
 80055f0:	415b      	adcs	r3, r3
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
 80055f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80055f8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055fc:	f7fa fe60 	bl	80002c0 <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <UART_SetConfig+0x3dc>)
 8005606:	fba3 1302 	umull	r1, r3, r3, r2
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	2164      	movs	r1, #100	; 0x64
 800560e:	fb01 f303 	mul.w	r3, r1, r3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	3332      	adds	r3, #50	; 0x32
 8005618:	4a07      	ldr	r2, [pc, #28]	; (8005638 <UART_SetConfig+0x3dc>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	f003 0207 	and.w	r2, r3, #7
 8005624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4432      	add	r2, r6
 800562c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800562e:	e1a6      	b.n	800597e <UART_SetConfig+0x722>
 8005630:	40011000 	.word	0x40011000
 8005634:	40011400 	.word	0x40011400
 8005638:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800563c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	4bd1      	ldr	r3, [pc, #836]	; (8005988 <UART_SetConfig+0x72c>)
 8005644:	429a      	cmp	r2, r3
 8005646:	d006      	beq.n	8005656 <UART_SetConfig+0x3fa>
 8005648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4bcf      	ldr	r3, [pc, #828]	; (800598c <UART_SetConfig+0x730>)
 8005650:	429a      	cmp	r2, r3
 8005652:	f040 80ca 	bne.w	80057ea <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005656:	f7fe fe41 	bl	80042dc <HAL_RCC_GetPCLK2Freq>
 800565a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800565e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005662:	461c      	mov	r4, r3
 8005664:	f04f 0500 	mov.w	r5, #0
 8005668:	4622      	mov	r2, r4
 800566a:	462b      	mov	r3, r5
 800566c:	1891      	adds	r1, r2, r2
 800566e:	62b9      	str	r1, [r7, #40]	; 0x28
 8005670:	415b      	adcs	r3, r3
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005674:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005678:	1912      	adds	r2, r2, r4
 800567a:	eb45 0303 	adc.w	r3, r5, r3
 800567e:	f04f 0000 	mov.w	r0, #0
 8005682:	f04f 0100 	mov.w	r1, #0
 8005686:	00d9      	lsls	r1, r3, #3
 8005688:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800568c:	00d0      	lsls	r0, r2, #3
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	eb12 0a04 	adds.w	sl, r2, r4
 8005696:	eb43 0b05 	adc.w	fp, r3, r5
 800569a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f04f 0100 	mov.w	r1, #0
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	008b      	lsls	r3, r1, #2
 80056b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056b4:	0082      	lsls	r2, r0, #2
 80056b6:	4650      	mov	r0, sl
 80056b8:	4659      	mov	r1, fp
 80056ba:	f7fa fe01 	bl	80002c0 <__aeabi_uldivmod>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4bb3      	ldr	r3, [pc, #716]	; (8005990 <UART_SetConfig+0x734>)
 80056c4:	fba3 2302 	umull	r2, r3, r3, r2
 80056c8:	095b      	lsrs	r3, r3, #5
 80056ca:	011e      	lsls	r6, r3, #4
 80056cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056d0:	4618      	mov	r0, r3
 80056d2:	f04f 0100 	mov.w	r1, #0
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	1894      	adds	r4, r2, r2
 80056dc:	623c      	str	r4, [r7, #32]
 80056de:	415b      	adcs	r3, r3
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
 80056e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056e6:	1812      	adds	r2, r2, r0
 80056e8:	eb41 0303 	adc.w	r3, r1, r3
 80056ec:	f04f 0400 	mov.w	r4, #0
 80056f0:	f04f 0500 	mov.w	r5, #0
 80056f4:	00dd      	lsls	r5, r3, #3
 80056f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056fa:	00d4      	lsls	r4, r2, #3
 80056fc:	4622      	mov	r2, r4
 80056fe:	462b      	mov	r3, r5
 8005700:	1814      	adds	r4, r2, r0
 8005702:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005706:	414b      	adcs	r3, r1
 8005708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800570c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4618      	mov	r0, r3
 8005714:	f04f 0100 	mov.w	r1, #0
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	008b      	lsls	r3, r1, #2
 8005722:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005726:	0082      	lsls	r2, r0, #2
 8005728:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800572c:	f7fa fdc8 	bl	80002c0 <__aeabi_uldivmod>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4b96      	ldr	r3, [pc, #600]	; (8005990 <UART_SetConfig+0x734>)
 8005736:	fba3 1302 	umull	r1, r3, r3, r2
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	2164      	movs	r1, #100	; 0x64
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	3332      	adds	r3, #50	; 0x32
 8005748:	4a91      	ldr	r2, [pc, #580]	; (8005990 <UART_SetConfig+0x734>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005754:	441e      	add	r6, r3
 8005756:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800575a:	4618      	mov	r0, r3
 800575c:	f04f 0100 	mov.w	r1, #0
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	1894      	adds	r4, r2, r2
 8005766:	61bc      	str	r4, [r7, #24]
 8005768:	415b      	adcs	r3, r3
 800576a:	61fb      	str	r3, [r7, #28]
 800576c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005770:	1812      	adds	r2, r2, r0
 8005772:	eb41 0303 	adc.w	r3, r1, r3
 8005776:	f04f 0400 	mov.w	r4, #0
 800577a:	f04f 0500 	mov.w	r5, #0
 800577e:	00dd      	lsls	r5, r3, #3
 8005780:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005784:	00d4      	lsls	r4, r2, #3
 8005786:	4622      	mov	r2, r4
 8005788:	462b      	mov	r3, r5
 800578a:	1814      	adds	r4, r2, r0
 800578c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8005790:	414b      	adcs	r3, r1
 8005792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4618      	mov	r0, r3
 800579e:	f04f 0100 	mov.w	r1, #0
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	008b      	lsls	r3, r1, #2
 80057ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057b0:	0082      	lsls	r2, r0, #2
 80057b2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80057b6:	f7fa fd83 	bl	80002c0 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4b74      	ldr	r3, [pc, #464]	; (8005990 <UART_SetConfig+0x734>)
 80057c0:	fba3 1302 	umull	r1, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	2164      	movs	r1, #100	; 0x64
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	3332      	adds	r3, #50	; 0x32
 80057d2:	4a6f      	ldr	r2, [pc, #444]	; (8005990 <UART_SetConfig+0x734>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	f003 020f 	and.w	r2, r3, #15
 80057de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4432      	add	r2, r6
 80057e6:	609a      	str	r2, [r3, #8]
 80057e8:	e0c9      	b.n	800597e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ea:	f7fe fd63 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 80057ee:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057f6:	461c      	mov	r4, r3
 80057f8:	f04f 0500 	mov.w	r5, #0
 80057fc:	4622      	mov	r2, r4
 80057fe:	462b      	mov	r3, r5
 8005800:	1891      	adds	r1, r2, r2
 8005802:	6139      	str	r1, [r7, #16]
 8005804:	415b      	adcs	r3, r3
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800580c:	1912      	adds	r2, r2, r4
 800580e:	eb45 0303 	adc.w	r3, r5, r3
 8005812:	f04f 0000 	mov.w	r0, #0
 8005816:	f04f 0100 	mov.w	r1, #0
 800581a:	00d9      	lsls	r1, r3, #3
 800581c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005820:	00d0      	lsls	r0, r2, #3
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	eb12 0804 	adds.w	r8, r2, r4
 800582a:	eb43 0905 	adc.w	r9, r3, r5
 800582e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	4618      	mov	r0, r3
 8005836:	f04f 0100 	mov.w	r1, #0
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	008b      	lsls	r3, r1, #2
 8005844:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005848:	0082      	lsls	r2, r0, #2
 800584a:	4640      	mov	r0, r8
 800584c:	4649      	mov	r1, r9
 800584e:	f7fa fd37 	bl	80002c0 <__aeabi_uldivmod>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4b4e      	ldr	r3, [pc, #312]	; (8005990 <UART_SetConfig+0x734>)
 8005858:	fba3 2302 	umull	r2, r3, r3, r2
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	011e      	lsls	r6, r3, #4
 8005860:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005864:	4618      	mov	r0, r3
 8005866:	f04f 0100 	mov.w	r1, #0
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	1894      	adds	r4, r2, r2
 8005870:	60bc      	str	r4, [r7, #8]
 8005872:	415b      	adcs	r3, r3
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800587a:	1812      	adds	r2, r2, r0
 800587c:	eb41 0303 	adc.w	r3, r1, r3
 8005880:	f04f 0400 	mov.w	r4, #0
 8005884:	f04f 0500 	mov.w	r5, #0
 8005888:	00dd      	lsls	r5, r3, #3
 800588a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800588e:	00d4      	lsls	r4, r2, #3
 8005890:	4622      	mov	r2, r4
 8005892:	462b      	mov	r3, r5
 8005894:	1814      	adds	r4, r2, r0
 8005896:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800589a:	414b      	adcs	r3, r1
 800589c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f04f 0100 	mov.w	r1, #0
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	008b      	lsls	r3, r1, #2
 80058b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058ba:	0082      	lsls	r2, r0, #2
 80058bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058c0:	f7fa fcfe 	bl	80002c0 <__aeabi_uldivmod>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4b31      	ldr	r3, [pc, #196]	; (8005990 <UART_SetConfig+0x734>)
 80058ca:	fba3 1302 	umull	r1, r3, r3, r2
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	2164      	movs	r1, #100	; 0x64
 80058d2:	fb01 f303 	mul.w	r3, r1, r3
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	3332      	adds	r3, #50	; 0x32
 80058dc:	4a2c      	ldr	r2, [pc, #176]	; (8005990 <UART_SetConfig+0x734>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058e8:	441e      	add	r6, r3
 80058ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058ee:	4618      	mov	r0, r3
 80058f0:	f04f 0100 	mov.w	r1, #0
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	1894      	adds	r4, r2, r2
 80058fa:	603c      	str	r4, [r7, #0]
 80058fc:	415b      	adcs	r3, r3
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005904:	1812      	adds	r2, r2, r0
 8005906:	eb41 0303 	adc.w	r3, r1, r3
 800590a:	f04f 0400 	mov.w	r4, #0
 800590e:	f04f 0500 	mov.w	r5, #0
 8005912:	00dd      	lsls	r5, r3, #3
 8005914:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005918:	00d4      	lsls	r4, r2, #3
 800591a:	4622      	mov	r2, r4
 800591c:	462b      	mov	r3, r5
 800591e:	1814      	adds	r4, r2, r0
 8005920:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005924:	414b      	adcs	r3, r1
 8005926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	4618      	mov	r0, r3
 8005932:	f04f 0100 	mov.w	r1, #0
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	008b      	lsls	r3, r1, #2
 8005940:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005944:	0082      	lsls	r2, r0, #2
 8005946:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800594a:	f7fa fcb9 	bl	80002c0 <__aeabi_uldivmod>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4b0f      	ldr	r3, [pc, #60]	; (8005990 <UART_SetConfig+0x734>)
 8005954:	fba3 1302 	umull	r1, r3, r3, r2
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	2164      	movs	r1, #100	; 0x64
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	3332      	adds	r3, #50	; 0x32
 8005966:	4a0a      	ldr	r2, [pc, #40]	; (8005990 <UART_SetConfig+0x734>)
 8005968:	fba2 2303 	umull	r2, r3, r2, r3
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	f003 020f 	and.w	r2, r3, #15
 8005972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4432      	add	r2, r6
 800597a:	609a      	str	r2, [r3, #8]
}
 800597c:	e7ff      	b.n	800597e <UART_SetConfig+0x722>
 800597e:	bf00      	nop
 8005980:	37f4      	adds	r7, #244	; 0xf4
 8005982:	46bd      	mov	sp, r7
 8005984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005988:	40011000 	.word	0x40011000
 800598c:	40011400 	.word	0x40011400
 8005990:	51eb851f 	.word	0x51eb851f

08005994 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005994:	b084      	sub	sp, #16
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	f107 001c 	add.w	r0, r7, #28
 80059a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d122      	bne.n	80059f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80059c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d105      	bne.n	80059e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f94a 	bl	8005c80 <USB_CoreReset>
 80059ec:	4603      	mov	r3, r0
 80059ee:	73fb      	strb	r3, [r7, #15]
 80059f0:	e01a      	b.n	8005a28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f93e 	bl	8005c80 <USB_CoreReset>
 8005a04:	4603      	mov	r3, r0
 8005a06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
 8005a1a:	e005      	b.n	8005a28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d10b      	bne.n	8005a46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f043 0206 	orr.w	r2, r3, #6
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f043 0220 	orr.w	r2, r3, #32
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a52:	b004      	add	sp, #16
 8005a54:	4770      	bx	lr

08005a56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f043 0201 	orr.w	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f023 0201 	bic.w	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d106      	bne.n	8005ac6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60da      	str	r2, [r3, #12]
 8005ac4:	e00b      	b.n	8005ade <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d106      	bne.n	8005ada <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	60da      	str	r2, [r3, #12]
 8005ad8:	e001      	b.n	8005ade <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e003      	b.n	8005ae6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005ade:	2032      	movs	r0, #50	; 0x32
 8005ae0:	f7fc fb34 	bl	800214c <HAL_Delay>

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	019b      	lsls	r3, r3, #6
 8005b02:	f043 0220 	orr.w	r2, r3, #32
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a09      	ldr	r2, [pc, #36]	; (8005b38 <USB_FlushTxFifo+0x48>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d901      	bls.n	8005b1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e006      	b.n	8005b2a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d0f0      	beq.n	8005b0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	00030d40 	.word	0x00030d40

08005b3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2210      	movs	r2, #16
 8005b4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3301      	adds	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4a09      	ldr	r2, [pc, #36]	; (8005b7c <USB_FlushRxFifo+0x40>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d901      	bls.n	8005b60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e006      	b.n	8005b6e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	2b10      	cmp	r3, #16
 8005b6a:	d0f0      	beq.n	8005b4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	00030d40 	.word	0x00030d40

08005b80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b089      	sub	sp, #36	; 0x24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	460b      	mov	r3, r1
 8005b90:	71fb      	strb	r3, [r7, #7]
 8005b92:	4613      	mov	r3, r2
 8005b94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005b9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d11a      	bne.n	8005bdc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ba6:	88bb      	ldrh	r3, [r7, #4]
 8005ba8:	3303      	adds	r3, #3
 8005baa:	089b      	lsrs	r3, r3, #2
 8005bac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	e00f      	b.n	8005bd4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	031a      	lsls	r2, r3, #12
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	61bb      	str	r3, [r7, #24]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d3eb      	bcc.n	8005bb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3724      	adds	r7, #36	; 0x24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b089      	sub	sp, #36	; 0x24
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	3303      	adds	r3, #3
 8005c04:	089b      	lsrs	r3, r3, #2
 8005c06:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	e00b      	b.n	8005c26 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	3301      	adds	r3, #1
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d3ef      	bcc.n	8005c0e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005c2e:	69fb      	ldr	r3, [r7, #28]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3724      	adds	r7, #36	; 0x24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4013      	ands	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c54:	68fb      	ldr	r3, [r7, #12]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
	...

08005c80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4a13      	ldr	r2, [pc, #76]	; (8005ce4 <USB_CoreReset+0x64>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e01b      	b.n	8005cd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	daf2      	bge.n	8005c8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f043 0201 	orr.w	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a09      	ldr	r2, [pc, #36]	; (8005ce4 <USB_CoreReset+0x64>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d901      	bls.n	8005cc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e006      	b.n	8005cd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d0f0      	beq.n	8005cb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	00030d40 	.word	0x00030d40

08005ce8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ce8:	b084      	sub	sp, #16
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	f107 001c 	add.w	r0, r7, #28
 8005cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d04:	461a      	mov	r2, r3
 8005d06:	2300      	movs	r3, #0
 8005d08:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d018      	beq.n	8005d54 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d10a      	bne.n	8005d3e <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d36:	f043 0304 	orr.w	r3, r3, #4
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	e014      	b.n	8005d68 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d4c:	f023 0304 	bic.w	r3, r3, #4
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	e009      	b.n	8005d68 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d62:	f023 0304 	bic.w	r3, r3, #4
 8005d66:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005d68:	2110      	movs	r1, #16
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff fec0 	bl	8005af0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff fee3 	bl	8005b3c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e015      	b.n	8005da8 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3301      	adds	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d3e5      	bcc.n	8005d7c <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005db0:	2101      	movs	r1, #1
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f8ac 	bl	8005f10 <USB_DriveVbus>

  HAL_Delay(200U);
 8005db8:	20c8      	movs	r0, #200	; 0xc8
 8005dba:	f7fc f9c7 	bl	800214c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dca:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00b      	beq.n	8005df0 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dde:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a14      	ldr	r2, [pc, #80]	; (8005e34 <USB_HostInit+0x14c>)
 8005de4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a13      	ldr	r2, [pc, #76]	; (8005e38 <USB_HostInit+0x150>)
 8005dea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005dee:	e009      	b.n	8005e04 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2280      	movs	r2, #128	; 0x80
 8005df4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a10      	ldr	r2, [pc, #64]	; (8005e3c <USB_HostInit+0x154>)
 8005dfa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a10      	ldr	r2, [pc, #64]	; (8005e40 <USB_HostInit+0x158>)
 8005e00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f043 0210 	orr.w	r2, r3, #16
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699a      	ldr	r2, [r3, #24]
 8005e1a:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <USB_HostInit+0x15c>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e2e:	b004      	add	sp, #16
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	01000200 	.word	0x01000200
 8005e38:	00e00300 	.word	0x00e00300
 8005e3c:	00600080 	.word	0x00600080
 8005e40:	004000e0 	.word	0x004000e0
 8005e44:	a3200008 	.word	0xa3200008

08005e48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e66:	f023 0303 	bic.w	r3, r3, #3
 8005e6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	68f9      	ldr	r1, [r7, #12]
 8005e7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e80:	4313      	orrs	r3, r2
 8005e82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d107      	bne.n	8005e9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e90:	461a      	mov	r2, r3
 8005e92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e96:	6053      	str	r3, [r2, #4]
 8005e98:	e009      	b.n	8005eae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e9a:	78fb      	ldrb	r3, [r7, #3]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d106      	bne.n	8005eae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f241 7370 	movw	r3, #6000	; 0x1770
 8005eac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005edc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005eec:	2064      	movs	r0, #100	; 0x64
 8005eee:	f7fc f92d 	bl	800214c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005efe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f00:	200a      	movs	r0, #10
 8005f02:	f7fc f923 	bl	800214c <HAL_Delay>

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d109      	bne.n	8005f54 <USB_DriveVbus+0x44>
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d106      	bne.n	8005f54 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f52:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f5e:	d109      	bne.n	8005f74 <USB_DriveVbus+0x64>
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f72:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	0c5b      	lsrs	r3, r3, #17
 8005fa0:	f003 0303 	and.w	r3, r3, #3
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	b29b      	uxth	r3, r3
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
	...

08005fd4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	70fb      	strb	r3, [r7, #3]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	70bb      	strb	r3, [r7, #2]
 8005fea:	4613      	mov	r3, r2
 8005fec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006002:	461a      	mov	r2, r3
 8006004:	f04f 33ff 	mov.w	r3, #4294967295
 8006008:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800600a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800600e:	2b03      	cmp	r3, #3
 8006010:	d87e      	bhi.n	8006110 <USB_HC_Init+0x13c>
 8006012:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <USB_HC_Init+0x44>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	08006029 	.word	0x08006029
 800601c:	080060d3 	.word	0x080060d3
 8006020:	08006029 	.word	0x08006029
 8006024:	08006095 	.word	0x08006095
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4413      	add	r3, r2
 8006030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006034:	461a      	mov	r2, r3
 8006036:	f240 439d 	movw	r3, #1181	; 0x49d
 800603a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800603c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006040:	2b00      	cmp	r3, #0
 8006042:	da10      	bge.n	8006066 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4413      	add	r3, r2
 800604c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	78fa      	ldrb	r2, [r7, #3]
 8006054:	0151      	lsls	r1, r2, #5
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	440a      	add	r2, r1
 800605a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800605e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006062:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006064:	e057      	b.n	8006116 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606e:	2b00      	cmp	r3, #0
 8006070:	d051      	beq.n	8006116 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	440a      	add	r2, r1
 8006088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800608c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006090:	60d3      	str	r3, [r2, #12]
      break;
 8006092:	e040      	b.n	8006116 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a0:	461a      	mov	r2, r3
 80060a2:	f240 639d 	movw	r3, #1693	; 0x69d
 80060a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	da34      	bge.n	800611a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	0151      	lsls	r1, r2, #5
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	440a      	add	r2, r1
 80060c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ce:	60d3      	str	r3, [r2, #12]
      }

      break;
 80060d0:	e023      	b.n	800611a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060de:	461a      	mov	r2, r3
 80060e0:	f240 2325 	movw	r3, #549	; 0x225
 80060e4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da17      	bge.n	800611e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	78fa      	ldrb	r2, [r7, #3]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	440a      	add	r2, r1
 8006104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006108:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800610c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800610e:	e006      	b.n	800611e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	75fb      	strb	r3, [r7, #23]
      break;
 8006114:	e004      	b.n	8006120 <USB_HC_Init+0x14c>
      break;
 8006116:	bf00      	nop
 8006118:	e002      	b.n	8006120 <USB_HC_Init+0x14c>
      break;
 800611a:	bf00      	nop
 800611c:	e000      	b.n	8006120 <USB_HC_Init+0x14c>
      break;
 800611e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006126:	699a      	ldr	r2, [r3, #24]
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	2101      	movs	r1, #1
 8006130:	fa01 f303 	lsl.w	r3, r1, r3
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800613a:	4313      	orrs	r3, r2
 800613c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800614a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800614e:	2b00      	cmp	r3, #0
 8006150:	da03      	bge.n	800615a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	e001      	b.n	800615e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800615e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006162:	2b02      	cmp	r3, #2
 8006164:	d103      	bne.n	800616e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	e001      	b.n	8006172 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006172:	787b      	ldrb	r3, [r7, #1]
 8006174:	059b      	lsls	r3, r3, #22
 8006176:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800617a:	78bb      	ldrb	r3, [r7, #2]
 800617c:	02db      	lsls	r3, r3, #11
 800617e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006182:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006184:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006188:	049b      	lsls	r3, r3, #18
 800618a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800618e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006190:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006192:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006196:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	0159      	lsls	r1, r3, #5
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	440b      	add	r3, r1
 80061a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061ae:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80061b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d10f      	bne.n	80061d8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	78fa      	ldrb	r2, [r7, #3]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061d6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop

080061e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08c      	sub	sp, #48	; 0x30
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	4613      	mov	r3, r2
 80061f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006204:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d028      	beq.n	8006264 <USB_HC_StartXfer+0x7c>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	791b      	ldrb	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d124      	bne.n	8006264 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10b      	bne.n	8006238 <USB_HC_StartXfer+0x50>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	795b      	ldrb	r3, [r3, #5]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d107      	bne.n	8006238 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	4619      	mov	r1, r3
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 fa2e 	bl	8006690 <USB_DoPing>
      return HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	e113      	b.n	8006460 <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d112      	bne.n	8006264 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	6a3a      	ldr	r2, [r7, #32]
 8006252:	440a      	add	r2, r1
 8006254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006258:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800625c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2200      	movs	r2, #0
 8006262:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d018      	beq.n	800629e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	8912      	ldrh	r2, [r2, #8]
 8006274:	4413      	add	r3, r2
 8006276:	3b01      	subs	r3, #1
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	8912      	ldrh	r2, [r2, #8]
 800627c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006280:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006282:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006284:	8b7b      	ldrh	r3, [r7, #26]
 8006286:	429a      	cmp	r2, r3
 8006288:	d90b      	bls.n	80062a2 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800628a:	8b7b      	ldrh	r3, [r7, #26]
 800628c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800628e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	8912      	ldrh	r2, [r2, #8]
 8006294:	fb02 f203 	mul.w	r2, r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	611a      	str	r2, [r3, #16]
 800629c:	e001      	b.n	80062a2 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800629e:	2301      	movs	r3, #1
 80062a0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	78db      	ldrb	r3, [r3, #3]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d006      	beq.n	80062b8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80062aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	8912      	ldrh	r2, [r2, #8]
 80062b0:	fb02 f203 	mul.w	r2, r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062c2:	04d9      	lsls	r1, r3, #19
 80062c4:	4b68      	ldr	r3, [pc, #416]	; (8006468 <USB_HC_StartXfer+0x280>)
 80062c6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80062c8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	7a9b      	ldrb	r3, [r3, #10]
 80062ce:	075b      	lsls	r3, r3, #29
 80062d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80062d4:	69f9      	ldr	r1, [r7, #28]
 80062d6:	0148      	lsls	r0, r1, #5
 80062d8:	6a39      	ldr	r1, [r7, #32]
 80062da:	4401      	add	r1, r0
 80062dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062e0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80062e2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062e4:	79fb      	ldrb	r3, [r7, #7]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d009      	beq.n	80062fe <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	68d9      	ldr	r1, [r3, #12]
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fa:	460a      	mov	r2, r1
 80062fc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	bf0c      	ite	eq
 800630e:	2301      	moveq	r3, #1
 8006310:	2300      	movne	r3, #0
 8006312:	b2db      	uxtb	r3, r3
 8006314:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	6a3a      	ldr	r2, [r7, #32]
 800632a:	440a      	add	r2, r1
 800632c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006330:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006334:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	4413      	add	r3, r2
 800633e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	7e7b      	ldrb	r3, [r7, #25]
 8006346:	075b      	lsls	r3, r3, #29
 8006348:	69f9      	ldr	r1, [r7, #28]
 800634a:	0148      	lsls	r0, r1, #5
 800634c:	6a39      	ldr	r1, [r7, #32]
 800634e:	4401      	add	r1, r0
 8006350:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006354:	4313      	orrs	r3, r2
 8006356:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	4413      	add	r3, r2
 8006360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a41      	ldr	r2, [pc, #260]	; (800646c <USB_HC_StartXfer+0x284>)
 8006368:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800636a:	4b40      	ldr	r3, [pc, #256]	; (800646c <USB_HC_StartXfer+0x284>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006372:	4a3e      	ldr	r2, [pc, #248]	; (800646c <USB_HC_StartXfer+0x284>)
 8006374:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	78db      	ldrb	r3, [r3, #3]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d006      	beq.n	800638c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800637e:	4b3b      	ldr	r3, [pc, #236]	; (800646c <USB_HC_StartXfer+0x284>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006386:	4a39      	ldr	r2, [pc, #228]	; (800646c <USB_HC_StartXfer+0x284>)
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	e005      	b.n	8006398 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800638c:	4b37      	ldr	r3, [pc, #220]	; (800646c <USB_HC_StartXfer+0x284>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006394:	4a35      	ldr	r2, [pc, #212]	; (800646c <USB_HC_StartXfer+0x284>)
 8006396:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006398:	4b34      	ldr	r3, [pc, #208]	; (800646c <USB_HC_StartXfer+0x284>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063a0:	4a32      	ldr	r2, [pc, #200]	; (800646c <USB_HC_StartXfer+0x284>)
 80063a2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b0:	461a      	mov	r2, r3
 80063b2:	4b2e      	ldr	r3, [pc, #184]	; (800646c <USB_HC_StartXfer+0x284>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	e04e      	b.n	8006460 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	78db      	ldrb	r3, [r3, #3]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d149      	bne.n	800645e <USB_HC_StartXfer+0x276>
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d045      	beq.n	800645e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	79db      	ldrb	r3, [r3, #7]
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d830      	bhi.n	800643c <USB_HC_StartXfer+0x254>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <USB_HC_StartXfer+0x1f8>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	08006415 	.word	0x08006415
 80063e8:	080063f1 	.word	0x080063f1
 80063ec:	08006415 	.word	0x08006415
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	3303      	adds	r3, #3
 80063f6:	089b      	lsrs	r3, r3, #2
 80063f8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063fa:	8afa      	ldrh	r2, [r7, #22]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	b29b      	uxth	r3, r3
 8006402:	429a      	cmp	r2, r3
 8006404:	d91c      	bls.n	8006440 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	f043 0220 	orr.w	r2, r3, #32
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	619a      	str	r2, [r3, #24]
        }
        break;
 8006412:	e015      	b.n	8006440 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	3303      	adds	r3, #3
 800641a:	089b      	lsrs	r3, r3, #2
 800641c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800641e:	8afa      	ldrh	r2, [r7, #22]
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	b29b      	uxth	r3, r3
 800642a:	429a      	cmp	r2, r3
 800642c:	d90a      	bls.n	8006444 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	619a      	str	r2, [r3, #24]
        }
        break;
 800643a:	e003      	b.n	8006444 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800643c:	bf00      	nop
 800643e:	e002      	b.n	8006446 <USB_HC_StartXfer+0x25e>
        break;
 8006440:	bf00      	nop
 8006442:	e000      	b.n	8006446 <USB_HC_StartXfer+0x25e>
        break;
 8006444:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	68d9      	ldr	r1, [r3, #12]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	785a      	ldrb	r2, [r3, #1]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	b29b      	uxth	r3, r3
 8006454:	2000      	movs	r0, #0
 8006456:	9000      	str	r0, [sp, #0]
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f7ff fb91 	bl	8005b80 <USB_WritePacket>
  }

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3728      	adds	r7, #40	; 0x28
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	1ff80000 	.word	0x1ff80000
 800646c:	20000b74 	.word	0x20000b74

08006470 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	b29b      	uxth	r3, r3
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006492:	b480      	push	{r7}
 8006494:	b087      	sub	sp, #28
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	460b      	mov	r3, r1
 800649c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	0c9b      	lsrs	r3, r3, #18
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <USB_HC_Halt+0x3a>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d16c      	bne.n	80065a6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	0151      	lsls	r1, r2, #5
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	440a      	add	r2, r1
 80064e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ea:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d143      	bne.n	8006580 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	440a      	add	r2, r1
 800650e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006512:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006516:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	4413      	add	r3, r2
 8006520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	440a      	add	r2, r1
 800652e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006536:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4413      	add	r3, r2
 8006540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	440a      	add	r2, r1
 800654e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006552:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006556:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	3301      	adds	r3, #1
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006564:	d81d      	bhi.n	80065a2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	4413      	add	r3, r2
 800656e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800657c:	d0ec      	beq.n	8006558 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800657e:	e080      	b.n	8006682 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	4413      	add	r3, r2
 8006588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	0151      	lsls	r1, r2, #5
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	440a      	add	r2, r1
 8006596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800659a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800659e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80065a0:	e06f      	b.n	8006682 <USB_HC_Halt+0x1f0>
          break;
 80065a2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80065a4:	e06d      	b.n	8006682 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065c4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d143      	bne.n	800665e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	0151      	lsls	r1, r2, #5
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	440a      	add	r2, r1
 80065ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065f4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	0151      	lsls	r1, r2, #5
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	440a      	add	r2, r1
 800660c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006614:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4413      	add	r3, r2
 800661e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	0151      	lsls	r1, r2, #5
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	440a      	add	r2, r1
 800662c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006630:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006634:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	3301      	adds	r3, #1
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006642:	d81d      	bhi.n	8006680 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800665a:	d0ec      	beq.n	8006636 <USB_HC_Halt+0x1a4>
 800665c:	e011      	b.n	8006682 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	4413      	add	r3, r2
 8006666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	440a      	add	r2, r1
 8006674:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800667c:	6013      	str	r3, [r2, #0]
 800667e:	e000      	b.n	8006682 <USB_HC_Halt+0x1f0>
          break;
 8006680:	bf00      	nop
    }
  }

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066a4:	2301      	movs	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	04da      	lsls	r2, r3, #19
 80066ac:	4b15      	ldr	r3, [pc, #84]	; (8006704 <USB_DoPing+0x74>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ee:	461a      	mov	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	1ff80000 	.word	0x1ff80000

08006708 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff f9ad 	bl	8005a78 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800671e:	2110      	movs	r1, #16
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7ff f9e5 	bl	8005af0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff fa08 	bl	8005b3c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800672c:	2300      	movs	r3, #0
 800672e:	613b      	str	r3, [r7, #16]
 8006730:	e01f      	b.n	8006772 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006748:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006750:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006758:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006766:	461a      	mov	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	3301      	adds	r3, #1
 8006770:	613b      	str	r3, [r7, #16]
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2b0f      	cmp	r3, #15
 8006776:	d9dc      	bls.n	8006732 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006778:	2300      	movs	r3, #0
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	e034      	b.n	80067e8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4413      	add	r3, r2
 8006786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006794:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800679c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067a4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b2:	461a      	mov	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	3301      	adds	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067c4:	d80c      	bhi.n	80067e0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067dc:	d0ec      	beq.n	80067b8 <USB_StopHost+0xb0>
 80067de:	e000      	b.n	80067e2 <USB_StopHost+0xda>
        break;
 80067e0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	3301      	adds	r3, #1
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	2b0f      	cmp	r3, #15
 80067ec:	d9c7      	bls.n	800677e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067f4:	461a      	mov	r2, r3
 80067f6:	f04f 33ff 	mov.w	r3, #4294967295
 80067fa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006802:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff f926 	bl	8005a56 <USB_EnableGlobalInt>

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006828:	2302      	movs	r3, #2
 800682a:	e044      	b.n	80068b6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	79fa      	ldrb	r2, [r7, #7]
 8006830:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f841 	bl	80068cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006878:	2200      	movs	r2, #0
 800687a:	2104      	movs	r1, #4
 800687c:	2010      	movs	r0, #16
 800687e:	f002 f949 	bl	8008b14 <osMessageQueueNew>
 8006882:	4602      	mov	r2, r0
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800688a:	4b0d      	ldr	r3, [pc, #52]	; (80068c0 <USBH_Init+0xac>)
 800688c:	4a0d      	ldr	r2, [pc, #52]	; (80068c4 <USBH_Init+0xb0>)
 800688e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <USBH_Init+0xac>)
 8006892:	2280      	movs	r2, #128	; 0x80
 8006894:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006896:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <USBH_Init+0xac>)
 8006898:	2218      	movs	r2, #24
 800689a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800689c:	4a08      	ldr	r2, [pc, #32]	; (80068c0 <USBH_Init+0xac>)
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	4809      	ldr	r0, [pc, #36]	; (80068c8 <USBH_Init+0xb4>)
 80068a2:	f001 fd8d 	bl	80083c0 <osThreadNew>
 80068a6:	4602      	mov	r2, r0
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f005 fdfa 	bl	800c4a8 <USBH_LL_Init>

  return USBH_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	2000573c 	.word	0x2000573c
 80068c4:	0800d340 	.word	0x0800d340
 80068c8:	08007535 	.word	0x08007535

080068cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e009      	b.n	80068f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	33e0      	adds	r3, #224	; 0xe0
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	2200      	movs	r2, #0
 80068ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3301      	adds	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b0e      	cmp	r3, #14
 80068f6:	d9f2      	bls.n	80068de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	e009      	b.n	8006912 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006908:	2200      	movs	r2, #0
 800690a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006918:	d3f1      	bcc.n	80068fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2240      	movs	r2, #64	; 0x40
 800693e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d016      	beq.n	80069b6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10e      	bne.n	80069b0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006998:	1c59      	adds	r1, r3, #1
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	33de      	adds	r3, #222	; 0xde
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
 80069ae:	e004      	b.n	80069ba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80069b0:	2302      	movs	r3, #2
 80069b2:	73fb      	strb	r3, [r7, #15]
 80069b4:	e001      	b.n	80069ba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80069b6:	2302      	movs	r3, #2
 80069b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80069de:	78fa      	ldrb	r2, [r7, #3]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d204      	bcs.n	80069ee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	78fa      	ldrb	r2, [r7, #3]
 80069e8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80069ec:	e001      	b.n	80069f2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80069ee:	2302      	movs	r3, #2
 80069f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	4608      	mov	r0, r1
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4603      	mov	r3, r0
 8006a10:	70fb      	strb	r3, [r7, #3]
 8006a12:	460b      	mov	r3, r1
 8006a14:	70bb      	strb	r3, [r7, #2]
 8006a16:	4613      	mov	r3, r2
 8006a18:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006a28:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a2a:	e025      	b.n	8006a78 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
 8006a2e:	221a      	movs	r2, #26
 8006a30:	fb02 f303 	mul.w	r3, r2, r3
 8006a34:	3308      	adds	r3, #8
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4413      	add	r3, r2
 8006a3a:	3302      	adds	r3, #2
 8006a3c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	795b      	ldrb	r3, [r3, #5]
 8006a42:	78fa      	ldrb	r2, [r7, #3]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d002      	beq.n	8006a4e <USBH_FindInterface+0x4e>
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	2bff      	cmp	r3, #255	; 0xff
 8006a4c:	d111      	bne.n	8006a72 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a52:	78ba      	ldrb	r2, [r7, #2]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d002      	beq.n	8006a5e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a58:	78bb      	ldrb	r3, [r7, #2]
 8006a5a:	2bff      	cmp	r3, #255	; 0xff
 8006a5c:	d109      	bne.n	8006a72 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a62:	787a      	ldrb	r2, [r7, #1]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d002      	beq.n	8006a6e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a68:	787b      	ldrb	r3, [r7, #1]
 8006a6a:	2bff      	cmp	r3, #255	; 0xff
 8006a6c:	d101      	bne.n	8006a72 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
 8006a70:	e006      	b.n	8006a80 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
 8006a74:	3301      	adds	r3, #1
 8006a76:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d9d6      	bls.n	8006a2c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006a7e:	23ff      	movs	r3, #255	; 0xff
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f005 fd43 	bl	800c520 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f005 fe5c 	bl	800c75a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af04      	add	r7, sp, #16
 8006ab2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d102      	bne.n	8006ace <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2203      	movs	r2, #3
 8006acc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b0b      	cmp	r3, #11
 8006ad6:	f200 823c 	bhi.w	8006f52 <USBH_Process+0x4a6>
 8006ada:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <USBH_Process+0x34>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006b11 	.word	0x08006b11
 8006ae4:	08006b5f 	.word	0x08006b5f
 8006ae8:	08006be3 	.word	0x08006be3
 8006aec:	08006ed1 	.word	0x08006ed1
 8006af0:	08006f53 	.word	0x08006f53
 8006af4:	08006ca3 	.word	0x08006ca3
 8006af8:	08006e5b 	.word	0x08006e5b
 8006afc:	08006cf5 	.word	0x08006cf5
 8006b00:	08006d31 	.word	0x08006d31
 8006b04:	08006d6b 	.word	0x08006d6b
 8006b08:	08006db3 	.word	0x08006db3
 8006b0c:	08006eb9 	.word	0x08006eb9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 821c 	beq.w	8006f56 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006b24:	20c8      	movs	r0, #200	; 0xc8
 8006b26:	f005 fe62 	bl	800c7ee <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f005 fd55 	bl	800c5da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006b54:	2300      	movs	r3, #0
 8006b56:	2200      	movs	r2, #0
 8006b58:	f002 f862 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006b5c:	e1fb      	b.n	8006f56 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d107      	bne.n	8006b78 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	e025      	b.n	8006bc4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b82:	d914      	bls.n	8006bae <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d903      	bls.n	8006ba6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	220d      	movs	r2, #13
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	e00e      	b.n	8006bc4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e00a      	b.n	8006bc4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bb4:	f103 020a 	add.w	r2, r3, #10
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006bbe:	200a      	movs	r0, #10
 8006bc0:	f005 fe15 	bl	800c7ee <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006bd8:	2300      	movs	r3, #0
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f002 f820 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      break;
 8006be0:	e1c0      	b.n	8006f64 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bf2:	2104      	movs	r1, #4
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006bf8:	2064      	movs	r0, #100	; 0x64
 8006bfa:	f005 fdf8 	bl	800c7ee <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f005 fcc4 	bl	800c58c <USBH_LL_GetSpeed>
 8006c04:	4603      	mov	r3, r0
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2205      	movs	r2, #5
 8006c12:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006c14:	2100      	movs	r1, #0
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f001 fafd 	bl	8008216 <USBH_AllocPipe>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	461a      	mov	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006c24:	2180      	movs	r1, #128	; 0x80
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 faf5 	bl	8008216 <USBH_AllocPipe>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	461a      	mov	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	7919      	ldrb	r1, [r3, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006c48:	b292      	uxth	r2, r2
 8006c4a:	9202      	str	r2, [sp, #8]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	9201      	str	r2, [sp, #4]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	4603      	mov	r3, r0
 8006c54:	2280      	movs	r2, #128	; 0x80
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 faae 	bl	80081b8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	7959      	ldrb	r1, [r3, #5]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006c70:	b292      	uxth	r2, r2
 8006c72:	9202      	str	r2, [sp, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	9201      	str	r2, [sp, #4]
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fa9a 	bl	80081b8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006c98:	2300      	movs	r3, #0
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f001 ffc0 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      break;
 8006ca0:	e160      	b.n	8006f64 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f964 	bl	8006f70 <USBH_HandleEnum>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 8152 	bne.w	8006f5a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d103      	bne.n	8006cd0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2208      	movs	r2, #8
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	e002      	b.n	8006cd6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2207      	movs	r2, #7
 8006cd4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2205      	movs	r2, #5
 8006cda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006cea:	2300      	movs	r3, #0
 8006cec:	2200      	movs	r2, #0
 8006cee:	f001 ff97 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8006cf2:	e132      	b.n	8006f5a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 812f 	beq.w	8006f5e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d06:	2101      	movs	r1, #1
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2208      	movs	r2, #8
 8006d10:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2205      	movs	r2, #5
 8006d16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d26:	2300      	movs	r3, #0
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f001 ff79 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8006d2e:	e116      	b.n	8006f5e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fcf8 	bl	8007730 <USBH_SetCfg>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d102      	bne.n	8006d4c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2209      	movs	r2, #9
 8006d4a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006d60:	2300      	movs	r3, #0
 8006d62:	2200      	movs	r2, #0
 8006d64:	f001 ff5c 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      break;
 8006d68:	e0fc      	b.n	8006f64 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006d70:	f003 0320 	and.w	r3, r3, #32
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006d78:	2101      	movs	r1, #1
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fcfb 	bl	8007776 <USBH_SetFeature>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	220a      	movs	r2, #10
 8006d8a:	701a      	strb	r2, [r3, #0]
 8006d8c:	e002      	b.n	8006d94 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	220a      	movs	r2, #10
 8006d92:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006da8:	2300      	movs	r3, #0
 8006daa:	2200      	movs	r2, #0
 8006dac:	f001 ff38 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      break;
 8006db0:	e0d8      	b.n	8006f64 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d03f      	beq.n	8006e3c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
 8006dc8:	e016      	b.n	8006df8 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006dca:	7bfa      	ldrb	r2, [r7, #15]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	32de      	adds	r2, #222	; 0xde
 8006dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd4:	791a      	ldrb	r2, [r3, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d108      	bne.n	8006df2 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006de0:	7bfa      	ldrb	r2, [r7, #15]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	32de      	adds	r2, #222	; 0xde
 8006de6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006df0:	e005      	b.n	8006dfe <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	3301      	adds	r3, #1
 8006df6:	73fb      	strb	r3, [r7, #15]
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0e5      	beq.n	8006dca <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d016      	beq.n	8006e36 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	4798      	blx	r3
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d109      	bne.n	8006e2e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2206      	movs	r2, #6
 8006e1e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e26:	2103      	movs	r1, #3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
 8006e2c:	e006      	b.n	8006e3c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	220d      	movs	r2, #13
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	e002      	b.n	8006e3c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	220d      	movs	r2, #13
 8006e3a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2205      	movs	r2, #5
 8006e40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006e50:	2300      	movs	r3, #0
 8006e52:	2200      	movs	r2, #0
 8006e54:	f001 fee4 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      break;
 8006e58:	e084      	b.n	8006f64 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d017      	beq.n	8006e94 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	4798      	blx	r3
 8006e70:	4603      	mov	r3, r0
 8006e72:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d103      	bne.n	8006e84 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	220b      	movs	r2, #11
 8006e80:	701a      	strb	r2, [r3, #0]
 8006e82:	e00a      	b.n	8006e9a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d106      	bne.n	8006e9a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	220d      	movs	r2, #13
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	e002      	b.n	8006e9a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	220d      	movs	r2, #13
 8006e98:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2205      	movs	r2, #5
 8006e9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f001 feb5 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      break;
 8006eb6:	e055      	b.n	8006f64 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d04f      	beq.n	8006f62 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	4798      	blx	r3
      }
      break;
 8006ece:	e048      	b.n	8006f62 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7ff fcf7 	bl	80068cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d009      	beq.n	8006efc <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d005      	beq.n	8006f12 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f0c:	2105      	movs	r1, #5
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d107      	bne.n	8006f2e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff fdb0 	bl	8006a8c <USBH_Start>
 8006f2c:	e002      	b.n	8006f34 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f005 faf6 	bl	800c520 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8006f48:	2300      	movs	r3, #0
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f001 fe68 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      break;
 8006f50:	e008      	b.n	8006f64 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8006f52:	bf00      	nop
 8006f54:	e006      	b.n	8006f64 <USBH_Process+0x4b8>
      break;
 8006f56:	bf00      	nop
 8006f58:	e004      	b.n	8006f64 <USBH_Process+0x4b8>
      break;
 8006f5a:	bf00      	nop
 8006f5c:	e002      	b.n	8006f64 <USBH_Process+0x4b8>
    break;
 8006f5e:	bf00      	nop
 8006f60:	e000      	b.n	8006f64 <USBH_Process+0x4b8>
      break;
 8006f62:	bf00      	nop
  }
  return USBH_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop

08006f70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af04      	add	r7, sp, #16
 8006f76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	785b      	ldrb	r3, [r3, #1]
 8006f84:	2b07      	cmp	r3, #7
 8006f86:	f200 8208 	bhi.w	800739a <USBH_HandleEnum+0x42a>
 8006f8a:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <USBH_HandleEnum+0x20>)
 8006f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f90:	08006fb1 	.word	0x08006fb1
 8006f94:	0800706f 	.word	0x0800706f
 8006f98:	080070d9 	.word	0x080070d9
 8006f9c:	08007167 	.word	0x08007167
 8006fa0:	080071d1 	.word	0x080071d1
 8006fa4:	08007241 	.word	0x08007241
 8006fa8:	080072dd 	.word	0x080072dd
 8006fac:	0800735b 	.word	0x0800735b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006fb0:	2108      	movs	r1, #8
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 faec 	bl	8007590 <USBH_Get_DevDesc>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d130      	bne.n	8007024 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	7919      	ldrb	r1, [r3, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006fe6:	b292      	uxth	r2, r2
 8006fe8:	9202      	str	r2, [sp, #8]
 8006fea:	2200      	movs	r2, #0
 8006fec:	9201      	str	r2, [sp, #4]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2280      	movs	r2, #128	; 0x80
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 f8df 	bl	80081b8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	7959      	ldrb	r1, [r3, #5]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800700e:	b292      	uxth	r2, r2
 8007010:	9202      	str	r2, [sp, #8]
 8007012:	2200      	movs	r2, #0
 8007014:	9201      	str	r2, [sp, #4]
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	4603      	mov	r3, r0
 800701a:	2200      	movs	r2, #0
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 f8cb 	bl	80081b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007022:	e1bc      	b.n	800739e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	2b03      	cmp	r3, #3
 8007028:	f040 81b9 	bne.w	800739e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007032:	3301      	adds	r3, #1
 8007034:	b2da      	uxtb	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007042:	2b03      	cmp	r3, #3
 8007044:	d903      	bls.n	800704e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	220d      	movs	r2, #13
 800704a:	701a      	strb	r2, [r3, #0]
      break;
 800704c:	e1a7      	b.n	800739e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	795b      	ldrb	r3, [r3, #5]
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 f8ff 	bl	8008258 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	791b      	ldrb	r3, [r3, #4]
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 f8f9 	bl	8008258 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
      break;
 800706c:	e197      	b.n	800739e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800706e:	2112      	movs	r1, #18
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fa8d 	bl	8007590 <USBH_Get_DevDesc>
 8007076:	4603      	mov	r3, r0
 8007078:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d103      	bne.n	8007088 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007086:	e18c      	b.n	80073a2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	2b03      	cmp	r3, #3
 800708c:	f040 8189 	bne.w	80073a2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007096:	3301      	adds	r3, #1
 8007098:	b2da      	uxtb	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d903      	bls.n	80070b2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	220d      	movs	r2, #13
 80070ae:	701a      	strb	r2, [r3, #0]
      break;
 80070b0:	e177      	b.n	80073a2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	795b      	ldrb	r3, [r3, #5]
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 f8cd 	bl	8008258 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	791b      	ldrb	r3, [r3, #4]
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 f8c7 	bl	8008258 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	701a      	strb	r2, [r3, #0]
      break;
 80070d6:	e164      	b.n	80073a2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80070d8:	2101      	movs	r1, #1
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fb04 	bl	80076e8 <USBH_SetAddress>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d132      	bne.n	8007150 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80070ea:	2002      	movs	r0, #2
 80070ec:	f005 fb7f 	bl	800c7ee <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2203      	movs	r2, #3
 80070fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	7919      	ldrb	r1, [r3, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007112:	b292      	uxth	r2, r2
 8007114:	9202      	str	r2, [sp, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	9201      	str	r2, [sp, #4]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	4603      	mov	r3, r0
 800711e:	2280      	movs	r2, #128	; 0x80
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 f849 	bl	80081b8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	7959      	ldrb	r1, [r3, #5]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800713a:	b292      	uxth	r2, r2
 800713c:	9202      	str	r2, [sp, #8]
 800713e:	2200      	movs	r2, #0
 8007140:	9201      	str	r2, [sp, #4]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	4603      	mov	r3, r0
 8007146:	2200      	movs	r2, #0
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 f835 	bl	80081b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800714e:	e12a      	b.n	80073a6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b03      	cmp	r3, #3
 8007154:	f040 8127 	bne.w	80073a6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	220d      	movs	r2, #13
 800715c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	705a      	strb	r2, [r3, #1]
      break;
 8007164:	e11f      	b.n	80073a6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007166:	2109      	movs	r1, #9
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fa39 	bl	80075e0 <USBH_Get_CfgDesc>
 800716e:	4603      	mov	r3, r0
 8007170:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d103      	bne.n	8007180 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2204      	movs	r2, #4
 800717c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800717e:	e114      	b.n	80073aa <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	2b03      	cmp	r3, #3
 8007184:	f040 8111 	bne.w	80073aa <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800718e:	3301      	adds	r3, #1
 8007190:	b2da      	uxtb	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d903      	bls.n	80071aa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	220d      	movs	r2, #13
 80071a6:	701a      	strb	r2, [r3, #0]
      break;
 80071a8:	e0ff      	b.n	80073aa <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	795b      	ldrb	r3, [r3, #5]
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 f851 	bl	8008258 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	791b      	ldrb	r3, [r3, #4]
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 f84b 	bl	8008258 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	701a      	strb	r2, [r3, #0]
      break;
 80071ce:	e0ec      	b.n	80073aa <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fa01 	bl	80075e0 <USBH_Get_CfgDesc>
 80071de:	4603      	mov	r3, r0
 80071e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d103      	bne.n	80071f0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2205      	movs	r2, #5
 80071ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071ee:	e0de      	b.n	80073ae <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	f040 80db 	bne.w	80073ae <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071fe:	3301      	adds	r3, #1
 8007200:	b2da      	uxtb	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800720e:	2b03      	cmp	r3, #3
 8007210:	d903      	bls.n	800721a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	220d      	movs	r2, #13
 8007216:	701a      	strb	r2, [r3, #0]
      break;
 8007218:	e0c9      	b.n	80073ae <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	795b      	ldrb	r3, [r3, #5]
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 f819 	bl	8008258 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	791b      	ldrb	r3, [r3, #4]
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 f813 	bl	8008258 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	701a      	strb	r2, [r3, #0]
      break;
 800723e:	e0b6      	b.n	80073ae <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007246:	2b00      	cmp	r3, #0
 8007248:	d036      	beq.n	80072b8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007256:	23ff      	movs	r3, #255	; 0xff
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f9e5 	bl	8007628 <USBH_Get_StringDesc>
 800725e:	4603      	mov	r3, r0
 8007260:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d111      	bne.n	800728c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2206      	movs	r2, #6
 800726c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2205      	movs	r2, #5
 8007272:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007282:	2300      	movs	r3, #0
 8007284:	2200      	movs	r2, #0
 8007286:	f001 fccb 	bl	8008c20 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800728a:	e092      	b.n	80073b2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	2b03      	cmp	r3, #3
 8007290:	f040 808f 	bne.w	80073b2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2206      	movs	r2, #6
 8007298:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2205      	movs	r2, #5
 800729e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80072ae:	2300      	movs	r3, #0
 80072b0:	2200      	movs	r2, #0
 80072b2:	f001 fcb5 	bl	8008c20 <osMessageQueuePut>
      break;
 80072b6:	e07c      	b.n	80073b2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2206      	movs	r2, #6
 80072bc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2205      	movs	r2, #5
 80072c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80072d2:	2300      	movs	r3, #0
 80072d4:	2200      	movs	r2, #0
 80072d6:	f001 fca3 	bl	8008c20 <osMessageQueuePut>
      break;
 80072da:	e06a      	b.n	80073b2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d027      	beq.n	8007336 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072f2:	23ff      	movs	r3, #255	; 0xff
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f997 	bl	8007628 <USBH_Get_StringDesc>
 80072fa:	4603      	mov	r3, r0
 80072fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d103      	bne.n	800730c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2207      	movs	r2, #7
 8007308:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800730a:	e054      	b.n	80073b6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800730c:	7bbb      	ldrb	r3, [r7, #14]
 800730e:	2b03      	cmp	r3, #3
 8007310:	d151      	bne.n	80073b6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2207      	movs	r2, #7
 8007316:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2205      	movs	r2, #5
 800731c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800732c:	2300      	movs	r3, #0
 800732e:	2200      	movs	r2, #0
 8007330:	f001 fc76 	bl	8008c20 <osMessageQueuePut>
      break;
 8007334:	e03f      	b.n	80073b6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2207      	movs	r2, #7
 800733a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2205      	movs	r2, #5
 8007340:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007350:	2300      	movs	r3, #0
 8007352:	2200      	movs	r2, #0
 8007354:	f001 fc64 	bl	8008c20 <osMessageQueuePut>
      break;
 8007358:	e02d      	b.n	80073b6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007360:	2b00      	cmp	r3, #0
 8007362:	d017      	beq.n	8007394 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007370:	23ff      	movs	r3, #255	; 0xff
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f958 	bl	8007628 <USBH_Get_StringDesc>
 8007378:	4603      	mov	r3, r0
 800737a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d102      	bne.n	8007388 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007386:	e018      	b.n	80073ba <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	2b03      	cmp	r3, #3
 800738c:	d115      	bne.n	80073ba <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
      break;
 8007392:	e012      	b.n	80073ba <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	73fb      	strb	r3, [r7, #15]
      break;
 8007398:	e00f      	b.n	80073ba <USBH_HandleEnum+0x44a>

    default:
      break;
 800739a:	bf00      	nop
 800739c:	e00e      	b.n	80073bc <USBH_HandleEnum+0x44c>
      break;
 800739e:	bf00      	nop
 80073a0:	e00c      	b.n	80073bc <USBH_HandleEnum+0x44c>
      break;
 80073a2:	bf00      	nop
 80073a4:	e00a      	b.n	80073bc <USBH_HandleEnum+0x44c>
      break;
 80073a6:	bf00      	nop
 80073a8:	e008      	b.n	80073bc <USBH_HandleEnum+0x44c>
      break;
 80073aa:	bf00      	nop
 80073ac:	e006      	b.n	80073bc <USBH_HandleEnum+0x44c>
      break;
 80073ae:	bf00      	nop
 80073b0:	e004      	b.n	80073bc <USBH_HandleEnum+0x44c>
      break;
 80073b2:	bf00      	nop
 80073b4:	e002      	b.n	80073bc <USBH_HandleEnum+0x44c>
      break;
 80073b6:	bf00      	nop
 80073b8:	e000      	b.n	80073bc <USBH_HandleEnum+0x44c>
      break;
 80073ba:	bf00      	nop
  }
  return Status;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop

080073c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f804 	bl	800740a <USBH_HandleSof>
}
 8007402:	bf00      	nop
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b082      	sub	sp, #8
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b0b      	cmp	r3, #11
 800741a:	d10a      	bne.n	8007432 <USBH_HandleSof+0x28>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
  }
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800745e:	2300      	movs	r3, #0
 8007460:	2200      	movs	r2, #0
 8007462:	f001 fbdd 	bl	8008c20 <osMessageQueuePut>
#endif
#endif

  return;
 8007466:	bf00      	nop
}
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800747e:	bf00      	nop
}
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80074be:	2300      	movs	r3, #0
 80074c0:	2200      	movs	r2, #0
 80074c2:	f001 fbad 	bl	8008c20 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f005 f830 	bl	800c556 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	791b      	ldrb	r3, [r3, #4]
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 feab 	bl	8008258 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	795b      	ldrb	r3, [r3, #5]
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fea5 	bl	8008258 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007522:	2300      	movs	r3, #0
 8007524:	2200      	movs	r2, #0
 8007526:	f001 fb7b 	bl	8008c20 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007548:	f04f 33ff 	mov.w	r3, #4294967295
 800754c:	2200      	movs	r2, #0
 800754e:	f001 fbdb 	bl	8008d08 <osMessageQueueGet>
 8007552:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1f0      	bne.n	800753c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff faa6 	bl	8006aac <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007560:	e7ec      	b.n	800753c <USBH_Process_OS+0x8>

08007562 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800757e:	2300      	movs	r3, #0
 8007580:	2200      	movs	r2, #0
 8007582:	f001 fb4d 	bl	8008c20 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af02      	add	r7, sp, #8
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80075a2:	78fb      	ldrb	r3, [r7, #3]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	4613      	mov	r3, r2
 80075aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075ae:	2100      	movs	r1, #0
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f864 	bl	800767e <USBH_GetDescriptor>
 80075b6:	4603      	mov	r3, r0
 80075b8:	73fb      	strb	r3, [r7, #15]
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075cc:	78fa      	ldrb	r2, [r7, #3]
 80075ce:	b292      	uxth	r2, r2
 80075d0:	4619      	mov	r1, r3
 80075d2:	f000 f918 	bl	8007806 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	331c      	adds	r3, #28
 80075f0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80075f2:	887b      	ldrh	r3, [r7, #2]
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075fc:	2100      	movs	r1, #0
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f83d 	bl	800767e <USBH_GetDescriptor>
 8007604:	4603      	mov	r3, r0
 8007606:	72fb      	strb	r3, [r7, #11]
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d107      	bne.n	800761e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007614:	887a      	ldrh	r2, [r7, #2]
 8007616:	68f9      	ldr	r1, [r7, #12]
 8007618:	4618      	mov	r0, r3
 800761a:	f000 f964 	bl	80078e6 <USBH_ParseCfgDesc>
  }

  return status;
 800761e:	7afb      	ldrb	r3, [r7, #11]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af02      	add	r7, sp, #8
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	607a      	str	r2, [r7, #4]
 8007632:	461a      	mov	r2, r3
 8007634:	460b      	mov	r3, r1
 8007636:	72fb      	strb	r3, [r7, #11]
 8007638:	4613      	mov	r3, r2
 800763a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800763c:	7afb      	ldrb	r3, [r7, #11]
 800763e:	b29b      	uxth	r3, r3
 8007640:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007644:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800764c:	893b      	ldrh	r3, [r7, #8]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	460b      	mov	r3, r1
 8007652:	2100      	movs	r1, #0
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 f812 	bl	800767e <USBH_GetDescriptor>
 800765a:	4603      	mov	r3, r0
 800765c:	75fb      	strb	r3, [r7, #23]
 800765e:	7dfb      	ldrb	r3, [r7, #23]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d107      	bne.n	8007674 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800766a:	893a      	ldrh	r2, [r7, #8]
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fa37 	bl	8007ae2 <USBH_ParseStringDesc>
  }

  return status;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	607b      	str	r3, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	72fb      	strb	r3, [r7, #11]
 800768c:	4613      	mov	r3, r2
 800768e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	789b      	ldrb	r3, [r3, #2]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d11c      	bne.n	80076d2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2206      	movs	r2, #6
 80076a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	893a      	ldrh	r2, [r7, #8]
 80076ae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80076b0:	893b      	ldrh	r3, [r7, #8]
 80076b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ba:	d104      	bne.n	80076c6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f240 4209 	movw	r2, #1033	; 0x409
 80076c2:	829a      	strh	r2, [r3, #20]
 80076c4:	e002      	b.n	80076cc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8b3a      	ldrh	r2, [r7, #24]
 80076d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80076d2:	8b3b      	ldrh	r3, [r7, #24]
 80076d4:	461a      	mov	r2, r3
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fa50 	bl	8007b7e <USBH_CtlReq>
 80076de:	4603      	mov	r3, r0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	789b      	ldrb	r3, [r3, #2]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d10f      	bne.n	800771c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2205      	movs	r2, #5
 8007706:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	b29a      	uxth	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800771c:	2200      	movs	r2, #0
 800771e:	2100      	movs	r1, #0
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fa2c 	bl	8007b7e <USBH_CtlReq>
 8007726:	4603      	mov	r3, r0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	789b      	ldrb	r3, [r3, #2]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d10e      	bne.n	8007762 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2209      	movs	r2, #9
 800774e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	887a      	ldrh	r2, [r7, #2]
 8007754:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007762:	2200      	movs	r2, #0
 8007764:	2100      	movs	r1, #0
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fa09 	bl	8007b7e <USBH_CtlReq>
 800776c:	4603      	mov	r3, r0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	789b      	ldrb	r3, [r3, #2]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d10f      	bne.n	80077aa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2203      	movs	r2, #3
 8007794:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007796:	78fb      	ldrb	r3, [r7, #3]
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80077aa:	2200      	movs	r2, #0
 80077ac:	2100      	movs	r1, #0
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f9e5 	bl	8007b7e <USBH_CtlReq>
 80077b4:	4603      	mov	r3, r0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	460b      	mov	r3, r1
 80077c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	789b      	ldrb	r3, [r3, #2]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d10f      	bne.n	80077f2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2202      	movs	r2, #2
 80077d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80077e4:	78fb      	ldrb	r3, [r7, #3]
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80077f2:	2200      	movs	r2, #0
 80077f4:	2100      	movs	r1, #0
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f9c1 	bl	8007b7e <USBH_CtlReq>
 80077fc:	4603      	mov	r3, r0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	4613      	mov	r3, r2
 8007812:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	781a      	ldrb	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	785a      	ldrb	r2, [r3, #1]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	3302      	adds	r3, #2
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	b29a      	uxth	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	3303      	adds	r3, #3
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	021b      	lsls	r3, r3, #8
 8007836:	b29b      	uxth	r3, r3
 8007838:	4313      	orrs	r3, r2
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	791a      	ldrb	r2, [r3, #4]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	795a      	ldrb	r2, [r3, #5]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	799a      	ldrb	r2, [r3, #6]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	79da      	ldrb	r2, [r3, #7]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	2b08      	cmp	r3, #8
 8007864:	d939      	bls.n	80078da <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	3308      	adds	r3, #8
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	b29a      	uxth	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	3309      	adds	r3, #9
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	b29b      	uxth	r3, r3
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	b29b      	uxth	r3, r3
 800787a:	4313      	orrs	r3, r2
 800787c:	b29a      	uxth	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	330a      	adds	r3, #10
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	b29a      	uxth	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	330b      	adds	r3, #11
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	b29b      	uxth	r3, r3
 8007892:	021b      	lsls	r3, r3, #8
 8007894:	b29b      	uxth	r3, r3
 8007896:	4313      	orrs	r3, r2
 8007898:	b29a      	uxth	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	330c      	adds	r3, #12
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	330d      	adds	r3, #13
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	4313      	orrs	r3, r2
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	7b9a      	ldrb	r2, [r3, #14]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	7bda      	ldrb	r2, [r3, #15]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	7c1a      	ldrb	r2, [r3, #16]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	7c5a      	ldrb	r2, [r3, #17]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	745a      	strb	r2, [r3, #17]
  }
}
 80078da:	bf00      	nop
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b08a      	sub	sp, #40	; 0x28
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	4613      	mov	r3, r2
 80078f2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	785a      	ldrb	r2, [r3, #1]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	3302      	adds	r3, #2
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	b29a      	uxth	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	3303      	adds	r3, #3
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	b29b      	uxth	r3, r3
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	b29b      	uxth	r3, r3
 800792c:	4313      	orrs	r3, r2
 800792e:	b29a      	uxth	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	791a      	ldrb	r2, [r3, #4]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	795a      	ldrb	r2, [r3, #5]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	799a      	ldrb	r2, [r3, #6]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	79da      	ldrb	r2, [r3, #7]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	7a1a      	ldrb	r2, [r3, #8]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800795c:	88fb      	ldrh	r3, [r7, #6]
 800795e:	2b09      	cmp	r3, #9
 8007960:	d95f      	bls.n	8007a22 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007962:	2309      	movs	r3, #9
 8007964:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007966:	2300      	movs	r3, #0
 8007968:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800796a:	e051      	b.n	8007a10 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800796c:	f107 0316 	add.w	r3, r7, #22
 8007970:	4619      	mov	r1, r3
 8007972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007974:	f000 f8e8 	bl	8007b48 <USBH_GetNextDesc>
 8007978:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b04      	cmp	r3, #4
 8007980:	d146      	bne.n	8007a10 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007982:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007986:	221a      	movs	r2, #26
 8007988:	fb02 f303 	mul.w	r3, r2, r3
 800798c:	3308      	adds	r3, #8
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	3302      	adds	r3, #2
 8007994:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007998:	69f8      	ldr	r0, [r7, #28]
 800799a:	f000 f846 	bl	8007a2a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079a8:	e022      	b.n	80079f0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079aa:	f107 0316 	add.w	r3, r7, #22
 80079ae:	4619      	mov	r1, r3
 80079b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079b2:	f000 f8c9 	bl	8007b48 <USBH_GetNextDesc>
 80079b6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	2b05      	cmp	r3, #5
 80079be:	d117      	bne.n	80079f0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80079c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80079c8:	3201      	adds	r2, #1
 80079ca:	00d2      	lsls	r2, r2, #3
 80079cc:	211a      	movs	r1, #26
 80079ce:	fb01 f303 	mul.w	r3, r1, r3
 80079d2:	4413      	add	r3, r2
 80079d4:	3308      	adds	r3, #8
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	4413      	add	r3, r2
 80079da:	3304      	adds	r3, #4
 80079dc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80079de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079e0:	69b8      	ldr	r0, [r7, #24]
 80079e2:	f000 f851 	bl	8007a88 <USBH_ParseEPDesc>
            ep_ix++;
 80079e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80079ea:	3301      	adds	r3, #1
 80079ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	791b      	ldrb	r3, [r3, #4]
 80079f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d204      	bcs.n	8007a06 <USBH_ParseCfgDesc+0x120>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	885a      	ldrh	r2, [r3, #2]
 8007a00:	8afb      	ldrh	r3, [r7, #22]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d8d1      	bhi.n	80079aa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007a06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d804      	bhi.n	8007a22 <USBH_ParseCfgDesc+0x13c>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	885a      	ldrh	r2, [r3, #2]
 8007a1c:	8afb      	ldrh	r3, [r7, #22]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d8a4      	bhi.n	800796c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007a22:	bf00      	nop
 8007a24:	3728      	adds	r7, #40	; 0x28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781a      	ldrb	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	785a      	ldrb	r2, [r3, #1]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	789a      	ldrb	r2, [r3, #2]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	78da      	ldrb	r2, [r3, #3]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	791a      	ldrb	r2, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	795a      	ldrb	r2, [r3, #5]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	799a      	ldrb	r2, [r3, #6]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	79da      	ldrb	r2, [r3, #7]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	7a1a      	ldrb	r2, [r3, #8]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	721a      	strb	r2, [r3, #8]
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781a      	ldrb	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	785a      	ldrb	r2, [r3, #1]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	789a      	ldrb	r2, [r3, #2]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	78da      	ldrb	r2, [r3, #3]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	3305      	adds	r3, #5
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	021b      	lsls	r3, r3, #8
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	799a      	ldrb	r2, [r3, #6]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	719a      	strb	r2, [r3, #6]
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b087      	sub	sp, #28
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	60f8      	str	r0, [r7, #12]
 8007aea:	60b9      	str	r1, [r7, #8]
 8007aec:	4613      	mov	r3, r2
 8007aee:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3301      	adds	r3, #1
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d120      	bne.n	8007b3c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	1e9a      	subs	r2, r3, #2
 8007b00:	88fb      	ldrh	r3, [r7, #6]
 8007b02:	4293      	cmp	r3, r2
 8007b04:	bf28      	it	cs
 8007b06:	4613      	movcs	r3, r2
 8007b08:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3302      	adds	r3, #2
 8007b0e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007b10:	2300      	movs	r3, #0
 8007b12:	82fb      	strh	r3, [r7, #22]
 8007b14:	e00b      	b.n	8007b2e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007b16:	8afb      	ldrh	r3, [r7, #22]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	781a      	ldrb	r2, [r3, #0]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	3301      	adds	r3, #1
 8007b26:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007b28:	8afb      	ldrh	r3, [r7, #22]
 8007b2a:	3302      	adds	r3, #2
 8007b2c:	82fb      	strh	r3, [r7, #22]
 8007b2e:	8afa      	ldrh	r2, [r7, #22]
 8007b30:	8abb      	ldrh	r3, [r7, #20]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d3ef      	bcc.n	8007b16 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	701a      	strb	r2, [r3, #0]
  }
}
 8007b3c:	bf00      	nop
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	881a      	ldrh	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	4413      	add	r3, r2
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b70:	68fb      	ldr	r3, [r7, #12]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b086      	sub	sp, #24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	789b      	ldrb	r3, [r3, #2]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d002      	beq.n	8007b9e <USBH_CtlReq+0x20>
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d01d      	beq.n	8007bd8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8007b9c:	e043      	b.n	8007c26 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	88fa      	ldrh	r2, [r7, #6]
 8007ba8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2201      	movs	r2, #1
 8007bae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2203      	movs	r2, #3
 8007bbe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f001 f825 	bl	8008c20 <osMessageQueuePut>
      break;
 8007bd6:	e026      	b.n	8007c26 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f829 	bl	8007c30 <USBH_HandleControl>
 8007bde:	4603      	mov	r3, r0
 8007be0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <USBH_CtlReq+0x70>
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d106      	bne.n	8007bfc <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	761a      	strb	r2, [r3, #24]
 8007bfa:	e005      	b.n	8007c08 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d102      	bne.n	8007c08 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f000 fffe 	bl	8008c20 <osMessageQueuePut>
      break;
 8007c24:	bf00      	nop
  }
  return status;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	7e1b      	ldrb	r3, [r3, #24]
 8007c44:	3b01      	subs	r3, #1
 8007c46:	2b0a      	cmp	r3, #10
 8007c48:	f200 8229 	bhi.w	800809e <USBH_HandleControl+0x46e>
 8007c4c:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <USBH_HandleControl+0x24>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007c81 	.word	0x08007c81
 8007c58:	08007c9b 	.word	0x08007c9b
 8007c5c:	08007d3d 	.word	0x08007d3d
 8007c60:	08007d63 	.word	0x08007d63
 8007c64:	08007def 	.word	0x08007def
 8007c68:	08007e19 	.word	0x08007e19
 8007c6c:	08007edb 	.word	0x08007edb
 8007c70:	08007efd 	.word	0x08007efd
 8007c74:	08007f8f 	.word	0x08007f8f
 8007c78:	08007fb5 	.word	0x08007fb5
 8007c7c:	08008047 	.word	0x08008047
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f103 0110 	add.w	r1, r3, #16
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	795b      	ldrb	r3, [r3, #5]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fa17 	bl	80080c0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2202      	movs	r2, #2
 8007c96:	761a      	strb	r2, [r3, #24]
      break;
 8007c98:	e20c      	b.n	80080b4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	795b      	ldrb	r3, [r3, #5]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f004 fd47 	bl	800c734 <USBH_LL_GetURBState>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d12c      	bne.n	8007d0a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	7c1b      	ldrb	r3, [r3, #16]
 8007cb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cb8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	8adb      	ldrh	r3, [r3, #22]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007cc2:	7b7b      	ldrb	r3, [r7, #13]
 8007cc4:	2b80      	cmp	r3, #128	; 0x80
 8007cc6:	d103      	bne.n	8007cd0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2203      	movs	r2, #3
 8007ccc:	761a      	strb	r2, [r3, #24]
 8007cce:	e00d      	b.n	8007cec <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2205      	movs	r2, #5
 8007cd4:	761a      	strb	r2, [r3, #24]
 8007cd6:	e009      	b.n	8007cec <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007cd8:	7b7b      	ldrb	r3, [r7, #13]
 8007cda:	2b80      	cmp	r3, #128	; 0x80
 8007cdc:	d103      	bne.n	8007ce6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2209      	movs	r2, #9
 8007ce2:	761a      	strb	r2, [r3, #24]
 8007ce4:	e002      	b.n	8007cec <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2207      	movs	r2, #7
 8007cea:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2203      	movs	r2, #3
 8007cf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d00:	2300      	movs	r3, #0
 8007d02:	2200      	movs	r2, #0
 8007d04:	f000 ff8c 	bl	8008c20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d08:	e1cb      	b.n	80080a2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d003      	beq.n	8007d18 <USBH_HandleControl+0xe8>
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	f040 81c5 	bne.w	80080a2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	220b      	movs	r2, #11
 8007d1c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2203      	movs	r2, #3
 8007d22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d32:	2300      	movs	r3, #0
 8007d34:	2200      	movs	r2, #0
 8007d36:	f000 ff73 	bl	8008c20 <osMessageQueuePut>
      break;
 8007d3a:	e1b2      	b.n	80080a2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6899      	ldr	r1, [r3, #8]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	899a      	ldrh	r2, [r3, #12]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	791b      	ldrb	r3, [r3, #4]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f9f2 	bl	800813e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	761a      	strb	r2, [r3, #24]
      break;
 8007d60:	e1a8      	b.n	80080b4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	791b      	ldrb	r3, [r3, #4]
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f004 fce3 	bl	800c734 <USBH_LL_GetURBState>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d110      	bne.n	8007d9a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2209      	movs	r2, #9
 8007d7c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2203      	movs	r2, #3
 8007d82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007d92:	2300      	movs	r3, #0
 8007d94:	2200      	movs	r2, #0
 8007d96:	f000 ff43 	bl	8008c20 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	2b05      	cmp	r3, #5
 8007d9e:	d110      	bne.n	8007dc2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007da0:	2303      	movs	r3, #3
 8007da2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2203      	movs	r2, #3
 8007da8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007db8:	2300      	movs	r3, #0
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f000 ff30 	bl	8008c20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007dc0:	e171      	b.n	80080a6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	f040 816e 	bne.w	80080a6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	220b      	movs	r2, #11
 8007dce:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007de4:	2300      	movs	r3, #0
 8007de6:	2200      	movs	r2, #0
 8007de8:	f000 ff1a 	bl	8008c20 <osMessageQueuePut>
      break;
 8007dec:	e15b      	b.n	80080a6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6899      	ldr	r1, [r3, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	899a      	ldrh	r2, [r3, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	795b      	ldrb	r3, [r3, #5]
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	9000      	str	r0, [sp, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f978 	bl	80080f4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2206      	movs	r2, #6
 8007e14:	761a      	strb	r2, [r3, #24]
      break;
 8007e16:	e14d      	b.n	80080b4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	795b      	ldrb	r3, [r3, #5]
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f004 fc88 	bl	800c734 <USBH_LL_GetURBState>
 8007e24:	4603      	mov	r3, r0
 8007e26:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d111      	bne.n	8007e52 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2207      	movs	r2, #7
 8007e32:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2203      	movs	r2, #3
 8007e38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e48:	2300      	movs	r3, #0
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f000 fee8 	bl	8008c20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e50:	e12b      	b.n	80080aa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	2b05      	cmp	r3, #5
 8007e56:	d113      	bne.n	8007e80 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	220c      	movs	r2, #12
 8007e5c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2203      	movs	r2, #3
 8007e66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007e76:	2300      	movs	r3, #0
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f000 fed1 	bl	8008c20 <osMessageQueuePut>
      break;
 8007e7e:	e114      	b.n	80080aa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d111      	bne.n	8007eaa <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2205      	movs	r2, #5
 8007e8a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2203      	movs	r2, #3
 8007e90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f000 febc 	bl	8008c20 <osMessageQueuePut>
      break;
 8007ea8:	e0ff      	b.n	80080aa <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	f040 80fc 	bne.w	80080aa <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	220b      	movs	r2, #11
 8007eb6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2203      	movs	r2, #3
 8007ec0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f000 fea4 	bl	8008c20 <osMessageQueuePut>
      break;
 8007ed8:	e0e7      	b.n	80080aa <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	791b      	ldrb	r3, [r3, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f92b 	bl	800813e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2208      	movs	r2, #8
 8007ef8:	761a      	strb	r2, [r3, #24]

      break;
 8007efa:	e0db      	b.n	80080b4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	791b      	ldrb	r3, [r3, #4]
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f004 fc16 	bl	800c734 <USBH_LL_GetURBState>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d113      	bne.n	8007f3a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	220d      	movs	r2, #13
 8007f16:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2203      	movs	r2, #3
 8007f20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f30:	2300      	movs	r3, #0
 8007f32:	2200      	movs	r2, #0
 8007f34:	f000 fe74 	bl	8008c20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f38:	e0b9      	b.n	80080ae <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8007f3a:	7bbb      	ldrb	r3, [r7, #14]
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d111      	bne.n	8007f64 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	220b      	movs	r2, #11
 8007f44:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2203      	movs	r2, #3
 8007f4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f000 fe5f 	bl	8008c20 <osMessageQueuePut>
      break;
 8007f62:	e0a4      	b.n	80080ae <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	2b05      	cmp	r3, #5
 8007f68:	f040 80a1 	bne.w	80080ae <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2203      	movs	r2, #3
 8007f74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007f84:	2300      	movs	r3, #0
 8007f86:	2200      	movs	r2, #0
 8007f88:	f000 fe4a 	bl	8008c20 <osMessageQueuePut>
      break;
 8007f8c:	e08f      	b.n	80080ae <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	795b      	ldrb	r3, [r3, #5]
 8007f92:	2201      	movs	r2, #1
 8007f94:	9200      	str	r2, [sp, #0]
 8007f96:	2200      	movs	r2, #0
 8007f98:	2100      	movs	r1, #0
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f8aa 	bl	80080f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	220a      	movs	r2, #10
 8007fb0:	761a      	strb	r2, [r3, #24]
      break;
 8007fb2:	e07f      	b.n	80080b4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	795b      	ldrb	r3, [r3, #5]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f004 fbba 	bl	800c734 <USBH_LL_GetURBState>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d113      	bne.n	8007ff2 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	220d      	movs	r2, #13
 8007fd2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2203      	movs	r2, #3
 8007fd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8007fe8:	2300      	movs	r3, #0
 8007fea:	2200      	movs	r2, #0
 8007fec:	f000 fe18 	bl	8008c20 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ff0:	e05f      	b.n	80080b2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d111      	bne.n	800801c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2209      	movs	r2, #9
 8007ffc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2203      	movs	r2, #3
 8008002:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008012:	2300      	movs	r3, #0
 8008014:	2200      	movs	r2, #0
 8008016:	f000 fe03 	bl	8008c20 <osMessageQueuePut>
      break;
 800801a:	e04a      	b.n	80080b2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	2b04      	cmp	r3, #4
 8008020:	d147      	bne.n	80080b2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	220b      	movs	r2, #11
 8008026:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2203      	movs	r2, #3
 800802c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800803c:	2300      	movs	r3, #0
 800803e:	2200      	movs	r2, #0
 8008040:	f000 fdee 	bl	8008c20 <osMessageQueuePut>
      break;
 8008044:	e035      	b.n	80080b2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	7e5b      	ldrb	r3, [r3, #25]
 800804a:	3301      	adds	r3, #1
 800804c:	b2da      	uxtb	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	765a      	strb	r2, [r3, #25]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	7e5b      	ldrb	r3, [r3, #25]
 8008056:	2b02      	cmp	r3, #2
 8008058:	d806      	bhi.n	8008068 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008066:	e025      	b.n	80080b4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800806e:	2106      	movs	r1, #6
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	795b      	ldrb	r3, [r3, #5]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f8e9 	bl	8008258 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	791b      	ldrb	r3, [r3, #4]
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f8e3 	bl	8008258 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008098:	2302      	movs	r3, #2
 800809a:	73fb      	strb	r3, [r7, #15]
      break;
 800809c:	e00a      	b.n	80080b4 <USBH_HandleControl+0x484>

    default:
      break;
 800809e:	bf00      	nop
 80080a0:	e008      	b.n	80080b4 <USBH_HandleControl+0x484>
      break;
 80080a2:	bf00      	nop
 80080a4:	e006      	b.n	80080b4 <USBH_HandleControl+0x484>
      break;
 80080a6:	bf00      	nop
 80080a8:	e004      	b.n	80080b4 <USBH_HandleControl+0x484>
      break;
 80080aa:	bf00      	nop
 80080ac:	e002      	b.n	80080b4 <USBH_HandleControl+0x484>
      break;
 80080ae:	bf00      	nop
 80080b0:	e000      	b.n	80080b4 <USBH_HandleControl+0x484>
      break;
 80080b2:	bf00      	nop
  }

  return status;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop

080080c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af04      	add	r7, sp, #16
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	4613      	mov	r3, r2
 80080cc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80080ce:	79f9      	ldrb	r1, [r7, #7]
 80080d0:	2300      	movs	r3, #0
 80080d2:	9303      	str	r3, [sp, #12]
 80080d4:	2308      	movs	r3, #8
 80080d6:	9302      	str	r3, [sp, #8]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	2300      	movs	r3, #0
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	2300      	movs	r3, #0
 80080e2:	2200      	movs	r2, #0
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f004 faf4 	bl	800c6d2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af04      	add	r7, sp, #16
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	4611      	mov	r1, r2
 8008100:	461a      	mov	r2, r3
 8008102:	460b      	mov	r3, r1
 8008104:	80fb      	strh	r3, [r7, #6]
 8008106:	4613      	mov	r3, r2
 8008108:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008118:	7979      	ldrb	r1, [r7, #5]
 800811a:	7e3b      	ldrb	r3, [r7, #24]
 800811c:	9303      	str	r3, [sp, #12]
 800811e:	88fb      	ldrh	r3, [r7, #6]
 8008120:	9302      	str	r3, [sp, #8]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	2301      	movs	r3, #1
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	2300      	movs	r3, #0
 800812c:	2200      	movs	r2, #0
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f004 facf 	bl	800c6d2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b088      	sub	sp, #32
 8008142:	af04      	add	r7, sp, #16
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	4611      	mov	r1, r2
 800814a:	461a      	mov	r2, r3
 800814c:	460b      	mov	r3, r1
 800814e:	80fb      	strh	r3, [r7, #6]
 8008150:	4613      	mov	r3, r2
 8008152:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008154:	7979      	ldrb	r1, [r7, #5]
 8008156:	2300      	movs	r3, #0
 8008158:	9303      	str	r3, [sp, #12]
 800815a:	88fb      	ldrh	r3, [r7, #6]
 800815c:	9302      	str	r3, [sp, #8]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	2301      	movs	r3, #1
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	2300      	movs	r3, #0
 8008168:	2201      	movs	r2, #1
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f004 fab1 	bl	800c6d2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008170:	2300      	movs	r3, #0

}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b088      	sub	sp, #32
 800817e:	af04      	add	r7, sp, #16
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	4611      	mov	r1, r2
 8008186:	461a      	mov	r2, r3
 8008188:	460b      	mov	r3, r1
 800818a:	71fb      	strb	r3, [r7, #7]
 800818c:	4613      	mov	r3, r2
 800818e:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008190:	79fb      	ldrb	r3, [r7, #7]
 8008192:	b29b      	uxth	r3, r3
 8008194:	79b9      	ldrb	r1, [r7, #6]
 8008196:	2200      	movs	r2, #0
 8008198:	9203      	str	r2, [sp, #12]
 800819a:	9302      	str	r3, [sp, #8]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	2301      	movs	r3, #1
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	2303      	movs	r3, #3
 80081a6:	2201      	movs	r2, #1
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f004 fa92 	bl	800c6d2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af04      	add	r7, sp, #16
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	4608      	mov	r0, r1
 80081c2:	4611      	mov	r1, r2
 80081c4:	461a      	mov	r2, r3
 80081c6:	4603      	mov	r3, r0
 80081c8:	70fb      	strb	r3, [r7, #3]
 80081ca:	460b      	mov	r3, r1
 80081cc:	70bb      	strb	r3, [r7, #2]
 80081ce:	4613      	mov	r3, r2
 80081d0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80081d2:	7878      	ldrb	r0, [r7, #1]
 80081d4:	78ba      	ldrb	r2, [r7, #2]
 80081d6:	78f9      	ldrb	r1, [r7, #3]
 80081d8:	8b3b      	ldrh	r3, [r7, #24]
 80081da:	9302      	str	r3, [sp, #8]
 80081dc:	7d3b      	ldrb	r3, [r7, #20]
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	7c3b      	ldrb	r3, [r7, #16]
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	4603      	mov	r3, r0
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f004 fa25 	bl	800c636 <USBH_LL_OpenPipe>

  return USBH_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	460b      	mov	r3, r1
 8008200:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008202:	78fb      	ldrb	r3, [r7, #3]
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f004 fa44 	bl	800c694 <USBH_LL_ClosePipe>

  return USBH_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	460b      	mov	r3, r1
 8008220:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f836 	bl	8008294 <USBH_GetFreePipe>
 8008228:	4603      	mov	r3, r0
 800822a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800822c:	89fb      	ldrh	r3, [r7, #14]
 800822e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008232:	4293      	cmp	r3, r2
 8008234:	d00a      	beq.n	800824c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008236:	78fa      	ldrb	r2, [r7, #3]
 8008238:	89fb      	ldrh	r3, [r7, #14]
 800823a:	f003 030f 	and.w	r3, r3, #15
 800823e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	33e0      	adds	r3, #224	; 0xe0
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	440b      	add	r3, r1
 800824a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800824c:	89fb      	ldrh	r3, [r7, #14]
 800824e:	b2db      	uxtb	r3, r3
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	2b0a      	cmp	r3, #10
 8008268:	d80d      	bhi.n	8008286 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	33e0      	adds	r3, #224	; 0xe0
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	78fb      	ldrb	r3, [r7, #3]
 8008278:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	33e0      	adds	r3, #224	; 0xe0
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	440b      	add	r3, r1
 8008284:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80082a0:	2300      	movs	r3, #0
 80082a2:	73fb      	strb	r3, [r7, #15]
 80082a4:	e00f      	b.n	80082c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	33e0      	adds	r3, #224	; 0xe0
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	b29b      	uxth	r3, r3
 80082be:	e007      	b.n	80082d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	3301      	adds	r3, #1
 80082c4:	73fb      	strb	r3, [r7, #15]
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
 80082c8:	2b0a      	cmp	r3, #10
 80082ca:	d9ec      	bls.n	80082a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80082cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80082dc:	b480      	push	{r7}
 80082de:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80082e0:	bf00      	nop
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
	...

080082ec <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082f2:	f3ef 8305 	mrs	r3, IPSR
 80082f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80082f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10f      	bne.n	800831e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008302:	607b      	str	r3, [r7, #4]
  return(result);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d105      	bne.n	8008316 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800830a:	f3ef 8311 	mrs	r3, BASEPRI
 800830e:	603b      	str	r3, [r7, #0]
  return(result);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d007      	beq.n	8008326 <osKernelInitialize+0x3a>
 8008316:	4b0e      	ldr	r3, [pc, #56]	; (8008350 <osKernelInitialize+0x64>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d103      	bne.n	8008326 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800831e:	f06f 0305 	mvn.w	r3, #5
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e00c      	b.n	8008340 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008326:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <osKernelInitialize+0x64>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d105      	bne.n	800833a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800832e:	4b08      	ldr	r3, [pc, #32]	; (8008350 <osKernelInitialize+0x64>)
 8008330:	2201      	movs	r2, #1
 8008332:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008334:	2300      	movs	r3, #0
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	e002      	b.n	8008340 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800833a:	f04f 33ff 	mov.w	r3, #4294967295
 800833e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008340:	68fb      	ldr	r3, [r7, #12]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	20000b78 	.word	0x20000b78

08008354 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800835a:	f3ef 8305 	mrs	r3, IPSR
 800835e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008360:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10f      	bne.n	8008386 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008366:	f3ef 8310 	mrs	r3, PRIMASK
 800836a:	607b      	str	r3, [r7, #4]
  return(result);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d105      	bne.n	800837e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008372:	f3ef 8311 	mrs	r3, BASEPRI
 8008376:	603b      	str	r3, [r7, #0]
  return(result);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <osKernelStart+0x3a>
 800837e:	4b0f      	ldr	r3, [pc, #60]	; (80083bc <osKernelStart+0x68>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b02      	cmp	r3, #2
 8008384:	d103      	bne.n	800838e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008386:	f06f 0305 	mvn.w	r3, #5
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	e010      	b.n	80083b0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800838e:	4b0b      	ldr	r3, [pc, #44]	; (80083bc <osKernelStart+0x68>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d109      	bne.n	80083aa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008396:	f7ff ffa1 	bl	80082dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800839a:	4b08      	ldr	r3, [pc, #32]	; (80083bc <osKernelStart+0x68>)
 800839c:	2202      	movs	r2, #2
 800839e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80083a0:	f002 f9be 	bl	800a720 <vTaskStartScheduler>
      stat = osOK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	e002      	b.n	80083b0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80083aa:	f04f 33ff 	mov.w	r3, #4294967295
 80083ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80083b0:	68fb      	ldr	r3, [r7, #12]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20000b78 	.word	0x20000b78

080083c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b090      	sub	sp, #64	; 0x40
 80083c4:	af04      	add	r7, sp, #16
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80083cc:	2300      	movs	r3, #0
 80083ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083d0:	f3ef 8305 	mrs	r3, IPSR
 80083d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80083d6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f040 808f 	bne.w	80084fc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083de:	f3ef 8310 	mrs	r3, PRIMASK
 80083e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d105      	bne.n	80083f6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083ea:	f3ef 8311 	mrs	r3, BASEPRI
 80083ee:	617b      	str	r3, [r7, #20]
  return(result);
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <osThreadNew+0x3e>
 80083f6:	4b44      	ldr	r3, [pc, #272]	; (8008508 <osThreadNew+0x148>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d07e      	beq.n	80084fc <osThreadNew+0x13c>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d07b      	beq.n	80084fc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008404:	2380      	movs	r3, #128	; 0x80
 8008406:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008408:	2318      	movs	r3, #24
 800840a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800840c:	2300      	movs	r3, #0
 800840e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008410:	f04f 33ff 	mov.w	r3, #4294967295
 8008414:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d045      	beq.n	80084a8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <osThreadNew+0x6a>
        name = attr->name;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	2b00      	cmp	r3, #0
 800843c:	d008      	beq.n	8008450 <osThreadNew+0x90>
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	2b38      	cmp	r3, #56	; 0x38
 8008442:	d805      	bhi.n	8008450 <osThreadNew+0x90>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <osThreadNew+0x94>
        return (NULL);
 8008450:	2300      	movs	r3, #0
 8008452:	e054      	b.n	80084fe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	089b      	lsrs	r3, r3, #2
 8008462:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00e      	beq.n	800848a <osThreadNew+0xca>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	2b5b      	cmp	r3, #91	; 0x5b
 8008472:	d90a      	bls.n	800848a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008478:	2b00      	cmp	r3, #0
 800847a:	d006      	beq.n	800848a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <osThreadNew+0xca>
        mem = 1;
 8008484:	2301      	movs	r3, #1
 8008486:	623b      	str	r3, [r7, #32]
 8008488:	e010      	b.n	80084ac <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10c      	bne.n	80084ac <osThreadNew+0xec>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d108      	bne.n	80084ac <osThreadNew+0xec>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d104      	bne.n	80084ac <osThreadNew+0xec>
          mem = 0;
 80084a2:	2300      	movs	r3, #0
 80084a4:	623b      	str	r3, [r7, #32]
 80084a6:	e001      	b.n	80084ac <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d110      	bne.n	80084d4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084ba:	9202      	str	r2, [sp, #8]
 80084bc:	9301      	str	r3, [sp, #4]
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f001 fedd 	bl	800a288 <xTaskCreateStatic>
 80084ce:	4603      	mov	r3, r0
 80084d0:	613b      	str	r3, [r7, #16]
 80084d2:	e013      	b.n	80084fc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d110      	bne.n	80084fc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	b29a      	uxth	r2, r3
 80084de:	f107 0310 	add.w	r3, r7, #16
 80084e2:	9301      	str	r3, [sp, #4]
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f001 ff28 	bl	800a342 <xTaskCreate>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d001      	beq.n	80084fc <osThreadNew+0x13c>
          hTask = NULL;
 80084f8:	2300      	movs	r3, #0
 80084fa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80084fc:	693b      	ldr	r3, [r7, #16]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3730      	adds	r7, #48	; 0x30
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20000b78 	.word	0x20000b78

0800850c <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800850c:	b580      	push	{r7, lr}
 800850e:	b088      	sub	sp, #32
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008518:	f3ef 8305 	mrs	r3, IPSR
 800851c:	617b      	str	r3, [r7, #20]
  return(result);
 800851e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10f      	bne.n	8008544 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008524:	f3ef 8310 	mrs	r3, PRIMASK
 8008528:	613b      	str	r3, [r7, #16]
  return(result);
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d105      	bne.n	800853c <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008530:	f3ef 8311 	mrs	r3, BASEPRI
 8008534:	60fb      	str	r3, [r7, #12]
  return(result);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d007      	beq.n	800854c <osThreadSuspend+0x40>
 800853c:	4b0c      	ldr	r3, [pc, #48]	; (8008570 <osThreadSuspend+0x64>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b02      	cmp	r3, #2
 8008542:	d103      	bne.n	800854c <osThreadSuspend+0x40>
    stat = osErrorISR;
 8008544:	f06f 0305 	mvn.w	r3, #5
 8008548:	61fb      	str	r3, [r7, #28]
 800854a:	e00b      	b.n	8008564 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d103      	bne.n	800855a <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8008552:	f06f 0303 	mvn.w	r3, #3
 8008556:	61fb      	str	r3, [r7, #28]
 8008558:	e004      	b.n	8008564 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 800855a:	2300      	movs	r3, #0
 800855c:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 800855e:	69b8      	ldr	r0, [r7, #24]
 8008560:	f002 f868 	bl	800a634 <vTaskSuspend>
  }

  return (stat);
 8008564:	69fb      	ldr	r3, [r7, #28]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3720      	adds	r7, #32
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	20000b78 	.word	0x20000b78

08008574 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800857c:	f3ef 8305 	mrs	r3, IPSR
 8008580:	613b      	str	r3, [r7, #16]
  return(result);
 8008582:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10f      	bne.n	80085a8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008588:	f3ef 8310 	mrs	r3, PRIMASK
 800858c:	60fb      	str	r3, [r7, #12]
  return(result);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d105      	bne.n	80085a0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008594:	f3ef 8311 	mrs	r3, BASEPRI
 8008598:	60bb      	str	r3, [r7, #8]
  return(result);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d007      	beq.n	80085b0 <osDelay+0x3c>
 80085a0:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <osDelay+0x58>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d103      	bne.n	80085b0 <osDelay+0x3c>
    stat = osErrorISR;
 80085a8:	f06f 0305 	mvn.w	r3, #5
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	e007      	b.n	80085c0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f002 f806 	bl	800a5cc <vTaskDelay>
    }
  }

  return (stat);
 80085c0:	697b      	ldr	r3, [r7, #20]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3718      	adds	r7, #24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000b78 	.word	0x20000b78

080085d0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08a      	sub	sp, #40	; 0x28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80085d8:	2300      	movs	r3, #0
 80085da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085dc:	f3ef 8305 	mrs	r3, IPSR
 80085e0:	613b      	str	r3, [r7, #16]
  return(result);
 80085e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f040 8085 	bne.w	80086f4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ea:	f3ef 8310 	mrs	r3, PRIMASK
 80085ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d105      	bne.n	8008602 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085f6:	f3ef 8311 	mrs	r3, BASEPRI
 80085fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <osMutexNew+0x3a>
 8008602:	4b3f      	ldr	r3, [pc, #252]	; (8008700 <osMutexNew+0x130>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b02      	cmp	r3, #2
 8008608:	d074      	beq.n	80086f4 <osMutexNew+0x124>
    if (attr != NULL) {
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	623b      	str	r3, [r7, #32]
 8008616:	e001      	b.n	800861c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <osMutexNew+0x5c>
      rmtx = 1U;
 8008626:	2301      	movs	r3, #1
 8008628:	61fb      	str	r3, [r7, #28]
 800862a:	e001      	b.n	8008630 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800862c:	2300      	movs	r3, #0
 800862e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	f003 0308 	and.w	r3, r3, #8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d15c      	bne.n	80086f4 <osMutexNew+0x124>
      mem = -1;
 800863a:	f04f 33ff 	mov.w	r3, #4294967295
 800863e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d015      	beq.n	8008672 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d006      	beq.n	800865c <osMutexNew+0x8c>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	2b4f      	cmp	r3, #79	; 0x4f
 8008654:	d902      	bls.n	800865c <osMutexNew+0x8c>
          mem = 1;
 8008656:	2301      	movs	r3, #1
 8008658:	61bb      	str	r3, [r7, #24]
 800865a:	e00c      	b.n	8008676 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d108      	bne.n	8008676 <osMutexNew+0xa6>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d104      	bne.n	8008676 <osMutexNew+0xa6>
            mem = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	61bb      	str	r3, [r7, #24]
 8008670:	e001      	b.n	8008676 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d112      	bne.n	80086a2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d007      	beq.n	8008692 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	4619      	mov	r1, r3
 8008688:	2004      	movs	r0, #4
 800868a:	f000 fe88 	bl	800939e <xQueueCreateMutexStatic>
 800868e:	6278      	str	r0, [r7, #36]	; 0x24
 8008690:	e016      	b.n	80086c0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	4619      	mov	r1, r3
 8008698:	2001      	movs	r0, #1
 800869a:	f000 fe80 	bl	800939e <xQueueCreateMutexStatic>
 800869e:	6278      	str	r0, [r7, #36]	; 0x24
 80086a0:	e00e      	b.n	80086c0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10b      	bne.n	80086c0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d004      	beq.n	80086b8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80086ae:	2004      	movs	r0, #4
 80086b0:	f000 fe5d 	bl	800936e <xQueueCreateMutex>
 80086b4:	6278      	str	r0, [r7, #36]	; 0x24
 80086b6:	e003      	b.n	80086c0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80086b8:	2001      	movs	r0, #1
 80086ba:	f000 fe58 	bl	800936e <xQueueCreateMutex>
 80086be:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00c      	beq.n	80086e0 <osMutexNew+0x110>
        if (attr != NULL) {
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <osMutexNew+0x104>
          name = attr->name;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	617b      	str	r3, [r7, #20]
 80086d2:	e001      	b.n	80086d8 <osMutexNew+0x108>
        } else {
          name = NULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80086d8:	6979      	ldr	r1, [r7, #20]
 80086da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086dc:	f001 fd4c 	bl	800a178 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d006      	beq.n	80086f4 <osMutexNew+0x124>
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d003      	beq.n	80086f4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	f043 0301 	orr.w	r3, r3, #1
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3728      	adds	r7, #40	; 0x28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20000b78 	.word	0x20000b78

08008704 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008704:	b580      	push	{r7, lr}
 8008706:	b088      	sub	sp, #32
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f023 0301 	bic.w	r3, r3, #1
 8008714:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800871e:	2300      	movs	r3, #0
 8008720:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008722:	f3ef 8305 	mrs	r3, IPSR
 8008726:	613b      	str	r3, [r7, #16]
  return(result);
 8008728:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10f      	bne.n	800874e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800872e:	f3ef 8310 	mrs	r3, PRIMASK
 8008732:	60fb      	str	r3, [r7, #12]
  return(result);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d105      	bne.n	8008746 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800873a:	f3ef 8311 	mrs	r3, BASEPRI
 800873e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d007      	beq.n	8008756 <osMutexAcquire+0x52>
 8008746:	4b1d      	ldr	r3, [pc, #116]	; (80087bc <osMutexAcquire+0xb8>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b02      	cmp	r3, #2
 800874c:	d103      	bne.n	8008756 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800874e:	f06f 0305 	mvn.w	r3, #5
 8008752:	61fb      	str	r3, [r7, #28]
 8008754:	e02c      	b.n	80087b0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d103      	bne.n	8008764 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800875c:	f06f 0303 	mvn.w	r3, #3
 8008760:	61fb      	str	r3, [r7, #28]
 8008762:	e025      	b.n	80087b0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d011      	beq.n	800878e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	69b8      	ldr	r0, [r7, #24]
 800876e:	f000 fe65 	bl	800943c <xQueueTakeMutexRecursive>
 8008772:	4603      	mov	r3, r0
 8008774:	2b01      	cmp	r3, #1
 8008776:	d01b      	beq.n	80087b0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800877e:	f06f 0301 	mvn.w	r3, #1
 8008782:	61fb      	str	r3, [r7, #28]
 8008784:	e014      	b.n	80087b0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008786:	f06f 0302 	mvn.w	r3, #2
 800878a:	61fb      	str	r3, [r7, #28]
 800878c:	e010      	b.n	80087b0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	69b8      	ldr	r0, [r7, #24]
 8008792:	f001 f9f7 	bl	8009b84 <xQueueSemaphoreTake>
 8008796:	4603      	mov	r3, r0
 8008798:	2b01      	cmp	r3, #1
 800879a:	d009      	beq.n	80087b0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80087a2:	f06f 0301 	mvn.w	r3, #1
 80087a6:	61fb      	str	r3, [r7, #28]
 80087a8:	e002      	b.n	80087b0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80087aa:	f06f 0302 	mvn.w	r3, #2
 80087ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80087b0:	69fb      	ldr	r3, [r7, #28]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3720      	adds	r7, #32
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	20000b78 	.word	0x20000b78

080087c0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f023 0301 	bic.w	r3, r3, #1
 80087ce:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80087d8:	2300      	movs	r3, #0
 80087da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087dc:	f3ef 8305 	mrs	r3, IPSR
 80087e0:	613b      	str	r3, [r7, #16]
  return(result);
 80087e2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10f      	bne.n	8008808 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087e8:	f3ef 8310 	mrs	r3, PRIMASK
 80087ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d105      	bne.n	8008800 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087f4:	f3ef 8311 	mrs	r3, BASEPRI
 80087f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d007      	beq.n	8008810 <osMutexRelease+0x50>
 8008800:	4b16      	ldr	r3, [pc, #88]	; (800885c <osMutexRelease+0x9c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b02      	cmp	r3, #2
 8008806:	d103      	bne.n	8008810 <osMutexRelease+0x50>
    stat = osErrorISR;
 8008808:	f06f 0305 	mvn.w	r3, #5
 800880c:	61fb      	str	r3, [r7, #28]
 800880e:	e01f      	b.n	8008850 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d103      	bne.n	800881e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008816:	f06f 0303 	mvn.w	r3, #3
 800881a:	61fb      	str	r3, [r7, #28]
 800881c:	e018      	b.n	8008850 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d009      	beq.n	8008838 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008824:	69b8      	ldr	r0, [r7, #24]
 8008826:	f000 fdd5 	bl	80093d4 <xQueueGiveMutexRecursive>
 800882a:	4603      	mov	r3, r0
 800882c:	2b01      	cmp	r3, #1
 800882e:	d00f      	beq.n	8008850 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008830:	f06f 0302 	mvn.w	r3, #2
 8008834:	61fb      	str	r3, [r7, #28]
 8008836:	e00b      	b.n	8008850 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008838:	2300      	movs	r3, #0
 800883a:	2200      	movs	r2, #0
 800883c:	2100      	movs	r1, #0
 800883e:	69b8      	ldr	r0, [r7, #24]
 8008840:	f000 fe9c 	bl	800957c <xQueueGenericSend>
 8008844:	4603      	mov	r3, r0
 8008846:	2b01      	cmp	r3, #1
 8008848:	d002      	beq.n	8008850 <osMutexRelease+0x90>
        stat = osErrorResource;
 800884a:	f06f 0302 	mvn.w	r3, #2
 800884e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008850:	69fb      	ldr	r3, [r7, #28]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3720      	adds	r7, #32
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20000b78 	.word	0x20000b78

08008860 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008860:	b580      	push	{r7, lr}
 8008862:	b08c      	sub	sp, #48	; 0x30
 8008864:	af02      	add	r7, sp, #8
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800886c:	2300      	movs	r3, #0
 800886e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008870:	f3ef 8305 	mrs	r3, IPSR
 8008874:	61bb      	str	r3, [r7, #24]
  return(result);
 8008876:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008878:	2b00      	cmp	r3, #0
 800887a:	f040 8086 	bne.w	800898a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800887e:	f3ef 8310 	mrs	r3, PRIMASK
 8008882:	617b      	str	r3, [r7, #20]
  return(result);
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d105      	bne.n	8008896 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800888a:	f3ef 8311 	mrs	r3, BASEPRI
 800888e:	613b      	str	r3, [r7, #16]
  return(result);
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <osSemaphoreNew+0x3e>
 8008896:	4b3f      	ldr	r3, [pc, #252]	; (8008994 <osSemaphoreNew+0x134>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b02      	cmp	r3, #2
 800889c:	d075      	beq.n	800898a <osSemaphoreNew+0x12a>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d072      	beq.n	800898a <osSemaphoreNew+0x12a>
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d86e      	bhi.n	800898a <osSemaphoreNew+0x12a>
    mem = -1;
 80088ac:	f04f 33ff 	mov.w	r3, #4294967295
 80088b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d015      	beq.n	80088e4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d006      	beq.n	80088ce <osSemaphoreNew+0x6e>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	2b4f      	cmp	r3, #79	; 0x4f
 80088c6:	d902      	bls.n	80088ce <osSemaphoreNew+0x6e>
        mem = 1;
 80088c8:	2301      	movs	r3, #1
 80088ca:	623b      	str	r3, [r7, #32]
 80088cc:	e00c      	b.n	80088e8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d108      	bne.n	80088e8 <osSemaphoreNew+0x88>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d104      	bne.n	80088e8 <osSemaphoreNew+0x88>
          mem = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	623b      	str	r3, [r7, #32]
 80088e2:	e001      	b.n	80088e8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ee:	d04c      	beq.n	800898a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d128      	bne.n	8008948 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d10a      	bne.n	8008912 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	2203      	movs	r2, #3
 8008902:	9200      	str	r2, [sp, #0]
 8008904:	2200      	movs	r2, #0
 8008906:	2100      	movs	r1, #0
 8008908:	2001      	movs	r0, #1
 800890a:	f000 fc3b 	bl	8009184 <xQueueGenericCreateStatic>
 800890e:	6278      	str	r0, [r7, #36]	; 0x24
 8008910:	e005      	b.n	800891e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008912:	2203      	movs	r2, #3
 8008914:	2100      	movs	r1, #0
 8008916:	2001      	movs	r0, #1
 8008918:	f000 fcac 	bl	8009274 <xQueueGenericCreate>
 800891c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008920:	2b00      	cmp	r3, #0
 8008922:	d022      	beq.n	800896a <osSemaphoreNew+0x10a>
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d01f      	beq.n	800896a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800892a:	2300      	movs	r3, #0
 800892c:	2200      	movs	r2, #0
 800892e:	2100      	movs	r1, #0
 8008930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008932:	f000 fe23 	bl	800957c <xQueueGenericSend>
 8008936:	4603      	mov	r3, r0
 8008938:	2b01      	cmp	r3, #1
 800893a:	d016      	beq.n	800896a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800893c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800893e:	f001 fad0 	bl	8009ee2 <vQueueDelete>
            hSemaphore = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	627b      	str	r3, [r7, #36]	; 0x24
 8008946:	e010      	b.n	800896a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d108      	bne.n	8008960 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	461a      	mov	r2, r3
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 fda6 	bl	80094a8 <xQueueCreateCountingSemaphoreStatic>
 800895c:	6278      	str	r0, [r7, #36]	; 0x24
 800895e:	e004      	b.n	800896a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008960:	68b9      	ldr	r1, [r7, #8]
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f000 fdd7 	bl	8009516 <xQueueCreateCountingSemaphore>
 8008968:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00c      	beq.n	800898a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <osSemaphoreNew+0x11e>
          name = attr->name;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	61fb      	str	r3, [r7, #28]
 800897c:	e001      	b.n	8008982 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008982:	69f9      	ldr	r1, [r7, #28]
 8008984:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008986:	f001 fbf7 	bl	800a178 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800898c:	4618      	mov	r0, r3
 800898e:	3728      	adds	r7, #40	; 0x28
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	20000b78 	.word	0x20000b78

08008998 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008998:	b580      	push	{r7, lr}
 800899a:	b088      	sub	sp, #32
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d103      	bne.n	80089b8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80089b0:	f06f 0303 	mvn.w	r3, #3
 80089b4:	61fb      	str	r3, [r7, #28]
 80089b6:	e04b      	b.n	8008a50 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089b8:	f3ef 8305 	mrs	r3, IPSR
 80089bc:	617b      	str	r3, [r7, #20]
  return(result);
 80089be:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10f      	bne.n	80089e4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089c4:	f3ef 8310 	mrs	r3, PRIMASK
 80089c8:	613b      	str	r3, [r7, #16]
  return(result);
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d105      	bne.n	80089dc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089d0:	f3ef 8311 	mrs	r3, BASEPRI
 80089d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d026      	beq.n	8008a2a <osSemaphoreAcquire+0x92>
 80089dc:	4b1f      	ldr	r3, [pc, #124]	; (8008a5c <osSemaphoreAcquire+0xc4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d122      	bne.n	8008a2a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80089ea:	f06f 0303 	mvn.w	r3, #3
 80089ee:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80089f0:	e02d      	b.n	8008a4e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80089f6:	f107 0308 	add.w	r3, r7, #8
 80089fa:	461a      	mov	r2, r3
 80089fc:	2100      	movs	r1, #0
 80089fe:	69b8      	ldr	r0, [r7, #24]
 8008a00:	f001 f9cc 	bl	8009d9c <xQueueReceiveFromISR>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d003      	beq.n	8008a12 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008a0a:	f06f 0302 	mvn.w	r3, #2
 8008a0e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008a10:	e01d      	b.n	8008a4e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01a      	beq.n	8008a4e <osSemaphoreAcquire+0xb6>
 8008a18:	4b11      	ldr	r3, [pc, #68]	; (8008a60 <osSemaphoreAcquire+0xc8>)
 8008a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1e:	601a      	str	r2, [r3, #0]
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008a28:	e011      	b.n	8008a4e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	69b8      	ldr	r0, [r7, #24]
 8008a2e:	f001 f8a9 	bl	8009b84 <xQueueSemaphoreTake>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d00b      	beq.n	8008a50 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d003      	beq.n	8008a46 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008a3e:	f06f 0301 	mvn.w	r3, #1
 8008a42:	61fb      	str	r3, [r7, #28]
 8008a44:	e004      	b.n	8008a50 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008a46:	f06f 0302 	mvn.w	r3, #2
 8008a4a:	61fb      	str	r3, [r7, #28]
 8008a4c:	e000      	b.n	8008a50 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008a4e:	bf00      	nop
      }
    }
  }

  return (stat);
 8008a50:	69fb      	ldr	r3, [r7, #28]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3720      	adds	r7, #32
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20000b78 	.word	0x20000b78
 8008a60:	e000ed04 	.word	0xe000ed04

08008a64 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d103      	bne.n	8008a82 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008a7a:	f06f 0303 	mvn.w	r3, #3
 8008a7e:	61fb      	str	r3, [r7, #28]
 8008a80:	e03e      	b.n	8008b00 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a82:	f3ef 8305 	mrs	r3, IPSR
 8008a86:	617b      	str	r3, [r7, #20]
  return(result);
 8008a88:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10f      	bne.n	8008aae <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a92:	613b      	str	r3, [r7, #16]
  return(result);
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d105      	bne.n	8008aa6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a9a:	f3ef 8311 	mrs	r3, BASEPRI
 8008a9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d01e      	beq.n	8008ae4 <osSemaphoreRelease+0x80>
 8008aa6:	4b19      	ldr	r3, [pc, #100]	; (8008b0c <osSemaphoreRelease+0xa8>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d11a      	bne.n	8008ae4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008ab2:	f107 0308 	add.w	r3, r7, #8
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	69b8      	ldr	r0, [r7, #24]
 8008aba:	f000 fef5 	bl	80098a8 <xQueueGiveFromISR>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d003      	beq.n	8008acc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008ac4:	f06f 0302 	mvn.w	r3, #2
 8008ac8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008aca:	e018      	b.n	8008afe <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d015      	beq.n	8008afe <osSemaphoreRelease+0x9a>
 8008ad2:	4b0f      	ldr	r3, [pc, #60]	; (8008b10 <osSemaphoreRelease+0xac>)
 8008ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008ae2:	e00c      	b.n	8008afe <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2100      	movs	r1, #0
 8008aea:	69b8      	ldr	r0, [r7, #24]
 8008aec:	f000 fd46 	bl	800957c <xQueueGenericSend>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d004      	beq.n	8008b00 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008af6:	f06f 0302 	mvn.w	r3, #2
 8008afa:	61fb      	str	r3, [r7, #28]
 8008afc:	e000      	b.n	8008b00 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008afe:	bf00      	nop
    }
  }

  return (stat);
 8008b00:	69fb      	ldr	r3, [r7, #28]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3720      	adds	r7, #32
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20000b78 	.word	0x20000b78
 8008b10:	e000ed04 	.word	0xe000ed04

08008b14 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08c      	sub	sp, #48	; 0x30
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b24:	f3ef 8305 	mrs	r3, IPSR
 8008b28:	61bb      	str	r3, [r7, #24]
  return(result);
 8008b2a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d16f      	bne.n	8008c10 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b30:	f3ef 8310 	mrs	r3, PRIMASK
 8008b34:	617b      	str	r3, [r7, #20]
  return(result);
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d105      	bne.n	8008b48 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b3c:	f3ef 8311 	mrs	r3, BASEPRI
 8008b40:	613b      	str	r3, [r7, #16]
  return(result);
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d003      	beq.n	8008b50 <osMessageQueueNew+0x3c>
 8008b48:	4b34      	ldr	r3, [pc, #208]	; (8008c1c <osMessageQueueNew+0x108>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d05f      	beq.n	8008c10 <osMessageQueueNew+0xfc>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d05c      	beq.n	8008c10 <osMessageQueueNew+0xfc>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d059      	beq.n	8008c10 <osMessageQueueNew+0xfc>
    mem = -1;
 8008b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b60:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d029      	beq.n	8008bbc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d012      	beq.n	8008b96 <osMessageQueueNew+0x82>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	2b4f      	cmp	r3, #79	; 0x4f
 8008b76:	d90e      	bls.n	8008b96 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00a      	beq.n	8008b96 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	695a      	ldr	r2, [r3, #20]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	68b9      	ldr	r1, [r7, #8]
 8008b88:	fb01 f303 	mul.w	r3, r1, r3
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d302      	bcc.n	8008b96 <osMessageQueueNew+0x82>
        mem = 1;
 8008b90:	2301      	movs	r3, #1
 8008b92:	623b      	str	r3, [r7, #32]
 8008b94:	e014      	b.n	8008bc0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d110      	bne.n	8008bc0 <osMessageQueueNew+0xac>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10c      	bne.n	8008bc0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d108      	bne.n	8008bc0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d104      	bne.n	8008bc0 <osMessageQueueNew+0xac>
          mem = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	623b      	str	r3, [r7, #32]
 8008bba:	e001      	b.n	8008bc0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d10b      	bne.n	8008bde <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691a      	ldr	r2, [r3, #16]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	2100      	movs	r1, #0
 8008bd0:	9100      	str	r1, [sp, #0]
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 fad5 	bl	8009184 <xQueueGenericCreateStatic>
 8008bda:	6278      	str	r0, [r7, #36]	; 0x24
 8008bdc:	e008      	b.n	8008bf0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d105      	bne.n	8008bf0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008be4:	2200      	movs	r2, #0
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 fb43 	bl	8009274 <xQueueGenericCreate>
 8008bee:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00c      	beq.n	8008c10 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <osMessageQueueNew+0xf0>
        name = attr->name;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	61fb      	str	r3, [r7, #28]
 8008c02:	e001      	b.n	8008c08 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008c08:	69f9      	ldr	r1, [r7, #28]
 8008c0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c0c:	f001 fab4 	bl	800a178 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3728      	adds	r7, #40	; 0x28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20000b78 	.word	0x20000b78

08008c20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b08a      	sub	sp, #40	; 0x28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	603b      	str	r3, [r7, #0]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c38:	f3ef 8305 	mrs	r3, IPSR
 8008c3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008c3e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10f      	bne.n	8008c64 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c44:	f3ef 8310 	mrs	r3, PRIMASK
 8008c48:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d105      	bne.n	8008c5c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c50:	f3ef 8311 	mrs	r3, BASEPRI
 8008c54:	617b      	str	r3, [r7, #20]
  return(result);
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d02c      	beq.n	8008cb6 <osMessageQueuePut+0x96>
 8008c5c:	4b28      	ldr	r3, [pc, #160]	; (8008d00 <osMessageQueuePut+0xe0>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d128      	bne.n	8008cb6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d005      	beq.n	8008c76 <osMessageQueuePut+0x56>
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <osMessageQueuePut+0x56>
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008c76:	f06f 0303 	mvn.w	r3, #3
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c7c:	e039      	b.n	8008cf2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008c82:	f107 0210 	add.w	r2, r7, #16
 8008c86:	2300      	movs	r3, #0
 8008c88:	68b9      	ldr	r1, [r7, #8]
 8008c8a:	6a38      	ldr	r0, [r7, #32]
 8008c8c:	f000 fd74 	bl	8009778 <xQueueGenericSendFromISR>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d003      	beq.n	8008c9e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008c96:	f06f 0302 	mvn.w	r3, #2
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c9c:	e029      	b.n	8008cf2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d026      	beq.n	8008cf2 <osMessageQueuePut+0xd2>
 8008ca4:	4b17      	ldr	r3, [pc, #92]	; (8008d04 <osMessageQueuePut+0xe4>)
 8008ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008cb4:	e01d      	b.n	8008cf2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <osMessageQueuePut+0xa2>
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d103      	bne.n	8008cca <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008cc2:	f06f 0303 	mvn.w	r3, #3
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8008cc8:	e014      	b.n	8008cf4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008cca:	2300      	movs	r3, #0
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	68b9      	ldr	r1, [r7, #8]
 8008cd0:	6a38      	ldr	r0, [r7, #32]
 8008cd2:	f000 fc53 	bl	800957c <xQueueGenericSend>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d00b      	beq.n	8008cf4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8008ce2:	f06f 0301 	mvn.w	r3, #1
 8008ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ce8:	e004      	b.n	8008cf4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008cea:	f06f 0302 	mvn.w	r3, #2
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24
 8008cf0:	e000      	b.n	8008cf4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008cf2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3728      	adds	r7, #40	; 0x28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000b78 	.word	0x20000b78
 8008d04:	e000ed04 	.word	0xe000ed04

08008d08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	; 0x28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
 8008d14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d1e:	f3ef 8305 	mrs	r3, IPSR
 8008d22:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d24:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10f      	bne.n	8008d4a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d105      	bne.n	8008d42 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d36:	f3ef 8311 	mrs	r3, BASEPRI
 8008d3a:	617b      	str	r3, [r7, #20]
  return(result);
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d02c      	beq.n	8008d9c <osMessageQueueGet+0x94>
 8008d42:	4b28      	ldr	r3, [pc, #160]	; (8008de4 <osMessageQueueGet+0xdc>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d128      	bne.n	8008d9c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d005      	beq.n	8008d5c <osMessageQueueGet+0x54>
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d002      	beq.n	8008d5c <osMessageQueueGet+0x54>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008d5c:	f06f 0303 	mvn.w	r3, #3
 8008d60:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d62:	e038      	b.n	8008dd6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008d64:	2300      	movs	r3, #0
 8008d66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008d68:	f107 0310 	add.w	r3, r7, #16
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	6a38      	ldr	r0, [r7, #32]
 8008d72:	f001 f813 	bl	8009d9c <xQueueReceiveFromISR>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d003      	beq.n	8008d84 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008d7c:	f06f 0302 	mvn.w	r3, #2
 8008d80:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d82:	e028      	b.n	8008dd6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d025      	beq.n	8008dd6 <osMessageQueueGet+0xce>
 8008d8a:	4b17      	ldr	r3, [pc, #92]	; (8008de8 <osMessageQueueGet+0xe0>)
 8008d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d9a:	e01c      	b.n	8008dd6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <osMessageQueueGet+0xa0>
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d103      	bne.n	8008db0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008da8:	f06f 0303 	mvn.w	r3, #3
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
 8008dae:	e013      	b.n	8008dd8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	68b9      	ldr	r1, [r7, #8]
 8008db4:	6a38      	ldr	r0, [r7, #32]
 8008db6:	f000 fe05 	bl	80099c4 <xQueueReceive>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d00b      	beq.n	8008dd8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008dc6:	f06f 0301 	mvn.w	r3, #1
 8008dca:	627b      	str	r3, [r7, #36]	; 0x24
 8008dcc:	e004      	b.n	8008dd8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008dce:	f06f 0302 	mvn.w	r3, #2
 8008dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008dd4:	e000      	b.n	8008dd8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008dd6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3728      	adds	r7, #40	; 0x28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	20000b78 	.word	0x20000b78
 8008de8:	e000ed04 	.word	0xe000ed04

08008dec <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08c      	sub	sp, #48	; 0x30
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d102      	bne.n	8008e04 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e02:	e034      	b.n	8008e6e <osMessageQueueGetSpace+0x82>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e04:	f3ef 8305 	mrs	r3, IPSR
 8008e08:	623b      	str	r3, [r7, #32]
  return(result);
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10f      	bne.n	8008e30 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e10:	f3ef 8310 	mrs	r3, PRIMASK
 8008e14:	61fb      	str	r3, [r7, #28]
  return(result);
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d105      	bne.n	8008e28 <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8008e20:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01e      	beq.n	8008e66 <osMessageQueueGetSpace+0x7a>
 8008e28:	4b13      	ldr	r3, [pc, #76]	; (8008e78 <osMessageQueueGetSpace+0x8c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d11a      	bne.n	8008e66 <osMessageQueueGetSpace+0x7a>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e30:	f3ef 8211 	mrs	r2, BASEPRI
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	613a      	str	r2, [r7, #16]
 8008e46:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e48:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008e62:	bf00      	nop

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 8008e64:	e003      	b.n	8008e6e <osMessageQueueGetSpace+0x82>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 8008e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e68:	f001 f818 	bl	8009e9c <uxQueueSpacesAvailable>
 8008e6c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3730      	adds	r7, #48	; 0x30
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	20000b78 	.word	0x20000b78

08008e7c <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e88:	f3ef 8305 	mrs	r3, IPSR
 8008e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8008e8e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10f      	bne.n	8008eb4 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e94:	f3ef 8310 	mrs	r3, PRIMASK
 8008e98:	613b      	str	r3, [r7, #16]
  return(result);
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d105      	bne.n	8008eac <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8008ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d007      	beq.n	8008ebc <osMessageQueueReset+0x40>
 8008eac:	4b0c      	ldr	r3, [pc, #48]	; (8008ee0 <osMessageQueueReset+0x64>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d103      	bne.n	8008ebc <osMessageQueueReset+0x40>
    stat = osErrorISR;
 8008eb4:	f06f 0305 	mvn.w	r3, #5
 8008eb8:	61fb      	str	r3, [r7, #28]
 8008eba:	e00c      	b.n	8008ed6 <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d103      	bne.n	8008eca <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 8008ec2:	f06f 0303 	mvn.w	r3, #3
 8008ec6:	61fb      	str	r3, [r7, #28]
 8008ec8:	e005      	b.n	8008ed6 <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 8008ece:	2100      	movs	r1, #0
 8008ed0:	69b8      	ldr	r0, [r7, #24]
 8008ed2:	f000 f8ef 	bl	80090b4 <xQueueGenericReset>
  }

  return (stat);
 8008ed6:	69fb      	ldr	r3, [r7, #28]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20000b78 	.word	0x20000b78

08008ee4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4a07      	ldr	r2, [pc, #28]	; (8008f10 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ef4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	4a06      	ldr	r2, [pc, #24]	; (8008f14 <vApplicationGetIdleTaskMemory+0x30>)
 8008efa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2280      	movs	r2, #128	; 0x80
 8008f00:	601a      	str	r2, [r3, #0]
}
 8008f02:	bf00      	nop
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	20000b7c 	.word	0x20000b7c
 8008f14:	20000bd8 	.word	0x20000bd8

08008f18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4a07      	ldr	r2, [pc, #28]	; (8008f44 <vApplicationGetTimerTaskMemory+0x2c>)
 8008f28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	4a06      	ldr	r2, [pc, #24]	; (8008f48 <vApplicationGetTimerTaskMemory+0x30>)
 8008f2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f36:	601a      	str	r2, [r3, #0]
}
 8008f38:	bf00      	nop
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	20000dd8 	.word	0x20000dd8
 8008f48:	20000e34 	.word	0x20000e34

08008f4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f103 0208 	add.w	r2, r3, #8
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f04f 32ff 	mov.w	r2, #4294967295
 8008f64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f103 0208 	add.w	r2, r3, #8
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f103 0208 	add.w	r2, r3, #8
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f9a:	bf00      	nop
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b085      	sub	sp, #20
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	689a      	ldr	r2, [r3, #8]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	601a      	str	r2, [r3, #0]
}
 8008fe2:	bf00      	nop
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b085      	sub	sp, #20
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009004:	d103      	bne.n	800900e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	e00c      	b.n	8009028 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	3308      	adds	r3, #8
 8009012:	60fb      	str	r3, [r7, #12]
 8009014:	e002      	b.n	800901c <vListInsert+0x2e>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	60fb      	str	r3, [r7, #12]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	429a      	cmp	r2, r3
 8009026:	d2f6      	bcs.n	8009016 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	1c5a      	adds	r2, r3, #1
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	601a      	str	r2, [r3, #0]
}
 8009054:	bf00      	nop
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6892      	ldr	r2, [r2, #8]
 8009076:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	6852      	ldr	r2, [r2, #4]
 8009080:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	429a      	cmp	r2, r3
 800908a:	d103      	bne.n	8009094 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	1e5a      	subs	r2, r3, #1
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <xQueueGenericReset+0x2a>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	60bb      	str	r3, [r7, #8]
}
 80090da:	bf00      	nop
 80090dc:	e7fe      	b.n	80090dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80090de:	f002 fdd1 	bl	800bc84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ea:	68f9      	ldr	r1, [r7, #12]
 80090ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090ee:	fb01 f303 	mul.w	r3, r1, r3
 80090f2:	441a      	add	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910e:	3b01      	subs	r3, #1
 8009110:	68f9      	ldr	r1, [r7, #12]
 8009112:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009114:	fb01 f303 	mul.w	r3, r1, r3
 8009118:	441a      	add	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	22ff      	movs	r2, #255	; 0xff
 8009122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	22ff      	movs	r2, #255	; 0xff
 800912a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d114      	bne.n	800915e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d01a      	beq.n	8009172 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3310      	adds	r3, #16
 8009140:	4618      	mov	r0, r3
 8009142:	f001 fd77 	bl	800ac34 <xTaskRemoveFromEventList>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d012      	beq.n	8009172 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800914c:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <xQueueGenericReset+0xcc>)
 800914e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	e009      	b.n	8009172 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3310      	adds	r3, #16
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff fef2 	bl	8008f4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3324      	adds	r3, #36	; 0x24
 800916c:	4618      	mov	r0, r3
 800916e:	f7ff feed 	bl	8008f4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009172:	f002 fdb7 	bl	800bce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009176:	2301      	movs	r3, #1
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	e000ed04 	.word	0xe000ed04

08009184 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009184:	b580      	push	{r7, lr}
 8009186:	b08e      	sub	sp, #56	; 0x38
 8009188:	af02      	add	r7, sp, #8
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
 8009190:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10a      	bne.n	80091ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091aa:	bf00      	nop
 80091ac:	e7fe      	b.n	80091ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091c6:	bf00      	nop
 80091c8:	e7fe      	b.n	80091c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <xQueueGenericCreateStatic+0x52>
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <xQueueGenericCreateStatic+0x56>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e000      	b.n	80091dc <xQueueGenericCreateStatic+0x58>
 80091da:	2300      	movs	r3, #0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10a      	bne.n	80091f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	623b      	str	r3, [r7, #32]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <xQueueGenericCreateStatic+0x7e>
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <xQueueGenericCreateStatic+0x82>
 8009202:	2301      	movs	r3, #1
 8009204:	e000      	b.n	8009208 <xQueueGenericCreateStatic+0x84>
 8009206:	2300      	movs	r3, #0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10a      	bne.n	8009222 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	61fb      	str	r3, [r7, #28]
}
 800921e:	bf00      	nop
 8009220:	e7fe      	b.n	8009220 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009222:	2350      	movs	r3, #80	; 0x50
 8009224:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2b50      	cmp	r3, #80	; 0x50
 800922a:	d00a      	beq.n	8009242 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	61bb      	str	r3, [r7, #24]
}
 800923e:	bf00      	nop
 8009240:	e7fe      	b.n	8009240 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009242:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00d      	beq.n	800926a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800924e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009250:	2201      	movs	r2, #1
 8009252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009256:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800925a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	4613      	mov	r3, r2
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	68b9      	ldr	r1, [r7, #8]
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 f845 	bl	80092f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800926a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800926c:	4618      	mov	r0, r3
 800926e:	3730      	adds	r7, #48	; 0x30
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	; 0x28
 8009278:	af02      	add	r7, sp, #8
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	613b      	str	r3, [r7, #16]
}
 800929a:	bf00      	nop
 800929c:	e7fe      	b.n	800929c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61fb      	str	r3, [r7, #28]
 80092a8:	e004      	b.n	80092b4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	fb02 f303 	mul.w	r3, r2, r3
 80092b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	3350      	adds	r3, #80	; 0x50
 80092b8:	4618      	mov	r0, r3
 80092ba:	f002 fe05 	bl	800bec8 <pvPortMalloc>
 80092be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d011      	beq.n	80092ea <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	3350      	adds	r3, #80	; 0x50
 80092ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092d8:	79fa      	ldrb	r2, [r7, #7]
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	4613      	mov	r3, r2
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	68b9      	ldr	r1, [r7, #8]
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 f805 	bl	80092f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092ea:	69bb      	ldr	r3, [r7, #24]
	}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3720      	adds	r7, #32
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
 8009300:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d103      	bne.n	8009310 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	69ba      	ldr	r2, [r7, #24]
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	e002      	b.n	8009316 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009322:	2101      	movs	r1, #1
 8009324:	69b8      	ldr	r0, [r7, #24]
 8009326:	f7ff fec5 	bl	80090b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	78fa      	ldrb	r2, [r7, #3]
 800932e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009332:	bf00      	nop
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00e      	beq.n	8009366 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800935a:	2300      	movs	r3, #0
 800935c:	2200      	movs	r2, #0
 800935e:	2100      	movs	r1, #0
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f90b 	bl	800957c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009366:	bf00      	nop
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800936e:	b580      	push	{r7, lr}
 8009370:	b086      	sub	sp, #24
 8009372:	af00      	add	r7, sp, #0
 8009374:	4603      	mov	r3, r0
 8009376:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009378:	2301      	movs	r3, #1
 800937a:	617b      	str	r3, [r7, #20]
 800937c:	2300      	movs	r3, #0
 800937e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009380:	79fb      	ldrb	r3, [r7, #7]
 8009382:	461a      	mov	r2, r3
 8009384:	6939      	ldr	r1, [r7, #16]
 8009386:	6978      	ldr	r0, [r7, #20]
 8009388:	f7ff ff74 	bl	8009274 <xQueueGenericCreate>
 800938c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f7ff ffd3 	bl	800933a <prvInitialiseMutex>

		return xNewQueue;
 8009394:	68fb      	ldr	r3, [r7, #12]
	}
 8009396:	4618      	mov	r0, r3
 8009398:	3718      	adds	r7, #24
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b088      	sub	sp, #32
 80093a2:	af02      	add	r7, sp, #8
 80093a4:	4603      	mov	r3, r0
 80093a6:	6039      	str	r1, [r7, #0]
 80093a8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80093aa:	2301      	movs	r3, #1
 80093ac:	617b      	str	r3, [r7, #20]
 80093ae:	2300      	movs	r3, #0
 80093b0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80093b2:	79fb      	ldrb	r3, [r7, #7]
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	2200      	movs	r2, #0
 80093ba:	6939      	ldr	r1, [r7, #16]
 80093bc:	6978      	ldr	r0, [r7, #20]
 80093be:	f7ff fee1 	bl	8009184 <xQueueGenericCreateStatic>
 80093c2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f7ff ffb8 	bl	800933a <prvInitialiseMutex>

		return xNewQueue;
 80093ca:	68fb      	ldr	r3, [r7, #12]
	}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80093d4:	b590      	push	{r4, r7, lr}
 80093d6:	b087      	sub	sp, #28
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10a      	bne.n	80093fc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	60fb      	str	r3, [r7, #12]
}
 80093f8:	bf00      	nop
 80093fa:	e7fe      	b.n	80093fa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	689c      	ldr	r4, [r3, #8]
 8009400:	f001 fdd6 	bl	800afb0 <xTaskGetCurrentTaskHandle>
 8009404:	4603      	mov	r3, r0
 8009406:	429c      	cmp	r4, r3
 8009408:	d111      	bne.n	800942e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	1e5a      	subs	r2, r3, #1
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d105      	bne.n	8009428 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800941c:	2300      	movs	r3, #0
 800941e:	2200      	movs	r2, #0
 8009420:	2100      	movs	r1, #0
 8009422:	6938      	ldr	r0, [r7, #16]
 8009424:	f000 f8aa 	bl	800957c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009428:	2301      	movs	r3, #1
 800942a:	617b      	str	r3, [r7, #20]
 800942c:	e001      	b.n	8009432 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800942e:	2300      	movs	r3, #0
 8009430:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009432:	697b      	ldr	r3, [r7, #20]
	}
 8009434:	4618      	mov	r0, r3
 8009436:	371c      	adds	r7, #28
 8009438:	46bd      	mov	sp, r7
 800943a:	bd90      	pop	{r4, r7, pc}

0800943c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800943c:	b590      	push	{r4, r7, lr}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	60fb      	str	r3, [r7, #12]
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	689c      	ldr	r4, [r3, #8]
 800946a:	f001 fda1 	bl	800afb0 <xTaskGetCurrentTaskHandle>
 800946e:	4603      	mov	r3, r0
 8009470:	429c      	cmp	r4, r3
 8009472:	d107      	bne.n	8009484 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	1c5a      	adds	r2, r3, #1
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800947e:	2301      	movs	r3, #1
 8009480:	617b      	str	r3, [r7, #20]
 8009482:	e00c      	b.n	800949e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6938      	ldr	r0, [r7, #16]
 8009488:	f000 fb7c 	bl	8009b84 <xQueueSemaphoreTake>
 800948c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	1c5a      	adds	r2, r3, #1
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800949e:	697b      	ldr	r3, [r7, #20]
	}
 80094a0:	4618      	mov	r0, r3
 80094a2:	371c      	adds	r7, #28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd90      	pop	{r4, r7, pc}

080094a8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08a      	sub	sp, #40	; 0x28
 80094ac:	af02      	add	r7, sp, #8
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10a      	bne.n	80094d0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	61bb      	str	r3, [r7, #24]
}
 80094cc:	bf00      	nop
 80094ce:	e7fe      	b.n	80094ce <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d90a      	bls.n	80094ee <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	617b      	str	r3, [r7, #20]
}
 80094ea:	bf00      	nop
 80094ec:	e7fe      	b.n	80094ec <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80094ee:	2302      	movs	r3, #2
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	2100      	movs	r1, #0
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff fe43 	bl	8009184 <xQueueGenericCreateStatic>
 80094fe:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d002      	beq.n	800950c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800950c:	69fb      	ldr	r3, [r7, #28]
	}
 800950e:	4618      	mov	r0, r3
 8009510:	3720      	adds	r7, #32
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009516:	b580      	push	{r7, lr}
 8009518:	b086      	sub	sp, #24
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10a      	bne.n	800953c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	613b      	str	r3, [r7, #16]
}
 8009538:	bf00      	nop
 800953a:	e7fe      	b.n	800953a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	429a      	cmp	r2, r3
 8009542:	d90a      	bls.n	800955a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009548:	f383 8811 	msr	BASEPRI, r3
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	60fb      	str	r3, [r7, #12]
}
 8009556:	bf00      	nop
 8009558:	e7fe      	b.n	8009558 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800955a:	2202      	movs	r2, #2
 800955c:	2100      	movs	r1, #0
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7ff fe88 	bl	8009274 <xQueueGenericCreate>
 8009564:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009572:	697b      	ldr	r3, [r7, #20]
	}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08e      	sub	sp, #56	; 0x38
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800958a:	2300      	movs	r3, #0
 800958c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10a      	bne.n	80095ae <xQueueGenericSend+0x32>
	__asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959c:	f383 8811 	msr	BASEPRI, r3
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095aa:	bf00      	nop
 80095ac:	e7fe      	b.n	80095ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d103      	bne.n	80095bc <xQueueGenericSend+0x40>
 80095b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <xQueueGenericSend+0x44>
 80095bc:	2301      	movs	r3, #1
 80095be:	e000      	b.n	80095c2 <xQueueGenericSend+0x46>
 80095c0:	2300      	movs	r3, #0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <xQueueGenericSend+0x60>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095d8:	bf00      	nop
 80095da:	e7fe      	b.n	80095da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d103      	bne.n	80095ea <xQueueGenericSend+0x6e>
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d101      	bne.n	80095ee <xQueueGenericSend+0x72>
 80095ea:	2301      	movs	r3, #1
 80095ec:	e000      	b.n	80095f0 <xQueueGenericSend+0x74>
 80095ee:	2300      	movs	r3, #0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10a      	bne.n	800960a <xQueueGenericSend+0x8e>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	623b      	str	r3, [r7, #32]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800960a:	f001 fce1 	bl	800afd0 <xTaskGetSchedulerState>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d102      	bne.n	800961a <xQueueGenericSend+0x9e>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <xQueueGenericSend+0xa2>
 800961a:	2301      	movs	r3, #1
 800961c:	e000      	b.n	8009620 <xQueueGenericSend+0xa4>
 800961e:	2300      	movs	r3, #0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10a      	bne.n	800963a <xQueueGenericSend+0xbe>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	61fb      	str	r3, [r7, #28]
}
 8009636:	bf00      	nop
 8009638:	e7fe      	b.n	8009638 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800963a:	f002 fb23 	bl	800bc84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800963e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009646:	429a      	cmp	r2, r3
 8009648:	d302      	bcc.n	8009650 <xQueueGenericSend+0xd4>
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b02      	cmp	r3, #2
 800964e:	d129      	bne.n	80096a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009656:	f000 fc7f 	bl	8009f58 <prvCopyDataToQueue>
 800965a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009660:	2b00      	cmp	r3, #0
 8009662:	d010      	beq.n	8009686 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	3324      	adds	r3, #36	; 0x24
 8009668:	4618      	mov	r0, r3
 800966a:	f001 fae3 	bl	800ac34 <xTaskRemoveFromEventList>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d013      	beq.n	800969c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009674:	4b3f      	ldr	r3, [pc, #252]	; (8009774 <xQueueGenericSend+0x1f8>)
 8009676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	e00a      	b.n	800969c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009688:	2b00      	cmp	r3, #0
 800968a:	d007      	beq.n	800969c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800968c:	4b39      	ldr	r3, [pc, #228]	; (8009774 <xQueueGenericSend+0x1f8>)
 800968e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009692:	601a      	str	r2, [r3, #0]
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800969c:	f002 fb22 	bl	800bce4 <vPortExitCritical>
				return pdPASS;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e063      	b.n	800976c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d103      	bne.n	80096b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096aa:	f002 fb1b 	bl	800bce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	e05c      	b.n	800976c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d106      	bne.n	80096c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096b8:	f107 0314 	add.w	r3, r7, #20
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 fb1d 	bl	800acfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096c2:	2301      	movs	r3, #1
 80096c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096c6:	f002 fb0d 	bl	800bce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096ca:	f001 f88f 	bl	800a7ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096ce:	f002 fad9 	bl	800bc84 <vPortEnterCritical>
 80096d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096d8:	b25b      	sxtb	r3, r3
 80096da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096de:	d103      	bne.n	80096e8 <xQueueGenericSend+0x16c>
 80096e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096ee:	b25b      	sxtb	r3, r3
 80096f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f4:	d103      	bne.n	80096fe <xQueueGenericSend+0x182>
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096fe:	f002 faf1 	bl	800bce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009702:	1d3a      	adds	r2, r7, #4
 8009704:	f107 0314 	add.w	r3, r7, #20
 8009708:	4611      	mov	r1, r2
 800970a:	4618      	mov	r0, r3
 800970c:	f001 fb0c 	bl	800ad28 <xTaskCheckForTimeOut>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d124      	bne.n	8009760 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009718:	f000 fd16 	bl	800a148 <prvIsQueueFull>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d018      	beq.n	8009754 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	3310      	adds	r3, #16
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f001 fa32 	bl	800ab94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009732:	f000 fca1 	bl	800a078 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009736:	f001 f867 	bl	800a808 <xTaskResumeAll>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	f47f af7c 	bne.w	800963a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009742:	4b0c      	ldr	r3, [pc, #48]	; (8009774 <xQueueGenericSend+0x1f8>)
 8009744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	e772      	b.n	800963a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009756:	f000 fc8f 	bl	800a078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800975a:	f001 f855 	bl	800a808 <xTaskResumeAll>
 800975e:	e76c      	b.n	800963a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009762:	f000 fc89 	bl	800a078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009766:	f001 f84f 	bl	800a808 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800976a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800976c:	4618      	mov	r0, r3
 800976e:	3738      	adds	r7, #56	; 0x38
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	e000ed04 	.word	0xe000ed04

08009778 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b08e      	sub	sp, #56	; 0x38
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
 8009784:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10a      	bne.n	80097a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097a2:	bf00      	nop
 80097a4:	e7fe      	b.n	80097a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d103      	bne.n	80097b4 <xQueueGenericSendFromISR+0x3c>
 80097ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d101      	bne.n	80097b8 <xQueueGenericSendFromISR+0x40>
 80097b4:	2301      	movs	r3, #1
 80097b6:	e000      	b.n	80097ba <xQueueGenericSendFromISR+0x42>
 80097b8:	2300      	movs	r3, #0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10a      	bne.n	80097d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	623b      	str	r3, [r7, #32]
}
 80097d0:	bf00      	nop
 80097d2:	e7fe      	b.n	80097d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d103      	bne.n	80097e2 <xQueueGenericSendFromISR+0x6a>
 80097da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d101      	bne.n	80097e6 <xQueueGenericSendFromISR+0x6e>
 80097e2:	2301      	movs	r3, #1
 80097e4:	e000      	b.n	80097e8 <xQueueGenericSendFromISR+0x70>
 80097e6:	2300      	movs	r3, #0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10a      	bne.n	8009802 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	61fb      	str	r3, [r7, #28]
}
 80097fe:	bf00      	nop
 8009800:	e7fe      	b.n	8009800 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009802:	f002 fb21 	bl	800be48 <vPortValidateInterruptPriority>
	__asm volatile
 8009806:	f3ef 8211 	mrs	r2, BASEPRI
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	61ba      	str	r2, [r7, #24]
 800981c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800981e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009820:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800982a:	429a      	cmp	r2, r3
 800982c:	d302      	bcc.n	8009834 <xQueueGenericSendFromISR+0xbc>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	2b02      	cmp	r3, #2
 8009832:	d12c      	bne.n	800988e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800983a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	68b9      	ldr	r1, [r7, #8]
 8009842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009844:	f000 fb88 	bl	8009f58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009848:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800984c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009850:	d112      	bne.n	8009878 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009856:	2b00      	cmp	r3, #0
 8009858:	d016      	beq.n	8009888 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	3324      	adds	r3, #36	; 0x24
 800985e:	4618      	mov	r0, r3
 8009860:	f001 f9e8 	bl	800ac34 <xTaskRemoveFromEventList>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00e      	beq.n	8009888 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00b      	beq.n	8009888 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	e007      	b.n	8009888 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009878:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800987c:	3301      	adds	r3, #1
 800987e:	b2db      	uxtb	r3, r3
 8009880:	b25a      	sxtb	r2, r3
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009888:	2301      	movs	r3, #1
 800988a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800988c:	e001      	b.n	8009892 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800988e:	2300      	movs	r3, #0
 8009890:	637b      	str	r3, [r7, #52]	; 0x34
 8009892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009894:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f383 8811 	msr	BASEPRI, r3
}
 800989c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800989e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3738      	adds	r7, #56	; 0x38
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08e      	sub	sp, #56	; 0x38
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10a      	bne.n	80098d2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80098bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	623b      	str	r3, [r7, #32]
}
 80098ce:	bf00      	nop
 80098d0:	e7fe      	b.n	80098d0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00a      	beq.n	80098f0 <xQueueGiveFromISR+0x48>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	61fb      	str	r3, [r7, #28]
}
 80098ec:	bf00      	nop
 80098ee:	e7fe      	b.n	80098ee <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d103      	bne.n	8009900 <xQueueGiveFromISR+0x58>
 80098f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <xQueueGiveFromISR+0x5c>
 8009900:	2301      	movs	r3, #1
 8009902:	e000      	b.n	8009906 <xQueueGiveFromISR+0x5e>
 8009904:	2300      	movs	r3, #0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10a      	bne.n	8009920 <xQueueGiveFromISR+0x78>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	61bb      	str	r3, [r7, #24]
}
 800991c:	bf00      	nop
 800991e:	e7fe      	b.n	800991e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009920:	f002 fa92 	bl	800be48 <vPortValidateInterruptPriority>
	__asm volatile
 8009924:	f3ef 8211 	mrs	r2, BASEPRI
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	617a      	str	r2, [r7, #20]
 800993a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800993c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800993e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009944:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800994a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800994c:	429a      	cmp	r2, r3
 800994e:	d22b      	bcs.n	80099a8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800995a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995c:	1c5a      	adds	r2, r3, #1
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009962:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996a:	d112      	bne.n	8009992 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800996c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009970:	2b00      	cmp	r3, #0
 8009972:	d016      	beq.n	80099a2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009976:	3324      	adds	r3, #36	; 0x24
 8009978:	4618      	mov	r0, r3
 800997a:	f001 f95b 	bl	800ac34 <xTaskRemoveFromEventList>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00e      	beq.n	80099a2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00b      	beq.n	80099a2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2201      	movs	r2, #1
 800998e:	601a      	str	r2, [r3, #0]
 8009990:	e007      	b.n	80099a2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009996:	3301      	adds	r3, #1
 8009998:	b2db      	uxtb	r3, r3
 800999a:	b25a      	sxtb	r2, r3
 800999c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099a2:	2301      	movs	r3, #1
 80099a4:	637b      	str	r3, [r7, #52]	; 0x34
 80099a6:	e001      	b.n	80099ac <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099a8:	2300      	movs	r3, #0
 80099aa:	637b      	str	r3, [r7, #52]	; 0x34
 80099ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ae:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f383 8811 	msr	BASEPRI, r3
}
 80099b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3738      	adds	r7, #56	; 0x38
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08c      	sub	sp, #48	; 0x30
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80099d0:	2300      	movs	r3, #0
 80099d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10a      	bne.n	80099f4 <xQueueReceive+0x30>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	623b      	str	r3, [r7, #32]
}
 80099f0:	bf00      	nop
 80099f2:	e7fe      	b.n	80099f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d103      	bne.n	8009a02 <xQueueReceive+0x3e>
 80099fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d101      	bne.n	8009a06 <xQueueReceive+0x42>
 8009a02:	2301      	movs	r3, #1
 8009a04:	e000      	b.n	8009a08 <xQueueReceive+0x44>
 8009a06:	2300      	movs	r3, #0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10a      	bne.n	8009a22 <xQueueReceive+0x5e>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	61fb      	str	r3, [r7, #28]
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a22:	f001 fad5 	bl	800afd0 <xTaskGetSchedulerState>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d102      	bne.n	8009a32 <xQueueReceive+0x6e>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d101      	bne.n	8009a36 <xQueueReceive+0x72>
 8009a32:	2301      	movs	r3, #1
 8009a34:	e000      	b.n	8009a38 <xQueueReceive+0x74>
 8009a36:	2300      	movs	r3, #0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10a      	bne.n	8009a52 <xQueueReceive+0x8e>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	61bb      	str	r3, [r7, #24]
}
 8009a4e:	bf00      	nop
 8009a50:	e7fe      	b.n	8009a50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a52:	f002 f917 	bl	800bc84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d01f      	beq.n	8009aa2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a62:	68b9      	ldr	r1, [r7, #8]
 8009a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a66:	f000 fae1 	bl	800a02c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	1e5a      	subs	r2, r3, #1
 8009a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00f      	beq.n	8009a9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	3310      	adds	r3, #16
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f001 f8d8 	bl	800ac34 <xTaskRemoveFromEventList>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d007      	beq.n	8009a9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a8a:	4b3d      	ldr	r3, [pc, #244]	; (8009b80 <xQueueReceive+0x1bc>)
 8009a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a9a:	f002 f923 	bl	800bce4 <vPortExitCritical>
				return pdPASS;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e069      	b.n	8009b76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d103      	bne.n	8009ab0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009aa8:	f002 f91c 	bl	800bce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009aac:	2300      	movs	r3, #0
 8009aae:	e062      	b.n	8009b76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d106      	bne.n	8009ac4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ab6:	f107 0310 	add.w	r3, r7, #16
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 f91e 	bl	800acfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ac4:	f002 f90e 	bl	800bce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ac8:	f000 fe90 	bl	800a7ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009acc:	f002 f8da 	bl	800bc84 <vPortEnterCritical>
 8009ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ad6:	b25b      	sxtb	r3, r3
 8009ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009adc:	d103      	bne.n	8009ae6 <xQueueReceive+0x122>
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009aec:	b25b      	sxtb	r3, r3
 8009aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af2:	d103      	bne.n	8009afc <xQueueReceive+0x138>
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009afc:	f002 f8f2 	bl	800bce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b00:	1d3a      	adds	r2, r7, #4
 8009b02:	f107 0310 	add.w	r3, r7, #16
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f001 f90d 	bl	800ad28 <xTaskCheckForTimeOut>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d123      	bne.n	8009b5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b16:	f000 fb01 	bl	800a11c <prvIsQueueEmpty>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d017      	beq.n	8009b50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	3324      	adds	r3, #36	; 0x24
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	4611      	mov	r1, r2
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f001 f833 	bl	800ab94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b30:	f000 faa2 	bl	800a078 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b34:	f000 fe68 	bl	800a808 <xTaskResumeAll>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d189      	bne.n	8009a52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009b3e:	4b10      	ldr	r3, [pc, #64]	; (8009b80 <xQueueReceive+0x1bc>)
 8009b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	e780      	b.n	8009a52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b52:	f000 fa91 	bl	800a078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b56:	f000 fe57 	bl	800a808 <xTaskResumeAll>
 8009b5a:	e77a      	b.n	8009a52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b5e:	f000 fa8b 	bl	800a078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b62:	f000 fe51 	bl	800a808 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b68:	f000 fad8 	bl	800a11c <prvIsQueueEmpty>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f43f af6f 	beq.w	8009a52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3730      	adds	r7, #48	; 0x30
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	e000ed04 	.word	0xe000ed04

08009b84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08e      	sub	sp, #56	; 0x38
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009b96:	2300      	movs	r3, #0
 8009b98:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10a      	bne.n	8009bb6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	623b      	str	r3, [r7, #32]
}
 8009bb2:	bf00      	nop
 8009bb4:	e7fe      	b.n	8009bb4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00a      	beq.n	8009bd4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	61fb      	str	r3, [r7, #28]
}
 8009bd0:	bf00      	nop
 8009bd2:	e7fe      	b.n	8009bd2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bd4:	f001 f9fc 	bl	800afd0 <xTaskGetSchedulerState>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d102      	bne.n	8009be4 <xQueueSemaphoreTake+0x60>
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <xQueueSemaphoreTake+0x64>
 8009be4:	2301      	movs	r3, #1
 8009be6:	e000      	b.n	8009bea <xQueueSemaphoreTake+0x66>
 8009be8:	2300      	movs	r3, #0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10a      	bne.n	8009c04 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	61bb      	str	r3, [r7, #24]
}
 8009c00:	bf00      	nop
 8009c02:	e7fe      	b.n	8009c02 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c04:	f002 f83e 	bl	800bc84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d024      	beq.n	8009c5e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c16:	1e5a      	subs	r2, r3, #1
 8009c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d104      	bne.n	8009c2e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c24:	f001 fb4a 	bl	800b2bc <pvTaskIncrementMutexHeldCount>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00f      	beq.n	8009c56 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c38:	3310      	adds	r3, #16
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 fffa 	bl	800ac34 <xTaskRemoveFromEventList>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d007      	beq.n	8009c56 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c46:	4b54      	ldr	r3, [pc, #336]	; (8009d98 <xQueueSemaphoreTake+0x214>)
 8009c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c56:	f002 f845 	bl	800bce4 <vPortExitCritical>
				return pdPASS;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e097      	b.n	8009d8e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d111      	bne.n	8009c88 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	617b      	str	r3, [r7, #20]
}
 8009c7c:	bf00      	nop
 8009c7e:	e7fe      	b.n	8009c7e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009c80:	f002 f830 	bl	800bce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c84:	2300      	movs	r3, #0
 8009c86:	e082      	b.n	8009d8e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d106      	bne.n	8009c9c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c8e:	f107 030c 	add.w	r3, r7, #12
 8009c92:	4618      	mov	r0, r3
 8009c94:	f001 f832 	bl	800acfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c9c:	f002 f822 	bl	800bce4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ca0:	f000 fda4 	bl	800a7ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ca4:	f001 ffee 	bl	800bc84 <vPortEnterCritical>
 8009ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cae:	b25b      	sxtb	r3, r3
 8009cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb4:	d103      	bne.n	8009cbe <xQueueSemaphoreTake+0x13a>
 8009cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cc4:	b25b      	sxtb	r3, r3
 8009cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cca:	d103      	bne.n	8009cd4 <xQueueSemaphoreTake+0x150>
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cd4:	f002 f806 	bl	800bce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cd8:	463a      	mov	r2, r7
 8009cda:	f107 030c 	add.w	r3, r7, #12
 8009cde:	4611      	mov	r1, r2
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f001 f821 	bl	800ad28 <xTaskCheckForTimeOut>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d132      	bne.n	8009d52 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cee:	f000 fa15 	bl	800a11c <prvIsQueueEmpty>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d026      	beq.n	8009d46 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d109      	bne.n	8009d14 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009d00:	f001 ffc0 	bl	800bc84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f001 f97f 	bl	800b00c <xTaskPriorityInherit>
 8009d0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009d10:	f001 ffe8 	bl	800bce4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d16:	3324      	adds	r3, #36	; 0x24
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 ff39 	bl	800ab94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d24:	f000 f9a8 	bl	800a078 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d28:	f000 fd6e 	bl	800a808 <xTaskResumeAll>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f47f af68 	bne.w	8009c04 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009d34:	4b18      	ldr	r3, [pc, #96]	; (8009d98 <xQueueSemaphoreTake+0x214>)
 8009d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	e75e      	b.n	8009c04 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009d46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d48:	f000 f996 	bl	800a078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d4c:	f000 fd5c 	bl	800a808 <xTaskResumeAll>
 8009d50:	e758      	b.n	8009c04 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009d52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d54:	f000 f990 	bl	800a078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d58:	f000 fd56 	bl	800a808 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d5e:	f000 f9dd 	bl	800a11c <prvIsQueueEmpty>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f43f af4d 	beq.w	8009c04 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00d      	beq.n	8009d8c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009d70:	f001 ff88 	bl	800bc84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d76:	f000 f8d7 	bl	8009f28 <prvGetDisinheritPriorityAfterTimeout>
 8009d7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d82:	4618      	mov	r0, r3
 8009d84:	f001 fa18 	bl	800b1b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009d88:	f001 ffac 	bl	800bce4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3738      	adds	r7, #56	; 0x38
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b08e      	sub	sp, #56	; 0x38
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10a      	bne.n	8009dc8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	623b      	str	r3, [r7, #32]
}
 8009dc4:	bf00      	nop
 8009dc6:	e7fe      	b.n	8009dc6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d103      	bne.n	8009dd6 <xQueueReceiveFromISR+0x3a>
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <xQueueReceiveFromISR+0x3e>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e000      	b.n	8009ddc <xQueueReceiveFromISR+0x40>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d10a      	bne.n	8009df6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	61fb      	str	r3, [r7, #28]
}
 8009df2:	bf00      	nop
 8009df4:	e7fe      	b.n	8009df4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009df6:	f002 f827 	bl	800be48 <vPortValidateInterruptPriority>
	__asm volatile
 8009dfa:	f3ef 8211 	mrs	r2, BASEPRI
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	61ba      	str	r2, [r7, #24]
 8009e10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009e12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d02f      	beq.n	8009e82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e2c:	68b9      	ldr	r1, [r7, #8]
 8009e2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e30:	f000 f8fc 	bl	800a02c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e36:	1e5a      	subs	r2, r3, #1
 8009e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e44:	d112      	bne.n	8009e6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d016      	beq.n	8009e7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e50:	3310      	adds	r3, #16
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 feee 	bl	800ac34 <xTaskRemoveFromEventList>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00e      	beq.n	8009e7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00b      	beq.n	8009e7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	e007      	b.n	8009e7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e70:	3301      	adds	r3, #1
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	b25a      	sxtb	r2, r3
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e80:	e001      	b.n	8009e86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009e82:	2300      	movs	r3, #0
 8009e84:	637b      	str	r3, [r7, #52]	; 0x34
 8009e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	f383 8811 	msr	BASEPRI, r3
}
 8009e90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3738      	adds	r7, #56	; 0x38
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10a      	bne.n	8009ec4 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 8009eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	60fb      	str	r3, [r7, #12]
}
 8009ec0:	bf00      	nop
 8009ec2:	e7fe      	b.n	8009ec2 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8009ec4:	f001 fede 	bl	800bc84 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009ed4:	f001 ff06 	bl	800bce4 <vPortExitCritical>

	return uxReturn;
 8009ed8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10a      	bne.n	8009f0a <vQueueDelete+0x28>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	60bb      	str	r3, [r7, #8]
}
 8009f06:	bf00      	nop
 8009f08:	e7fe      	b.n	8009f08 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 f95e 	bl	800a1cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d102      	bne.n	8009f20 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f002 f898 	bl	800c050 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009f20:	bf00      	nop
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d006      	beq.n	8009f46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	e001      	b.n	8009f4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009f46:	2300      	movs	r3, #0
 8009f48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
	}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f64:	2300      	movs	r3, #0
 8009f66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10d      	bne.n	8009f92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d14d      	bne.n	800a01a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	4618      	mov	r0, r3
 8009f84:	f001 f8aa 	bl	800b0dc <xTaskPriorityDisinherit>
 8009f88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	609a      	str	r2, [r3, #8]
 8009f90:	e043      	b.n	800a01a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d119      	bne.n	8009fcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6858      	ldr	r0, [r3, #4]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	68b9      	ldr	r1, [r7, #8]
 8009fa4:	f002 fca8 	bl	800c8f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb0:	441a      	add	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d32b      	bcc.n	800a01a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	605a      	str	r2, [r3, #4]
 8009fca:	e026      	b.n	800a01a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	68d8      	ldr	r0, [r3, #12]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	68b9      	ldr	r1, [r7, #8]
 8009fd8:	f002 fc8e 	bl	800c8f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	68da      	ldr	r2, [r3, #12]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe4:	425b      	negs	r3, r3
 8009fe6:	441a      	add	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	68da      	ldr	r2, [r3, #12]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d207      	bcs.n	800a008 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	689a      	ldr	r2, [r3, #8]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a000:	425b      	negs	r3, r3
 800a002:	441a      	add	r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d105      	bne.n	800a01a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	3b01      	subs	r3, #1
 800a018:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	1c5a      	adds	r2, r3, #1
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a022:	697b      	ldr	r3, [r7, #20]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d018      	beq.n	800a070 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68da      	ldr	r2, [r3, #12]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a046:	441a      	add	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	68da      	ldr	r2, [r3, #12]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	429a      	cmp	r2, r3
 800a056:	d303      	bcc.n	800a060 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	68d9      	ldr	r1, [r3, #12]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a068:	461a      	mov	r2, r3
 800a06a:	6838      	ldr	r0, [r7, #0]
 800a06c:	f002 fc44 	bl	800c8f8 <memcpy>
	}
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a080:	f001 fe00 	bl	800bc84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a08a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a08c:	e011      	b.n	800a0b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a092:	2b00      	cmp	r3, #0
 800a094:	d012      	beq.n	800a0bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3324      	adds	r3, #36	; 0x24
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 fdca 	bl	800ac34 <xTaskRemoveFromEventList>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d001      	beq.n	800a0aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a0a6:	f000 fea1 	bl	800adec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	dce9      	bgt.n	800a08e <prvUnlockQueue+0x16>
 800a0ba:	e000      	b.n	800a0be <prvUnlockQueue+0x46>
					break;
 800a0bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	22ff      	movs	r2, #255	; 0xff
 800a0c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a0c6:	f001 fe0d 	bl	800bce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a0ca:	f001 fddb 	bl	800bc84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0d6:	e011      	b.n	800a0fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d012      	beq.n	800a106 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3310      	adds	r3, #16
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 fda5 	bl	800ac34 <xTaskRemoveFromEventList>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0f0:	f000 fe7c 	bl	800adec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a100:	2b00      	cmp	r3, #0
 800a102:	dce9      	bgt.n	800a0d8 <prvUnlockQueue+0x60>
 800a104:	e000      	b.n	800a108 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a106:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	22ff      	movs	r2, #255	; 0xff
 800a10c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a110:	f001 fde8 	bl	800bce4 <vPortExitCritical>
}
 800a114:	bf00      	nop
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a124:	f001 fdae 	bl	800bc84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d102      	bne.n	800a136 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a130:	2301      	movs	r3, #1
 800a132:	60fb      	str	r3, [r7, #12]
 800a134:	e001      	b.n	800a13a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a136:	2300      	movs	r3, #0
 800a138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a13a:	f001 fdd3 	bl	800bce4 <vPortExitCritical>

	return xReturn;
 800a13e:	68fb      	ldr	r3, [r7, #12]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a150:	f001 fd98 	bl	800bc84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d102      	bne.n	800a166 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a160:	2301      	movs	r3, #1
 800a162:	60fb      	str	r3, [r7, #12]
 800a164:	e001      	b.n	800a16a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a166:	2300      	movs	r3, #0
 800a168:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a16a:	f001 fdbb 	bl	800bce4 <vPortExitCritical>

	return xReturn;
 800a16e:	68fb      	ldr	r3, [r7, #12]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a182:	2300      	movs	r3, #0
 800a184:	60fb      	str	r3, [r7, #12]
 800a186:	e014      	b.n	800a1b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a188:	4a0f      	ldr	r2, [pc, #60]	; (800a1c8 <vQueueAddToRegistry+0x50>)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10b      	bne.n	800a1ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a194:	490c      	ldr	r1, [pc, #48]	; (800a1c8 <vQueueAddToRegistry+0x50>)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a19e:	4a0a      	ldr	r2, [pc, #40]	; (800a1c8 <vQueueAddToRegistry+0x50>)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a1aa:	e006      	b.n	800a1ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b07      	cmp	r3, #7
 800a1b6:	d9e7      	bls.n	800a188 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	20005760 	.word	0x20005760

0800a1cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	e016      	b.n	800a208 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a1da:	4a10      	ldr	r2, [pc, #64]	; (800a21c <vQueueUnregisterQueue+0x50>)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	00db      	lsls	r3, r3, #3
 800a1e0:	4413      	add	r3, r2
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d10b      	bne.n	800a202 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a1ea:	4a0c      	ldr	r2, [pc, #48]	; (800a21c <vQueueUnregisterQueue+0x50>)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a1f4:	4a09      	ldr	r2, [pc, #36]	; (800a21c <vQueueUnregisterQueue+0x50>)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	00db      	lsls	r3, r3, #3
 800a1fa:	4413      	add	r3, r2
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	605a      	str	r2, [r3, #4]
				break;
 800a200:	e006      	b.n	800a210 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3301      	adds	r3, #1
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2b07      	cmp	r3, #7
 800a20c:	d9e5      	bls.n	800a1da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a20e:	bf00      	nop
 800a210:	bf00      	nop
 800a212:	3714      	adds	r7, #20
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	20005760 	.word	0x20005760

0800a220 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a230:	f001 fd28 	bl	800bc84 <vPortEnterCritical>
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a23a:	b25b      	sxtb	r3, r3
 800a23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a240:	d103      	bne.n	800a24a <vQueueWaitForMessageRestricted+0x2a>
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a250:	b25b      	sxtb	r3, r3
 800a252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a256:	d103      	bne.n	800a260 <vQueueWaitForMessageRestricted+0x40>
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a260:	f001 fd40 	bl	800bce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d106      	bne.n	800a27a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	3324      	adds	r3, #36	; 0x24
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	68b9      	ldr	r1, [r7, #8]
 800a274:	4618      	mov	r0, r3
 800a276:	f000 fcb1 	bl	800abdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a27a:	6978      	ldr	r0, [r7, #20]
 800a27c:	f7ff fefc 	bl	800a078 <prvUnlockQueue>
	}
 800a280:	bf00      	nop
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b08e      	sub	sp, #56	; 0x38
 800a28c:	af04      	add	r7, sp, #16
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10a      	bne.n	800a2b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	623b      	str	r3, [r7, #32]
}
 800a2ae:	bf00      	nop
 800a2b0:	e7fe      	b.n	800a2b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10a      	bne.n	800a2ce <xTaskCreateStatic+0x46>
	__asm volatile
 800a2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2bc:	f383 8811 	msr	BASEPRI, r3
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	61fb      	str	r3, [r7, #28]
}
 800a2ca:	bf00      	nop
 800a2cc:	e7fe      	b.n	800a2cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a2ce:	235c      	movs	r3, #92	; 0x5c
 800a2d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	2b5c      	cmp	r3, #92	; 0x5c
 800a2d6:	d00a      	beq.n	800a2ee <xTaskCreateStatic+0x66>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	61bb      	str	r3, [r7, #24]
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a2ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d01e      	beq.n	800a334 <xTaskCreateStatic+0xac>
 800a2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d01b      	beq.n	800a334 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a304:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	2202      	movs	r2, #2
 800a30a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a30e:	2300      	movs	r3, #0
 800a310:	9303      	str	r3, [sp, #12]
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	9302      	str	r3, [sp, #8]
 800a316:	f107 0314 	add.w	r3, r7, #20
 800a31a:	9301      	str	r3, [sp, #4]
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	68b9      	ldr	r1, [r7, #8]
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f000 f850 	bl	800a3cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a32c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a32e:	f000 f8dd 	bl	800a4ec <prvAddNewTaskToReadyList>
 800a332:	e001      	b.n	800a338 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a334:	2300      	movs	r3, #0
 800a336:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a338:	697b      	ldr	r3, [r7, #20]
	}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3728      	adds	r7, #40	; 0x28
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a342:	b580      	push	{r7, lr}
 800a344:	b08c      	sub	sp, #48	; 0x30
 800a346:	af04      	add	r7, sp, #16
 800a348:	60f8      	str	r0, [r7, #12]
 800a34a:	60b9      	str	r1, [r7, #8]
 800a34c:	603b      	str	r3, [r7, #0]
 800a34e:	4613      	mov	r3, r2
 800a350:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a352:	88fb      	ldrh	r3, [r7, #6]
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4618      	mov	r0, r3
 800a358:	f001 fdb6 	bl	800bec8 <pvPortMalloc>
 800a35c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00e      	beq.n	800a382 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a364:	205c      	movs	r0, #92	; 0x5c
 800a366:	f001 fdaf 	bl	800bec8 <pvPortMalloc>
 800a36a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	631a      	str	r2, [r3, #48]	; 0x30
 800a378:	e005      	b.n	800a386 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a37a:	6978      	ldr	r0, [r7, #20]
 800a37c:	f001 fe68 	bl	800c050 <vPortFree>
 800a380:	e001      	b.n	800a386 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a382:	2300      	movs	r3, #0
 800a384:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d017      	beq.n	800a3bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a394:	88fa      	ldrh	r2, [r7, #6]
 800a396:	2300      	movs	r3, #0
 800a398:	9303      	str	r3, [sp, #12]
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	9302      	str	r3, [sp, #8]
 800a39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	68b9      	ldr	r1, [r7, #8]
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 f80e 	bl	800a3cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3b0:	69f8      	ldr	r0, [r7, #28]
 800a3b2:	f000 f89b 	bl	800a4ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	61bb      	str	r3, [r7, #24]
 800a3ba:	e002      	b.n	800a3c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a3c2:	69bb      	ldr	r3, [r7, #24]
	}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3720      	adds	r7, #32
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b088      	sub	sp, #32
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	21a5      	movs	r1, #165	; 0xa5
 800a3e6:	f002 fa95 	bl	800c914 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4413      	add	r3, r2
 800a3fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	f023 0307 	bic.w	r3, r3, #7
 800a402:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00a      	beq.n	800a424 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
 800a41e:	617b      	str	r3, [r7, #20]
}
 800a420:	bf00      	nop
 800a422:	e7fe      	b.n	800a422 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d01f      	beq.n	800a46a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a42a:	2300      	movs	r3, #0
 800a42c:	61fb      	str	r3, [r7, #28]
 800a42e:	e012      	b.n	800a456 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	4413      	add	r3, r2
 800a436:	7819      	ldrb	r1, [r3, #0]
 800a438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	4413      	add	r3, r2
 800a43e:	3334      	adds	r3, #52	; 0x34
 800a440:	460a      	mov	r2, r1
 800a442:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	4413      	add	r3, r2
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d006      	beq.n	800a45e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	3301      	adds	r3, #1
 800a454:	61fb      	str	r3, [r7, #28]
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	2b0f      	cmp	r3, #15
 800a45a:	d9e9      	bls.n	800a430 <prvInitialiseNewTask+0x64>
 800a45c:	e000      	b.n	800a460 <prvInitialiseNewTask+0x94>
			{
				break;
 800a45e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a462:	2200      	movs	r2, #0
 800a464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a468:	e003      	b.n	800a472 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a474:	2b37      	cmp	r3, #55	; 0x37
 800a476:	d901      	bls.n	800a47c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a478:	2337      	movs	r3, #55	; 0x37
 800a47a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a480:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a486:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48a:	2200      	movs	r2, #0
 800a48c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a490:	3304      	adds	r3, #4
 800a492:	4618      	mov	r0, r3
 800a494:	f7fe fd7a 	bl	8008f8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49a:	3318      	adds	r3, #24
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fe fd75 	bl	8008f8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	68f9      	ldr	r1, [r7, #12]
 800a4ca:	69b8      	ldr	r0, [r7, #24]
 800a4cc:	f001 faac 	bl	800ba28 <pxPortInitialiseStack>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4e2:	bf00      	nop
 800a4e4:	3720      	adds	r7, #32
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
	...

0800a4ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a4f4:	f001 fbc6 	bl	800bc84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4f8:	4b2d      	ldr	r3, [pc, #180]	; (800a5b0 <prvAddNewTaskToReadyList+0xc4>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	4a2c      	ldr	r2, [pc, #176]	; (800a5b0 <prvAddNewTaskToReadyList+0xc4>)
 800a500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a502:	4b2c      	ldr	r3, [pc, #176]	; (800a5b4 <prvAddNewTaskToReadyList+0xc8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d109      	bne.n	800a51e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a50a:	4a2a      	ldr	r2, [pc, #168]	; (800a5b4 <prvAddNewTaskToReadyList+0xc8>)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a510:	4b27      	ldr	r3, [pc, #156]	; (800a5b0 <prvAddNewTaskToReadyList+0xc4>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b01      	cmp	r3, #1
 800a516:	d110      	bne.n	800a53a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a518:	f000 fc8c 	bl	800ae34 <prvInitialiseTaskLists>
 800a51c:	e00d      	b.n	800a53a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a51e:	4b26      	ldr	r3, [pc, #152]	; (800a5b8 <prvAddNewTaskToReadyList+0xcc>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d109      	bne.n	800a53a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a526:	4b23      	ldr	r3, [pc, #140]	; (800a5b4 <prvAddNewTaskToReadyList+0xc8>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a530:	429a      	cmp	r2, r3
 800a532:	d802      	bhi.n	800a53a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a534:	4a1f      	ldr	r2, [pc, #124]	; (800a5b4 <prvAddNewTaskToReadyList+0xc8>)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a53a:	4b20      	ldr	r3, [pc, #128]	; (800a5bc <prvAddNewTaskToReadyList+0xd0>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3301      	adds	r3, #1
 800a540:	4a1e      	ldr	r2, [pc, #120]	; (800a5bc <prvAddNewTaskToReadyList+0xd0>)
 800a542:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a544:	4b1d      	ldr	r3, [pc, #116]	; (800a5bc <prvAddNewTaskToReadyList+0xd0>)
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a550:	4b1b      	ldr	r3, [pc, #108]	; (800a5c0 <prvAddNewTaskToReadyList+0xd4>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	429a      	cmp	r2, r3
 800a556:	d903      	bls.n	800a560 <prvAddNewTaskToReadyList+0x74>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55c:	4a18      	ldr	r2, [pc, #96]	; (800a5c0 <prvAddNewTaskToReadyList+0xd4>)
 800a55e:	6013      	str	r3, [r2, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a564:	4613      	mov	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4a15      	ldr	r2, [pc, #84]	; (800a5c4 <prvAddNewTaskToReadyList+0xd8>)
 800a56e:	441a      	add	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	3304      	adds	r3, #4
 800a574:	4619      	mov	r1, r3
 800a576:	4610      	mov	r0, r2
 800a578:	f7fe fd15 	bl	8008fa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a57c:	f001 fbb2 	bl	800bce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a580:	4b0d      	ldr	r3, [pc, #52]	; (800a5b8 <prvAddNewTaskToReadyList+0xcc>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00e      	beq.n	800a5a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a588:	4b0a      	ldr	r3, [pc, #40]	; (800a5b4 <prvAddNewTaskToReadyList+0xc8>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a592:	429a      	cmp	r2, r3
 800a594:	d207      	bcs.n	800a5a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a596:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <prvAddNewTaskToReadyList+0xdc>)
 800a598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5a6:	bf00      	nop
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20001708 	.word	0x20001708
 800a5b4:	20001234 	.word	0x20001234
 800a5b8:	20001714 	.word	0x20001714
 800a5bc:	20001724 	.word	0x20001724
 800a5c0:	20001710 	.word	0x20001710
 800a5c4:	20001238 	.word	0x20001238
 800a5c8:	e000ed04 	.word	0xe000ed04

0800a5cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d017      	beq.n	800a60e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a5de:	4b13      	ldr	r3, [pc, #76]	; (800a62c <vTaskDelay+0x60>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00a      	beq.n	800a5fc <vTaskDelay+0x30>
	__asm volatile
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	60bb      	str	r3, [r7, #8]
}
 800a5f8:	bf00      	nop
 800a5fa:	e7fe      	b.n	800a5fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a5fc:	f000 f8f6 	bl	800a7ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a600:	2100      	movs	r1, #0
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fe6e 	bl	800b2e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a608:	f000 f8fe 	bl	800a808 <xTaskResumeAll>
 800a60c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d107      	bne.n	800a624 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a614:	4b06      	ldr	r3, [pc, #24]	; (800a630 <vTaskDelay+0x64>)
 800a616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a624:	bf00      	nop
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	20001730 	.word	0x20001730
 800a630:	e000ed04 	.word	0xe000ed04

0800a634 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a63c:	f001 fb22 	bl	800bc84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d102      	bne.n	800a64c <vTaskSuspend+0x18>
 800a646:	4b30      	ldr	r3, [pc, #192]	; (800a708 <vTaskSuspend+0xd4>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	e000      	b.n	800a64e <vTaskSuspend+0x1a>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	3304      	adds	r3, #4
 800a654:	4618      	mov	r0, r3
 800a656:	f7fe fd03 	bl	8009060 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d004      	beq.n	800a66c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3318      	adds	r3, #24
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe fcfa 	bl	8009060 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	3304      	adds	r3, #4
 800a670:	4619      	mov	r1, r3
 800a672:	4826      	ldr	r0, [pc, #152]	; (800a70c <vTaskSuspend+0xd8>)
 800a674:	f7fe fc97 	bl	8008fa6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	2b01      	cmp	r3, #1
 800a682:	d103      	bne.n	800a68c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a68c:	f001 fb2a 	bl	800bce4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a690:	4b1f      	ldr	r3, [pc, #124]	; (800a710 <vTaskSuspend+0xdc>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d005      	beq.n	800a6a4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a698:	f001 faf4 	bl	800bc84 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a69c:	f000 fc68 	bl	800af70 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a6a0:	f001 fb20 	bl	800bce4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a6a4:	4b18      	ldr	r3, [pc, #96]	; (800a708 <vTaskSuspend+0xd4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d127      	bne.n	800a6fe <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800a6ae:	4b18      	ldr	r3, [pc, #96]	; (800a710 <vTaskSuspend+0xdc>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d017      	beq.n	800a6e6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a6b6:	4b17      	ldr	r3, [pc, #92]	; (800a714 <vTaskSuspend+0xe0>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00a      	beq.n	800a6d4 <vTaskSuspend+0xa0>
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	60bb      	str	r3, [r7, #8]
}
 800a6d0:	bf00      	nop
 800a6d2:	e7fe      	b.n	800a6d2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a6d4:	4b10      	ldr	r3, [pc, #64]	; (800a718 <vTaskSuspend+0xe4>)
 800a6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6da:	601a      	str	r2, [r3, #0]
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6e4:	e00b      	b.n	800a6fe <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a6e6:	4b09      	ldr	r3, [pc, #36]	; (800a70c <vTaskSuspend+0xd8>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	4b0c      	ldr	r3, [pc, #48]	; (800a71c <vTaskSuspend+0xe8>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d103      	bne.n	800a6fa <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800a6f2:	4b05      	ldr	r3, [pc, #20]	; (800a708 <vTaskSuspend+0xd4>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]
	}
 800a6f8:	e001      	b.n	800a6fe <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800a6fa:	f000 f9ed 	bl	800aad8 <vTaskSwitchContext>
	}
 800a6fe:	bf00      	nop
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	20001234 	.word	0x20001234
 800a70c:	200016f4 	.word	0x200016f4
 800a710:	20001714 	.word	0x20001714
 800a714:	20001730 	.word	0x20001730
 800a718:	e000ed04 	.word	0xe000ed04
 800a71c:	20001708 	.word	0x20001708

0800a720 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08a      	sub	sp, #40	; 0x28
 800a724:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a726:	2300      	movs	r3, #0
 800a728:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a72a:	2300      	movs	r3, #0
 800a72c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a72e:	463a      	mov	r2, r7
 800a730:	1d39      	adds	r1, r7, #4
 800a732:	f107 0308 	add.w	r3, r7, #8
 800a736:	4618      	mov	r0, r3
 800a738:	f7fe fbd4 	bl	8008ee4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	9202      	str	r2, [sp, #8]
 800a744:	9301      	str	r3, [sp, #4]
 800a746:	2300      	movs	r3, #0
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	2300      	movs	r3, #0
 800a74c:	460a      	mov	r2, r1
 800a74e:	4921      	ldr	r1, [pc, #132]	; (800a7d4 <vTaskStartScheduler+0xb4>)
 800a750:	4821      	ldr	r0, [pc, #132]	; (800a7d8 <vTaskStartScheduler+0xb8>)
 800a752:	f7ff fd99 	bl	800a288 <xTaskCreateStatic>
 800a756:	4603      	mov	r3, r0
 800a758:	4a20      	ldr	r2, [pc, #128]	; (800a7dc <vTaskStartScheduler+0xbc>)
 800a75a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a75c:	4b1f      	ldr	r3, [pc, #124]	; (800a7dc <vTaskStartScheduler+0xbc>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a764:	2301      	movs	r3, #1
 800a766:	617b      	str	r3, [r7, #20]
 800a768:	e001      	b.n	800a76e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a76a:	2300      	movs	r3, #0
 800a76c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d102      	bne.n	800a77a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a774:	f000 fe0a 	bl	800b38c <xTimerCreateTimerTask>
 800a778:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d116      	bne.n	800a7ae <vTaskStartScheduler+0x8e>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	613b      	str	r3, [r7, #16]
}
 800a792:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a794:	4b12      	ldr	r3, [pc, #72]	; (800a7e0 <vTaskStartScheduler+0xc0>)
 800a796:	f04f 32ff 	mov.w	r2, #4294967295
 800a79a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a79c:	4b11      	ldr	r3, [pc, #68]	; (800a7e4 <vTaskStartScheduler+0xc4>)
 800a79e:	2201      	movs	r2, #1
 800a7a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a7a2:	4b11      	ldr	r3, [pc, #68]	; (800a7e8 <vTaskStartScheduler+0xc8>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a7a8:	f001 f9ca 	bl	800bb40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a7ac:	e00e      	b.n	800a7cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b4:	d10a      	bne.n	800a7cc <vTaskStartScheduler+0xac>
	__asm volatile
 800a7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ba:	f383 8811 	msr	BASEPRI, r3
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	60fb      	str	r3, [r7, #12]
}
 800a7c8:	bf00      	nop
 800a7ca:	e7fe      	b.n	800a7ca <vTaskStartScheduler+0xaa>
}
 800a7cc:	bf00      	nop
 800a7ce:	3718      	adds	r7, #24
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	0800d34c 	.word	0x0800d34c
 800a7d8:	0800ae05 	.word	0x0800ae05
 800a7dc:	2000172c 	.word	0x2000172c
 800a7e0:	20001728 	.word	0x20001728
 800a7e4:	20001714 	.word	0x20001714
 800a7e8:	2000170c 	.word	0x2000170c

0800a7ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a7f0:	4b04      	ldr	r3, [pc, #16]	; (800a804 <vTaskSuspendAll+0x18>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	4a03      	ldr	r2, [pc, #12]	; (800a804 <vTaskSuspendAll+0x18>)
 800a7f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a7fa:	bf00      	nop
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr
 800a804:	20001730 	.word	0x20001730

0800a808 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a80e:	2300      	movs	r3, #0
 800a810:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a812:	2300      	movs	r3, #0
 800a814:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a816:	4b42      	ldr	r3, [pc, #264]	; (800a920 <xTaskResumeAll+0x118>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10a      	bne.n	800a834 <xTaskResumeAll+0x2c>
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	603b      	str	r3, [r7, #0]
}
 800a830:	bf00      	nop
 800a832:	e7fe      	b.n	800a832 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a834:	f001 fa26 	bl	800bc84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a838:	4b39      	ldr	r3, [pc, #228]	; (800a920 <xTaskResumeAll+0x118>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3b01      	subs	r3, #1
 800a83e:	4a38      	ldr	r2, [pc, #224]	; (800a920 <xTaskResumeAll+0x118>)
 800a840:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a842:	4b37      	ldr	r3, [pc, #220]	; (800a920 <xTaskResumeAll+0x118>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d162      	bne.n	800a910 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a84a:	4b36      	ldr	r3, [pc, #216]	; (800a924 <xTaskResumeAll+0x11c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d05e      	beq.n	800a910 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a852:	e02f      	b.n	800a8b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a854:	4b34      	ldr	r3, [pc, #208]	; (800a928 <xTaskResumeAll+0x120>)
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3318      	adds	r3, #24
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe fbfd 	bl	8009060 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3304      	adds	r3, #4
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe fbf8 	bl	8009060 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a874:	4b2d      	ldr	r3, [pc, #180]	; (800a92c <xTaskResumeAll+0x124>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d903      	bls.n	800a884 <xTaskResumeAll+0x7c>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a880:	4a2a      	ldr	r2, [pc, #168]	; (800a92c <xTaskResumeAll+0x124>)
 800a882:	6013      	str	r3, [r2, #0]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a888:	4613      	mov	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4a27      	ldr	r2, [pc, #156]	; (800a930 <xTaskResumeAll+0x128>)
 800a892:	441a      	add	r2, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	3304      	adds	r3, #4
 800a898:	4619      	mov	r1, r3
 800a89a:	4610      	mov	r0, r2
 800a89c:	f7fe fb83 	bl	8008fa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a4:	4b23      	ldr	r3, [pc, #140]	; (800a934 <xTaskResumeAll+0x12c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d302      	bcc.n	800a8b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a8ae:	4b22      	ldr	r3, [pc, #136]	; (800a938 <xTaskResumeAll+0x130>)
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8b4:	4b1c      	ldr	r3, [pc, #112]	; (800a928 <xTaskResumeAll+0x120>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1cb      	bne.n	800a854 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d001      	beq.n	800a8c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a8c2:	f000 fb55 	bl	800af70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a8c6:	4b1d      	ldr	r3, [pc, #116]	; (800a93c <xTaskResumeAll+0x134>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d010      	beq.n	800a8f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a8d2:	f000 f847 	bl	800a964 <xTaskIncrementTick>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a8dc:	4b16      	ldr	r3, [pc, #88]	; (800a938 <xTaskResumeAll+0x130>)
 800a8de:	2201      	movs	r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1f1      	bne.n	800a8d2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a8ee:	4b13      	ldr	r3, [pc, #76]	; (800a93c <xTaskResumeAll+0x134>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a8f4:	4b10      	ldr	r3, [pc, #64]	; (800a938 <xTaskResumeAll+0x130>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d009      	beq.n	800a910 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a900:	4b0f      	ldr	r3, [pc, #60]	; (800a940 <xTaskResumeAll+0x138>)
 800a902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a910:	f001 f9e8 	bl	800bce4 <vPortExitCritical>

	return xAlreadyYielded;
 800a914:	68bb      	ldr	r3, [r7, #8]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20001730 	.word	0x20001730
 800a924:	20001708 	.word	0x20001708
 800a928:	200016c8 	.word	0x200016c8
 800a92c:	20001710 	.word	0x20001710
 800a930:	20001238 	.word	0x20001238
 800a934:	20001234 	.word	0x20001234
 800a938:	2000171c 	.word	0x2000171c
 800a93c:	20001718 	.word	0x20001718
 800a940:	e000ed04 	.word	0xe000ed04

0800a944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a94a:	4b05      	ldr	r3, [pc, #20]	; (800a960 <xTaskGetTickCount+0x1c>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a950:	687b      	ldr	r3, [r7, #4]
}
 800a952:	4618      	mov	r0, r3
 800a954:	370c      	adds	r7, #12
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	2000170c 	.word	0x2000170c

0800a964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a96a:	2300      	movs	r3, #0
 800a96c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a96e:	4b4f      	ldr	r3, [pc, #316]	; (800aaac <xTaskIncrementTick+0x148>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	f040 8089 	bne.w	800aa8a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a978:	4b4d      	ldr	r3, [pc, #308]	; (800aab0 <xTaskIncrementTick+0x14c>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3301      	adds	r3, #1
 800a97e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a980:	4a4b      	ldr	r2, [pc, #300]	; (800aab0 <xTaskIncrementTick+0x14c>)
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d120      	bne.n	800a9ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a98c:	4b49      	ldr	r3, [pc, #292]	; (800aab4 <xTaskIncrementTick+0x150>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00a      	beq.n	800a9ac <xTaskIncrementTick+0x48>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	603b      	str	r3, [r7, #0]
}
 800a9a8:	bf00      	nop
 800a9aa:	e7fe      	b.n	800a9aa <xTaskIncrementTick+0x46>
 800a9ac:	4b41      	ldr	r3, [pc, #260]	; (800aab4 <xTaskIncrementTick+0x150>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	60fb      	str	r3, [r7, #12]
 800a9b2:	4b41      	ldr	r3, [pc, #260]	; (800aab8 <xTaskIncrementTick+0x154>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a3f      	ldr	r2, [pc, #252]	; (800aab4 <xTaskIncrementTick+0x150>)
 800a9b8:	6013      	str	r3, [r2, #0]
 800a9ba:	4a3f      	ldr	r2, [pc, #252]	; (800aab8 <xTaskIncrementTick+0x154>)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6013      	str	r3, [r2, #0]
 800a9c0:	4b3e      	ldr	r3, [pc, #248]	; (800aabc <xTaskIncrementTick+0x158>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	4a3d      	ldr	r2, [pc, #244]	; (800aabc <xTaskIncrementTick+0x158>)
 800a9c8:	6013      	str	r3, [r2, #0]
 800a9ca:	f000 fad1 	bl	800af70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9ce:	4b3c      	ldr	r3, [pc, #240]	; (800aac0 <xTaskIncrementTick+0x15c>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d349      	bcc.n	800aa6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9d8:	4b36      	ldr	r3, [pc, #216]	; (800aab4 <xTaskIncrementTick+0x150>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d104      	bne.n	800a9ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9e2:	4b37      	ldr	r3, [pc, #220]	; (800aac0 <xTaskIncrementTick+0x15c>)
 800a9e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e8:	601a      	str	r2, [r3, #0]
					break;
 800a9ea:	e03f      	b.n	800aa6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9ec:	4b31      	ldr	r3, [pc, #196]	; (800aab4 <xTaskIncrementTick+0x150>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a9fc:	693a      	ldr	r2, [r7, #16]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d203      	bcs.n	800aa0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa04:	4a2e      	ldr	r2, [pc, #184]	; (800aac0 <xTaskIncrementTick+0x15c>)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa0a:	e02f      	b.n	800aa6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	3304      	adds	r3, #4
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fe fb25 	bl	8009060 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d004      	beq.n	800aa28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	3318      	adds	r3, #24
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fb1c 	bl	8009060 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2c:	4b25      	ldr	r3, [pc, #148]	; (800aac4 <xTaskIncrementTick+0x160>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d903      	bls.n	800aa3c <xTaskIncrementTick+0xd8>
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	4a22      	ldr	r2, [pc, #136]	; (800aac4 <xTaskIncrementTick+0x160>)
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa40:	4613      	mov	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4413      	add	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4a1f      	ldr	r2, [pc, #124]	; (800aac8 <xTaskIncrementTick+0x164>)
 800aa4a:	441a      	add	r2, r3
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	3304      	adds	r3, #4
 800aa50:	4619      	mov	r1, r3
 800aa52:	4610      	mov	r0, r2
 800aa54:	f7fe faa7 	bl	8008fa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5c:	4b1b      	ldr	r3, [pc, #108]	; (800aacc <xTaskIncrementTick+0x168>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d3b8      	bcc.n	800a9d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aa66:	2301      	movs	r3, #1
 800aa68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa6a:	e7b5      	b.n	800a9d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa6c:	4b17      	ldr	r3, [pc, #92]	; (800aacc <xTaskIncrementTick+0x168>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa72:	4915      	ldr	r1, [pc, #84]	; (800aac8 <xTaskIncrementTick+0x164>)
 800aa74:	4613      	mov	r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	4413      	add	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	440b      	add	r3, r1
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d907      	bls.n	800aa94 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800aa84:	2301      	movs	r3, #1
 800aa86:	617b      	str	r3, [r7, #20]
 800aa88:	e004      	b.n	800aa94 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aa8a:	4b11      	ldr	r3, [pc, #68]	; (800aad0 <xTaskIncrementTick+0x16c>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	4a0f      	ldr	r2, [pc, #60]	; (800aad0 <xTaskIncrementTick+0x16c>)
 800aa92:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aa94:	4b0f      	ldr	r3, [pc, #60]	; (800aad4 <xTaskIncrementTick+0x170>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d001      	beq.n	800aaa0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aaa0:	697b      	ldr	r3, [r7, #20]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3718      	adds	r7, #24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	20001730 	.word	0x20001730
 800aab0:	2000170c 	.word	0x2000170c
 800aab4:	200016c0 	.word	0x200016c0
 800aab8:	200016c4 	.word	0x200016c4
 800aabc:	20001720 	.word	0x20001720
 800aac0:	20001728 	.word	0x20001728
 800aac4:	20001710 	.word	0x20001710
 800aac8:	20001238 	.word	0x20001238
 800aacc:	20001234 	.word	0x20001234
 800aad0:	20001718 	.word	0x20001718
 800aad4:	2000171c 	.word	0x2000171c

0800aad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aade:	4b28      	ldr	r3, [pc, #160]	; (800ab80 <vTaskSwitchContext+0xa8>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d003      	beq.n	800aaee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aae6:	4b27      	ldr	r3, [pc, #156]	; (800ab84 <vTaskSwitchContext+0xac>)
 800aae8:	2201      	movs	r2, #1
 800aaea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aaec:	e041      	b.n	800ab72 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800aaee:	4b25      	ldr	r3, [pc, #148]	; (800ab84 <vTaskSwitchContext+0xac>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaf4:	4b24      	ldr	r3, [pc, #144]	; (800ab88 <vTaskSwitchContext+0xb0>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	60fb      	str	r3, [r7, #12]
 800aafa:	e010      	b.n	800ab1e <vTaskSwitchContext+0x46>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10a      	bne.n	800ab18 <vTaskSwitchContext+0x40>
	__asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	607b      	str	r3, [r7, #4]
}
 800ab14:	bf00      	nop
 800ab16:	e7fe      	b.n	800ab16 <vTaskSwitchContext+0x3e>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	60fb      	str	r3, [r7, #12]
 800ab1e:	491b      	ldr	r1, [pc, #108]	; (800ab8c <vTaskSwitchContext+0xb4>)
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	440b      	add	r3, r1
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d0e4      	beq.n	800aafc <vTaskSwitchContext+0x24>
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	4613      	mov	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4a13      	ldr	r2, [pc, #76]	; (800ab8c <vTaskSwitchContext+0xb4>)
 800ab3e:	4413      	add	r3, r2
 800ab40:	60bb      	str	r3, [r7, #8]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	605a      	str	r2, [r3, #4]
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	3308      	adds	r3, #8
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d104      	bne.n	800ab62 <vTaskSwitchContext+0x8a>
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	605a      	str	r2, [r3, #4]
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	4a09      	ldr	r2, [pc, #36]	; (800ab90 <vTaskSwitchContext+0xb8>)
 800ab6a:	6013      	str	r3, [r2, #0]
 800ab6c:	4a06      	ldr	r2, [pc, #24]	; (800ab88 <vTaskSwitchContext+0xb0>)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6013      	str	r3, [r2, #0]
}
 800ab72:	bf00      	nop
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	20001730 	.word	0x20001730
 800ab84:	2000171c 	.word	0x2000171c
 800ab88:	20001710 	.word	0x20001710
 800ab8c:	20001238 	.word	0x20001238
 800ab90:	20001234 	.word	0x20001234

0800ab94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10a      	bne.n	800abba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	60fb      	str	r3, [r7, #12]
}
 800abb6:	bf00      	nop
 800abb8:	e7fe      	b.n	800abb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abba:	4b07      	ldr	r3, [pc, #28]	; (800abd8 <vTaskPlaceOnEventList+0x44>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	3318      	adds	r3, #24
 800abc0:	4619      	mov	r1, r3
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f7fe fa13 	bl	8008fee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800abc8:	2101      	movs	r1, #1
 800abca:	6838      	ldr	r0, [r7, #0]
 800abcc:	f000 fb8a 	bl	800b2e4 <prvAddCurrentTaskToDelayedList>
}
 800abd0:	bf00      	nop
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	20001234 	.word	0x20001234

0800abdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10a      	bne.n	800ac04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	617b      	str	r3, [r7, #20]
}
 800ac00:	bf00      	nop
 800ac02:	e7fe      	b.n	800ac02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac04:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <vTaskPlaceOnEventListRestricted+0x54>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	3318      	adds	r3, #24
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f7fe f9ca 	bl	8008fa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d002      	beq.n	800ac1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ac18:	f04f 33ff 	mov.w	r3, #4294967295
 800ac1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	68b8      	ldr	r0, [r7, #8]
 800ac22:	f000 fb5f 	bl	800b2e4 <prvAddCurrentTaskToDelayedList>
	}
 800ac26:	bf00      	nop
 800ac28:	3718      	adds	r7, #24
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	20001234 	.word	0x20001234

0800ac34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b086      	sub	sp, #24
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10a      	bne.n	800ac60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	60fb      	str	r3, [r7, #12]
}
 800ac5c:	bf00      	nop
 800ac5e:	e7fe      	b.n	800ac5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	3318      	adds	r3, #24
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fe f9fb 	bl	8009060 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac6a:	4b1e      	ldr	r3, [pc, #120]	; (800ace4 <xTaskRemoveFromEventList+0xb0>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d11d      	bne.n	800acae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	3304      	adds	r3, #4
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fe f9f2 	bl	8009060 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac80:	4b19      	ldr	r3, [pc, #100]	; (800ace8 <xTaskRemoveFromEventList+0xb4>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d903      	bls.n	800ac90 <xTaskRemoveFromEventList+0x5c>
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8c:	4a16      	ldr	r2, [pc, #88]	; (800ace8 <xTaskRemoveFromEventList+0xb4>)
 800ac8e:	6013      	str	r3, [r2, #0]
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac94:	4613      	mov	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4a13      	ldr	r2, [pc, #76]	; (800acec <xTaskRemoveFromEventList+0xb8>)
 800ac9e:	441a      	add	r2, r3
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	3304      	adds	r3, #4
 800aca4:	4619      	mov	r1, r3
 800aca6:	4610      	mov	r0, r2
 800aca8:	f7fe f97d 	bl	8008fa6 <vListInsertEnd>
 800acac:	e005      	b.n	800acba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	3318      	adds	r3, #24
 800acb2:	4619      	mov	r1, r3
 800acb4:	480e      	ldr	r0, [pc, #56]	; (800acf0 <xTaskRemoveFromEventList+0xbc>)
 800acb6:	f7fe f976 	bl	8008fa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acbe:	4b0d      	ldr	r3, [pc, #52]	; (800acf4 <xTaskRemoveFromEventList+0xc0>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d905      	bls.n	800acd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800acc8:	2301      	movs	r3, #1
 800acca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800accc:	4b0a      	ldr	r3, [pc, #40]	; (800acf8 <xTaskRemoveFromEventList+0xc4>)
 800acce:	2201      	movs	r2, #1
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	e001      	b.n	800acd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800acd4:	2300      	movs	r3, #0
 800acd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800acd8:	697b      	ldr	r3, [r7, #20]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	20001730 	.word	0x20001730
 800ace8:	20001710 	.word	0x20001710
 800acec:	20001238 	.word	0x20001238
 800acf0:	200016c8 	.word	0x200016c8
 800acf4:	20001234 	.word	0x20001234
 800acf8:	2000171c 	.word	0x2000171c

0800acfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad04:	4b06      	ldr	r3, [pc, #24]	; (800ad20 <vTaskInternalSetTimeOutState+0x24>)
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad0c:	4b05      	ldr	r3, [pc, #20]	; (800ad24 <vTaskInternalSetTimeOutState+0x28>)
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	605a      	str	r2, [r3, #4]
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	20001720 	.word	0x20001720
 800ad24:	2000170c 	.word	0x2000170c

0800ad28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b088      	sub	sp, #32
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10a      	bne.n	800ad4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ad38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3c:	f383 8811 	msr	BASEPRI, r3
 800ad40:	f3bf 8f6f 	isb	sy
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	613b      	str	r3, [r7, #16]
}
 800ad4a:	bf00      	nop
 800ad4c:	e7fe      	b.n	800ad4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10a      	bne.n	800ad6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	60fb      	str	r3, [r7, #12]
}
 800ad66:	bf00      	nop
 800ad68:	e7fe      	b.n	800ad68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ad6a:	f000 ff8b 	bl	800bc84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad6e:	4b1d      	ldr	r3, [pc, #116]	; (800ade4 <xTaskCheckForTimeOut+0xbc>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	69ba      	ldr	r2, [r7, #24]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad86:	d102      	bne.n	800ad8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	61fb      	str	r3, [r7, #28]
 800ad8c:	e023      	b.n	800add6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	4b15      	ldr	r3, [pc, #84]	; (800ade8 <xTaskCheckForTimeOut+0xc0>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d007      	beq.n	800adaa <xTaskCheckForTimeOut+0x82>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	69ba      	ldr	r2, [r7, #24]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d302      	bcc.n	800adaa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ada4:	2301      	movs	r3, #1
 800ada6:	61fb      	str	r3, [r7, #28]
 800ada8:	e015      	b.n	800add6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d20b      	bcs.n	800adcc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	1ad2      	subs	r2, r2, r3
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7ff ff9b 	bl	800acfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800adc6:	2300      	movs	r3, #0
 800adc8:	61fb      	str	r3, [r7, #28]
 800adca:	e004      	b.n	800add6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	2200      	movs	r2, #0
 800add0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800add2:	2301      	movs	r3, #1
 800add4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800add6:	f000 ff85 	bl	800bce4 <vPortExitCritical>

	return xReturn;
 800adda:	69fb      	ldr	r3, [r7, #28]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3720      	adds	r7, #32
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	2000170c 	.word	0x2000170c
 800ade8:	20001720 	.word	0x20001720

0800adec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800adec:	b480      	push	{r7}
 800adee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800adf0:	4b03      	ldr	r3, [pc, #12]	; (800ae00 <vTaskMissedYield+0x14>)
 800adf2:	2201      	movs	r2, #1
 800adf4:	601a      	str	r2, [r3, #0]
}
 800adf6:	bf00      	nop
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr
 800ae00:	2000171c 	.word	0x2000171c

0800ae04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae0c:	f000 f852 	bl	800aeb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae10:	4b06      	ldr	r3, [pc, #24]	; (800ae2c <prvIdleTask+0x28>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d9f9      	bls.n	800ae0c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ae18:	4b05      	ldr	r3, [pc, #20]	; (800ae30 <prvIdleTask+0x2c>)
 800ae1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ae28:	e7f0      	b.n	800ae0c <prvIdleTask+0x8>
 800ae2a:	bf00      	nop
 800ae2c:	20001238 	.word	0x20001238
 800ae30:	e000ed04 	.word	0xe000ed04

0800ae34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	607b      	str	r3, [r7, #4]
 800ae3e:	e00c      	b.n	800ae5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	4613      	mov	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4413      	add	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4a12      	ldr	r2, [pc, #72]	; (800ae94 <prvInitialiseTaskLists+0x60>)
 800ae4c:	4413      	add	r3, r2
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fe f87c 	bl	8008f4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	3301      	adds	r3, #1
 800ae58:	607b      	str	r3, [r7, #4]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b37      	cmp	r3, #55	; 0x37
 800ae5e:	d9ef      	bls.n	800ae40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae60:	480d      	ldr	r0, [pc, #52]	; (800ae98 <prvInitialiseTaskLists+0x64>)
 800ae62:	f7fe f873 	bl	8008f4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae66:	480d      	ldr	r0, [pc, #52]	; (800ae9c <prvInitialiseTaskLists+0x68>)
 800ae68:	f7fe f870 	bl	8008f4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae6c:	480c      	ldr	r0, [pc, #48]	; (800aea0 <prvInitialiseTaskLists+0x6c>)
 800ae6e:	f7fe f86d 	bl	8008f4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae72:	480c      	ldr	r0, [pc, #48]	; (800aea4 <prvInitialiseTaskLists+0x70>)
 800ae74:	f7fe f86a 	bl	8008f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae78:	480b      	ldr	r0, [pc, #44]	; (800aea8 <prvInitialiseTaskLists+0x74>)
 800ae7a:	f7fe f867 	bl	8008f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae7e:	4b0b      	ldr	r3, [pc, #44]	; (800aeac <prvInitialiseTaskLists+0x78>)
 800ae80:	4a05      	ldr	r2, [pc, #20]	; (800ae98 <prvInitialiseTaskLists+0x64>)
 800ae82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae84:	4b0a      	ldr	r3, [pc, #40]	; (800aeb0 <prvInitialiseTaskLists+0x7c>)
 800ae86:	4a05      	ldr	r2, [pc, #20]	; (800ae9c <prvInitialiseTaskLists+0x68>)
 800ae88:	601a      	str	r2, [r3, #0]
}
 800ae8a:	bf00      	nop
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	20001238 	.word	0x20001238
 800ae98:	20001698 	.word	0x20001698
 800ae9c:	200016ac 	.word	0x200016ac
 800aea0:	200016c8 	.word	0x200016c8
 800aea4:	200016dc 	.word	0x200016dc
 800aea8:	200016f4 	.word	0x200016f4
 800aeac:	200016c0 	.word	0x200016c0
 800aeb0:	200016c4 	.word	0x200016c4

0800aeb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aeba:	e019      	b.n	800aef0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aebc:	f000 fee2 	bl	800bc84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aec0:	4b10      	ldr	r3, [pc, #64]	; (800af04 <prvCheckTasksWaitingTermination+0x50>)
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3304      	adds	r3, #4
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fe f8c7 	bl	8009060 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aed2:	4b0d      	ldr	r3, [pc, #52]	; (800af08 <prvCheckTasksWaitingTermination+0x54>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	3b01      	subs	r3, #1
 800aed8:	4a0b      	ldr	r2, [pc, #44]	; (800af08 <prvCheckTasksWaitingTermination+0x54>)
 800aeda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aedc:	4b0b      	ldr	r3, [pc, #44]	; (800af0c <prvCheckTasksWaitingTermination+0x58>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	3b01      	subs	r3, #1
 800aee2:	4a0a      	ldr	r2, [pc, #40]	; (800af0c <prvCheckTasksWaitingTermination+0x58>)
 800aee4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aee6:	f000 fefd 	bl	800bce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f810 	bl	800af10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aef0:	4b06      	ldr	r3, [pc, #24]	; (800af0c <prvCheckTasksWaitingTermination+0x58>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1e1      	bne.n	800aebc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aef8:	bf00      	nop
 800aefa:	bf00      	nop
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	200016dc 	.word	0x200016dc
 800af08:	20001708 	.word	0x20001708
 800af0c:	200016f0 	.word	0x200016f0

0800af10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d108      	bne.n	800af34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af26:	4618      	mov	r0, r3
 800af28:	f001 f892 	bl	800c050 <vPortFree>
				vPortFree( pxTCB );
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f001 f88f 	bl	800c050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af32:	e018      	b.n	800af66 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d103      	bne.n	800af46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f001 f886 	bl	800c050 <vPortFree>
	}
 800af44:	e00f      	b.n	800af66 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d00a      	beq.n	800af66 <prvDeleteTCB+0x56>
	__asm volatile
 800af50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	60fb      	str	r3, [r7, #12]
}
 800af62:	bf00      	nop
 800af64:	e7fe      	b.n	800af64 <prvDeleteTCB+0x54>
	}
 800af66:	bf00      	nop
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
	...

0800af70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af76:	4b0c      	ldr	r3, [pc, #48]	; (800afa8 <prvResetNextTaskUnblockTime+0x38>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d104      	bne.n	800af8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af80:	4b0a      	ldr	r3, [pc, #40]	; (800afac <prvResetNextTaskUnblockTime+0x3c>)
 800af82:	f04f 32ff 	mov.w	r2, #4294967295
 800af86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af88:	e008      	b.n	800af9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af8a:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <prvResetNextTaskUnblockTime+0x38>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	4a04      	ldr	r2, [pc, #16]	; (800afac <prvResetNextTaskUnblockTime+0x3c>)
 800af9a:	6013      	str	r3, [r2, #0]
}
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr
 800afa8:	200016c0 	.word	0x200016c0
 800afac:	20001728 	.word	0x20001728

0800afb0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800afb6:	4b05      	ldr	r3, [pc, #20]	; (800afcc <xTaskGetCurrentTaskHandle+0x1c>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	607b      	str	r3, [r7, #4]

		return xReturn;
 800afbc:	687b      	ldr	r3, [r7, #4]
	}
 800afbe:	4618      	mov	r0, r3
 800afc0:	370c      	adds	r7, #12
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	20001234 	.word	0x20001234

0800afd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800afd6:	4b0b      	ldr	r3, [pc, #44]	; (800b004 <xTaskGetSchedulerState+0x34>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d102      	bne.n	800afe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800afde:	2301      	movs	r3, #1
 800afe0:	607b      	str	r3, [r7, #4]
 800afe2:	e008      	b.n	800aff6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afe4:	4b08      	ldr	r3, [pc, #32]	; (800b008 <xTaskGetSchedulerState+0x38>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d102      	bne.n	800aff2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800afec:	2302      	movs	r3, #2
 800afee:	607b      	str	r3, [r7, #4]
 800aff0:	e001      	b.n	800aff6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aff2:	2300      	movs	r3, #0
 800aff4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aff6:	687b      	ldr	r3, [r7, #4]
	}
 800aff8:	4618      	mov	r0, r3
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr
 800b004:	20001714 	.word	0x20001714
 800b008:	20001730 	.word	0x20001730

0800b00c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b018:	2300      	movs	r3, #0
 800b01a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d051      	beq.n	800b0c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b026:	4b2a      	ldr	r3, [pc, #168]	; (800b0d0 <xTaskPriorityInherit+0xc4>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d241      	bcs.n	800b0b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	699b      	ldr	r3, [r3, #24]
 800b034:	2b00      	cmp	r3, #0
 800b036:	db06      	blt.n	800b046 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b038:	4b25      	ldr	r3, [pc, #148]	; (800b0d0 <xTaskPriorityInherit+0xc4>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	6959      	ldr	r1, [r3, #20]
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b04e:	4613      	mov	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	4a1f      	ldr	r2, [pc, #124]	; (800b0d4 <xTaskPriorityInherit+0xc8>)
 800b058:	4413      	add	r3, r2
 800b05a:	4299      	cmp	r1, r3
 800b05c:	d122      	bne.n	800b0a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	3304      	adds	r3, #4
 800b062:	4618      	mov	r0, r3
 800b064:	f7fd fffc 	bl	8009060 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b068:	4b19      	ldr	r3, [pc, #100]	; (800b0d0 <xTaskPriorityInherit+0xc4>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b076:	4b18      	ldr	r3, [pc, #96]	; (800b0d8 <xTaskPriorityInherit+0xcc>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d903      	bls.n	800b086 <xTaskPriorityInherit+0x7a>
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	4a15      	ldr	r2, [pc, #84]	; (800b0d8 <xTaskPriorityInherit+0xcc>)
 800b084:	6013      	str	r3, [r2, #0]
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4a10      	ldr	r2, [pc, #64]	; (800b0d4 <xTaskPriorityInherit+0xc8>)
 800b094:	441a      	add	r2, r3
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	3304      	adds	r3, #4
 800b09a:	4619      	mov	r1, r3
 800b09c:	4610      	mov	r0, r2
 800b09e:	f7fd ff82 	bl	8008fa6 <vListInsertEnd>
 800b0a2:	e004      	b.n	800b0ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b0a4:	4b0a      	ldr	r3, [pc, #40]	; (800b0d0 <xTaskPriorityInherit+0xc4>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	60fb      	str	r3, [r7, #12]
 800b0b2:	e008      	b.n	800b0c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0b8:	4b05      	ldr	r3, [pc, #20]	; (800b0d0 <xTaskPriorityInherit+0xc4>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d201      	bcs.n	800b0c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
	}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	20001234 	.word	0x20001234
 800b0d4:	20001238 	.word	0x20001238
 800b0d8:	20001710 	.word	0x20001710

0800b0dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d056      	beq.n	800b1a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0f2:	4b2e      	ldr	r3, [pc, #184]	; (800b1ac <xTaskPriorityDisinherit+0xd0>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d00a      	beq.n	800b112 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	60fb      	str	r3, [r7, #12]
}
 800b10e:	bf00      	nop
 800b110:	e7fe      	b.n	800b110 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10a      	bne.n	800b130 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	60bb      	str	r3, [r7, #8]
}
 800b12c:	bf00      	nop
 800b12e:	e7fe      	b.n	800b12e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b134:	1e5a      	subs	r2, r3, #1
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b142:	429a      	cmp	r2, r3
 800b144:	d02c      	beq.n	800b1a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d128      	bne.n	800b1a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	3304      	adds	r3, #4
 800b152:	4618      	mov	r0, r3
 800b154:	f7fd ff84 	bl	8009060 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b164:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b170:	4b0f      	ldr	r3, [pc, #60]	; (800b1b0 <xTaskPriorityDisinherit+0xd4>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	429a      	cmp	r2, r3
 800b176:	d903      	bls.n	800b180 <xTaskPriorityDisinherit+0xa4>
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17c:	4a0c      	ldr	r2, [pc, #48]	; (800b1b0 <xTaskPriorityDisinherit+0xd4>)
 800b17e:	6013      	str	r3, [r2, #0]
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b184:	4613      	mov	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4a09      	ldr	r2, [pc, #36]	; (800b1b4 <xTaskPriorityDisinherit+0xd8>)
 800b18e:	441a      	add	r2, r3
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	3304      	adds	r3, #4
 800b194:	4619      	mov	r1, r3
 800b196:	4610      	mov	r0, r2
 800b198:	f7fd ff05 	bl	8008fa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b19c:	2301      	movs	r3, #1
 800b19e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1a0:	697b      	ldr	r3, [r7, #20]
	}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20001234 	.word	0x20001234
 800b1b0:	20001710 	.word	0x20001710
 800b1b4:	20001238 	.word	0x20001238

0800b1b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b088      	sub	sp, #32
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d06a      	beq.n	800b2a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10a      	bne.n	800b1ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	60fb      	str	r3, [r7, #12]
}
 800b1ea:	bf00      	nop
 800b1ec:	e7fe      	b.n	800b1ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d902      	bls.n	800b1fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	61fb      	str	r3, [r7, #28]
 800b1fc:	e002      	b.n	800b204 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b202:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b208:	69fa      	ldr	r2, [r7, #28]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d04b      	beq.n	800b2a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	429a      	cmp	r2, r3
 800b216:	d146      	bne.n	800b2a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b218:	4b25      	ldr	r3, [pc, #148]	; (800b2b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	69ba      	ldr	r2, [r7, #24]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d10a      	bne.n	800b238 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b226:	f383 8811 	msr	BASEPRI, r3
 800b22a:	f3bf 8f6f 	isb	sy
 800b22e:	f3bf 8f4f 	dsb	sy
 800b232:	60bb      	str	r3, [r7, #8]
}
 800b234:	bf00      	nop
 800b236:	e7fe      	b.n	800b236 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	69fa      	ldr	r2, [r7, #28]
 800b242:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	699b      	ldr	r3, [r3, #24]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	db04      	blt.n	800b256 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	6959      	ldr	r1, [r3, #20]
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	4613      	mov	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4a13      	ldr	r2, [pc, #76]	; (800b2b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b266:	4413      	add	r3, r2
 800b268:	4299      	cmp	r1, r3
 800b26a:	d11c      	bne.n	800b2a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	3304      	adds	r3, #4
 800b270:	4618      	mov	r0, r3
 800b272:	f7fd fef5 	bl	8009060 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b27a:	4b0f      	ldr	r3, [pc, #60]	; (800b2b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d903      	bls.n	800b28a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b286:	4a0c      	ldr	r2, [pc, #48]	; (800b2b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b288:	6013      	str	r3, [r2, #0]
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b28e:	4613      	mov	r3, r2
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	4413      	add	r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	4a07      	ldr	r2, [pc, #28]	; (800b2b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b298:	441a      	add	r2, r3
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	3304      	adds	r3, #4
 800b29e:	4619      	mov	r1, r3
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	f7fd fe80 	bl	8008fa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2a6:	bf00      	nop
 800b2a8:	3720      	adds	r7, #32
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	20001234 	.word	0x20001234
 800b2b4:	20001238 	.word	0x20001238
 800b2b8:	20001710 	.word	0x20001710

0800b2bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b2bc:	b480      	push	{r7}
 800b2be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b2c0:	4b07      	ldr	r3, [pc, #28]	; (800b2e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d004      	beq.n	800b2d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b2c8:	4b05      	ldr	r3, [pc, #20]	; (800b2e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2ce:	3201      	adds	r2, #1
 800b2d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b2d2:	4b03      	ldr	r3, [pc, #12]	; (800b2e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
	}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	20001234 	.word	0x20001234

0800b2e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2ee:	4b21      	ldr	r3, [pc, #132]	; (800b374 <prvAddCurrentTaskToDelayedList+0x90>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2f4:	4b20      	ldr	r3, [pc, #128]	; (800b378 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3304      	adds	r3, #4
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fd feb0 	bl	8009060 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b306:	d10a      	bne.n	800b31e <prvAddCurrentTaskToDelayedList+0x3a>
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d007      	beq.n	800b31e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b30e:	4b1a      	ldr	r3, [pc, #104]	; (800b378 <prvAddCurrentTaskToDelayedList+0x94>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3304      	adds	r3, #4
 800b314:	4619      	mov	r1, r3
 800b316:	4819      	ldr	r0, [pc, #100]	; (800b37c <prvAddCurrentTaskToDelayedList+0x98>)
 800b318:	f7fd fe45 	bl	8008fa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b31c:	e026      	b.n	800b36c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4413      	add	r3, r2
 800b324:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b326:	4b14      	ldr	r3, [pc, #80]	; (800b378 <prvAddCurrentTaskToDelayedList+0x94>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68ba      	ldr	r2, [r7, #8]
 800b32c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	429a      	cmp	r2, r3
 800b334:	d209      	bcs.n	800b34a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b336:	4b12      	ldr	r3, [pc, #72]	; (800b380 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	4b0f      	ldr	r3, [pc, #60]	; (800b378 <prvAddCurrentTaskToDelayedList+0x94>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3304      	adds	r3, #4
 800b340:	4619      	mov	r1, r3
 800b342:	4610      	mov	r0, r2
 800b344:	f7fd fe53 	bl	8008fee <vListInsert>
}
 800b348:	e010      	b.n	800b36c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b34a:	4b0e      	ldr	r3, [pc, #56]	; (800b384 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	4b0a      	ldr	r3, [pc, #40]	; (800b378 <prvAddCurrentTaskToDelayedList+0x94>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	3304      	adds	r3, #4
 800b354:	4619      	mov	r1, r3
 800b356:	4610      	mov	r0, r2
 800b358:	f7fd fe49 	bl	8008fee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b35c:	4b0a      	ldr	r3, [pc, #40]	; (800b388 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	429a      	cmp	r2, r3
 800b364:	d202      	bcs.n	800b36c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b366:	4a08      	ldr	r2, [pc, #32]	; (800b388 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	6013      	str	r3, [r2, #0]
}
 800b36c:	bf00      	nop
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	2000170c 	.word	0x2000170c
 800b378:	20001234 	.word	0x20001234
 800b37c:	200016f4 	.word	0x200016f4
 800b380:	200016c4 	.word	0x200016c4
 800b384:	200016c0 	.word	0x200016c0
 800b388:	20001728 	.word	0x20001728

0800b38c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b08a      	sub	sp, #40	; 0x28
 800b390:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b392:	2300      	movs	r3, #0
 800b394:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b396:	f000 fb07 	bl	800b9a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b39a:	4b1c      	ldr	r3, [pc, #112]	; (800b40c <xTimerCreateTimerTask+0x80>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d021      	beq.n	800b3e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b3aa:	1d3a      	adds	r2, r7, #4
 800b3ac:	f107 0108 	add.w	r1, r7, #8
 800b3b0:	f107 030c 	add.w	r3, r7, #12
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fd fdaf 	bl	8008f18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b3ba:	6879      	ldr	r1, [r7, #4]
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	9202      	str	r2, [sp, #8]
 800b3c2:	9301      	str	r3, [sp, #4]
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	460a      	mov	r2, r1
 800b3cc:	4910      	ldr	r1, [pc, #64]	; (800b410 <xTimerCreateTimerTask+0x84>)
 800b3ce:	4811      	ldr	r0, [pc, #68]	; (800b414 <xTimerCreateTimerTask+0x88>)
 800b3d0:	f7fe ff5a 	bl	800a288 <xTaskCreateStatic>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	4a10      	ldr	r2, [pc, #64]	; (800b418 <xTimerCreateTimerTask+0x8c>)
 800b3d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b3da:	4b0f      	ldr	r3, [pc, #60]	; (800b418 <xTimerCreateTimerTask+0x8c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d001      	beq.n	800b3e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10a      	bne.n	800b402 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	613b      	str	r3, [r7, #16]
}
 800b3fe:	bf00      	nop
 800b400:	e7fe      	b.n	800b400 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b402:	697b      	ldr	r3, [r7, #20]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3718      	adds	r7, #24
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	20001764 	.word	0x20001764
 800b410:	0800d354 	.word	0x0800d354
 800b414:	0800b551 	.word	0x0800b551
 800b418:	20001768 	.word	0x20001768

0800b41c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b08a      	sub	sp, #40	; 0x28
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
 800b428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b42a:	2300      	movs	r3, #0
 800b42c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d10a      	bne.n	800b44a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b438:	f383 8811 	msr	BASEPRI, r3
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	623b      	str	r3, [r7, #32]
}
 800b446:	bf00      	nop
 800b448:	e7fe      	b.n	800b448 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b44a:	4b1a      	ldr	r3, [pc, #104]	; (800b4b4 <xTimerGenericCommand+0x98>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d02a      	beq.n	800b4a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	2b05      	cmp	r3, #5
 800b462:	dc18      	bgt.n	800b496 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b464:	f7ff fdb4 	bl	800afd0 <xTaskGetSchedulerState>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d109      	bne.n	800b482 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b46e:	4b11      	ldr	r3, [pc, #68]	; (800b4b4 <xTimerGenericCommand+0x98>)
 800b470:	6818      	ldr	r0, [r3, #0]
 800b472:	f107 0110 	add.w	r1, r7, #16
 800b476:	2300      	movs	r3, #0
 800b478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b47a:	f7fe f87f 	bl	800957c <xQueueGenericSend>
 800b47e:	6278      	str	r0, [r7, #36]	; 0x24
 800b480:	e012      	b.n	800b4a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b482:	4b0c      	ldr	r3, [pc, #48]	; (800b4b4 <xTimerGenericCommand+0x98>)
 800b484:	6818      	ldr	r0, [r3, #0]
 800b486:	f107 0110 	add.w	r1, r7, #16
 800b48a:	2300      	movs	r3, #0
 800b48c:	2200      	movs	r2, #0
 800b48e:	f7fe f875 	bl	800957c <xQueueGenericSend>
 800b492:	6278      	str	r0, [r7, #36]	; 0x24
 800b494:	e008      	b.n	800b4a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b496:	4b07      	ldr	r3, [pc, #28]	; (800b4b4 <xTimerGenericCommand+0x98>)
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	f107 0110 	add.w	r1, r7, #16
 800b49e:	2300      	movs	r3, #0
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	f7fe f969 	bl	8009778 <xQueueGenericSendFromISR>
 800b4a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3728      	adds	r7, #40	; 0x28
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20001764 	.word	0x20001764

0800b4b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b088      	sub	sp, #32
 800b4bc:	af02      	add	r7, sp, #8
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4c2:	4b22      	ldr	r3, [pc, #136]	; (800b54c <prvProcessExpiredTimer+0x94>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	3304      	adds	r3, #4
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fd fdc5 	bl	8009060 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4dc:	f003 0304 	and.w	r3, r3, #4
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d022      	beq.n	800b52a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	699a      	ldr	r2, [r3, #24]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	18d1      	adds	r1, r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	6978      	ldr	r0, [r7, #20]
 800b4f2:	f000 f8d1 	bl	800b698 <prvInsertTimerInActiveList>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d01f      	beq.n	800b53c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	2300      	movs	r3, #0
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	2100      	movs	r1, #0
 800b506:	6978      	ldr	r0, [r7, #20]
 800b508:	f7ff ff88 	bl	800b41c <xTimerGenericCommand>
 800b50c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d113      	bne.n	800b53c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	60fb      	str	r3, [r7, #12]
}
 800b526:	bf00      	nop
 800b528:	e7fe      	b.n	800b528 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b530:	f023 0301 	bic.w	r3, r3, #1
 800b534:	b2da      	uxtb	r2, r3
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	6a1b      	ldr	r3, [r3, #32]
 800b540:	6978      	ldr	r0, [r7, #20]
 800b542:	4798      	blx	r3
}
 800b544:	bf00      	nop
 800b546:	3718      	adds	r7, #24
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	2000175c 	.word	0x2000175c

0800b550 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b558:	f107 0308 	add.w	r3, r7, #8
 800b55c:	4618      	mov	r0, r3
 800b55e:	f000 f857 	bl	800b610 <prvGetNextExpireTime>
 800b562:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	4619      	mov	r1, r3
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f000 f803 	bl	800b574 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b56e:	f000 f8d5 	bl	800b71c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b572:	e7f1      	b.n	800b558 <prvTimerTask+0x8>

0800b574 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b57e:	f7ff f935 	bl	800a7ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b582:	f107 0308 	add.w	r3, r7, #8
 800b586:	4618      	mov	r0, r3
 800b588:	f000 f866 	bl	800b658 <prvSampleTimeNow>
 800b58c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d130      	bne.n	800b5f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d10a      	bne.n	800b5b0 <prvProcessTimerOrBlockTask+0x3c>
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d806      	bhi.n	800b5b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b5a2:	f7ff f931 	bl	800a808 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b5a6:	68f9      	ldr	r1, [r7, #12]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f7ff ff85 	bl	800b4b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b5ae:	e024      	b.n	800b5fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d008      	beq.n	800b5c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b5b6:	4b13      	ldr	r3, [pc, #76]	; (800b604 <prvProcessTimerOrBlockTask+0x90>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <prvProcessTimerOrBlockTask+0x50>
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e000      	b.n	800b5c6 <prvProcessTimerOrBlockTask+0x52>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5c8:	4b0f      	ldr	r3, [pc, #60]	; (800b608 <prvProcessTimerOrBlockTask+0x94>)
 800b5ca:	6818      	ldr	r0, [r3, #0]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	f7fe fe23 	bl	800a220 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5da:	f7ff f915 	bl	800a808 <xTaskResumeAll>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d10a      	bne.n	800b5fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b5e4:	4b09      	ldr	r3, [pc, #36]	; (800b60c <prvProcessTimerOrBlockTask+0x98>)
 800b5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ea:	601a      	str	r2, [r3, #0]
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	f3bf 8f6f 	isb	sy
}
 800b5f4:	e001      	b.n	800b5fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b5f6:	f7ff f907 	bl	800a808 <xTaskResumeAll>
}
 800b5fa:	bf00      	nop
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	20001760 	.word	0x20001760
 800b608:	20001764 	.word	0x20001764
 800b60c:	e000ed04 	.word	0xe000ed04

0800b610 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b618:	4b0e      	ldr	r3, [pc, #56]	; (800b654 <prvGetNextExpireTime+0x44>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d101      	bne.n	800b626 <prvGetNextExpireTime+0x16>
 800b622:	2201      	movs	r2, #1
 800b624:	e000      	b.n	800b628 <prvGetNextExpireTime+0x18>
 800b626:	2200      	movs	r2, #0
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d105      	bne.n	800b640 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b634:	4b07      	ldr	r3, [pc, #28]	; (800b654 <prvGetNextExpireTime+0x44>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	60fb      	str	r3, [r7, #12]
 800b63e:	e001      	b.n	800b644 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b640:	2300      	movs	r3, #0
 800b642:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b644:	68fb      	ldr	r3, [r7, #12]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3714      	adds	r7, #20
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	2000175c 	.word	0x2000175c

0800b658 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b660:	f7ff f970 	bl	800a944 <xTaskGetTickCount>
 800b664:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b666:	4b0b      	ldr	r3, [pc, #44]	; (800b694 <prvSampleTimeNow+0x3c>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d205      	bcs.n	800b67c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b670:	f000 f936 	bl	800b8e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	601a      	str	r2, [r3, #0]
 800b67a:	e002      	b.n	800b682 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b682:	4a04      	ldr	r2, [pc, #16]	; (800b694 <prvSampleTimeNow+0x3c>)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b688:	68fb      	ldr	r3, [r7, #12]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	2000176c 	.word	0x2000176c

0800b698 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	68fa      	ldr	r2, [r7, #12]
 800b6b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d812      	bhi.n	800b6e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	1ad2      	subs	r2, r2, r3
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	699b      	ldr	r3, [r3, #24]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d302      	bcc.n	800b6d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	617b      	str	r3, [r7, #20]
 800b6d0:	e01b      	b.n	800b70a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6d2:	4b10      	ldr	r3, [pc, #64]	; (800b714 <prvInsertTimerInActiveList+0x7c>)
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3304      	adds	r3, #4
 800b6da:	4619      	mov	r1, r3
 800b6dc:	4610      	mov	r0, r2
 800b6de:	f7fd fc86 	bl	8008fee <vListInsert>
 800b6e2:	e012      	b.n	800b70a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d206      	bcs.n	800b6fa <prvInsertTimerInActiveList+0x62>
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d302      	bcc.n	800b6fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	617b      	str	r3, [r7, #20]
 800b6f8:	e007      	b.n	800b70a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6fa:	4b07      	ldr	r3, [pc, #28]	; (800b718 <prvInsertTimerInActiveList+0x80>)
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	3304      	adds	r3, #4
 800b702:	4619      	mov	r1, r3
 800b704:	4610      	mov	r0, r2
 800b706:	f7fd fc72 	bl	8008fee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b70a:	697b      	ldr	r3, [r7, #20]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3718      	adds	r7, #24
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	20001760 	.word	0x20001760
 800b718:	2000175c 	.word	0x2000175c

0800b71c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08e      	sub	sp, #56	; 0x38
 800b720:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b722:	e0ca      	b.n	800b8ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2b00      	cmp	r3, #0
 800b728:	da18      	bge.n	800b75c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b72a:	1d3b      	adds	r3, r7, #4
 800b72c:	3304      	adds	r3, #4
 800b72e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10a      	bne.n	800b74c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	61fb      	str	r3, [r7, #28]
}
 800b748:	bf00      	nop
 800b74a:	e7fe      	b.n	800b74a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b752:	6850      	ldr	r0, [r2, #4]
 800b754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b756:	6892      	ldr	r2, [r2, #8]
 800b758:	4611      	mov	r1, r2
 800b75a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f2c0 80aa 	blt.w	800b8b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76a:	695b      	ldr	r3, [r3, #20]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d004      	beq.n	800b77a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b772:	3304      	adds	r3, #4
 800b774:	4618      	mov	r0, r3
 800b776:	f7fd fc73 	bl	8009060 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b77a:	463b      	mov	r3, r7
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7ff ff6b 	bl	800b658 <prvSampleTimeNow>
 800b782:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2b09      	cmp	r3, #9
 800b788:	f200 8097 	bhi.w	800b8ba <prvProcessReceivedCommands+0x19e>
 800b78c:	a201      	add	r2, pc, #4	; (adr r2, 800b794 <prvProcessReceivedCommands+0x78>)
 800b78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b792:	bf00      	nop
 800b794:	0800b7bd 	.word	0x0800b7bd
 800b798:	0800b7bd 	.word	0x0800b7bd
 800b79c:	0800b7bd 	.word	0x0800b7bd
 800b7a0:	0800b831 	.word	0x0800b831
 800b7a4:	0800b845 	.word	0x0800b845
 800b7a8:	0800b88f 	.word	0x0800b88f
 800b7ac:	0800b7bd 	.word	0x0800b7bd
 800b7b0:	0800b7bd 	.word	0x0800b7bd
 800b7b4:	0800b831 	.word	0x0800b831
 800b7b8:	0800b845 	.word	0x0800b845
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7c2:	f043 0301 	orr.w	r3, r3, #1
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d2:	699b      	ldr	r3, [r3, #24]
 800b7d4:	18d1      	adds	r1, r2, r3
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7dc:	f7ff ff5c 	bl	800b698 <prvInsertTimerInActiveList>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d069      	beq.n	800b8ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7f4:	f003 0304 	and.w	r3, r3, #4
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d05e      	beq.n	800b8ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b800:	699b      	ldr	r3, [r3, #24]
 800b802:	441a      	add	r2, r3
 800b804:	2300      	movs	r3, #0
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	2300      	movs	r3, #0
 800b80a:	2100      	movs	r1, #0
 800b80c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b80e:	f7ff fe05 	bl	800b41c <xTimerGenericCommand>
 800b812:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d14f      	bne.n	800b8ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	61bb      	str	r3, [r7, #24]
}
 800b82c:	bf00      	nop
 800b82e:	e7fe      	b.n	800b82e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b836:	f023 0301 	bic.w	r3, r3, #1
 800b83a:	b2da      	uxtb	r2, r3
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b842:	e03a      	b.n	800b8ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b84a:	f043 0301 	orr.w	r3, r3, #1
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b856:	68ba      	ldr	r2, [r7, #8]
 800b858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d10a      	bne.n	800b87a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	617b      	str	r3, [r7, #20]
}
 800b876:	bf00      	nop
 800b878:	e7fe      	b.n	800b878 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	699a      	ldr	r2, [r3, #24]
 800b87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b880:	18d1      	adds	r1, r2, r3
 800b882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b888:	f7ff ff06 	bl	800b698 <prvInsertTimerInActiveList>
					break;
 800b88c:	e015      	b.n	800b8ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b894:	f003 0302 	and.w	r3, r3, #2
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d103      	bne.n	800b8a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b89c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b89e:	f000 fbd7 	bl	800c050 <vPortFree>
 800b8a2:	e00a      	b.n	800b8ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8aa:	f023 0301 	bic.w	r3, r3, #1
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b8b6:	e000      	b.n	800b8ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b8b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8ba:	4b08      	ldr	r3, [pc, #32]	; (800b8dc <prvProcessReceivedCommands+0x1c0>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	1d39      	adds	r1, r7, #4
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7fe f87e 	bl	80099c4 <xQueueReceive>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f47f af2a 	bne.w	800b724 <prvProcessReceivedCommands+0x8>
	}
}
 800b8d0:	bf00      	nop
 800b8d2:	bf00      	nop
 800b8d4:	3730      	adds	r7, #48	; 0x30
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	20001764 	.word	0x20001764

0800b8e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8e6:	e048      	b.n	800b97a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8e8:	4b2d      	ldr	r3, [pc, #180]	; (800b9a0 <prvSwitchTimerLists+0xc0>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f2:	4b2b      	ldr	r3, [pc, #172]	; (800b9a0 <prvSwitchTimerLists+0xc0>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	3304      	adds	r3, #4
 800b900:	4618      	mov	r0, r3
 800b902:	f7fd fbad 	bl	8009060 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b914:	f003 0304 	and.w	r3, r3, #4
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d02e      	beq.n	800b97a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	699b      	ldr	r3, [r3, #24]
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	4413      	add	r3, r2
 800b924:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d90e      	bls.n	800b94c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b93a:	4b19      	ldr	r3, [pc, #100]	; (800b9a0 <prvSwitchTimerLists+0xc0>)
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3304      	adds	r3, #4
 800b942:	4619      	mov	r1, r3
 800b944:	4610      	mov	r0, r2
 800b946:	f7fd fb52 	bl	8008fee <vListInsert>
 800b94a:	e016      	b.n	800b97a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b94c:	2300      	movs	r3, #0
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	2300      	movs	r3, #0
 800b952:	693a      	ldr	r2, [r7, #16]
 800b954:	2100      	movs	r1, #0
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f7ff fd60 	bl	800b41c <xTimerGenericCommand>
 800b95c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10a      	bne.n	800b97a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	603b      	str	r3, [r7, #0]
}
 800b976:	bf00      	nop
 800b978:	e7fe      	b.n	800b978 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b97a:	4b09      	ldr	r3, [pc, #36]	; (800b9a0 <prvSwitchTimerLists+0xc0>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1b1      	bne.n	800b8e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b984:	4b06      	ldr	r3, [pc, #24]	; (800b9a0 <prvSwitchTimerLists+0xc0>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b98a:	4b06      	ldr	r3, [pc, #24]	; (800b9a4 <prvSwitchTimerLists+0xc4>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a04      	ldr	r2, [pc, #16]	; (800b9a0 <prvSwitchTimerLists+0xc0>)
 800b990:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b992:	4a04      	ldr	r2, [pc, #16]	; (800b9a4 <prvSwitchTimerLists+0xc4>)
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	6013      	str	r3, [r2, #0]
}
 800b998:	bf00      	nop
 800b99a:	3718      	adds	r7, #24
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	2000175c 	.word	0x2000175c
 800b9a4:	20001760 	.word	0x20001760

0800b9a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b9ae:	f000 f969 	bl	800bc84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b9b2:	4b15      	ldr	r3, [pc, #84]	; (800ba08 <prvCheckForValidListAndQueue+0x60>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d120      	bne.n	800b9fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b9ba:	4814      	ldr	r0, [pc, #80]	; (800ba0c <prvCheckForValidListAndQueue+0x64>)
 800b9bc:	f7fd fac6 	bl	8008f4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9c0:	4813      	ldr	r0, [pc, #76]	; (800ba10 <prvCheckForValidListAndQueue+0x68>)
 800b9c2:	f7fd fac3 	bl	8008f4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b9c6:	4b13      	ldr	r3, [pc, #76]	; (800ba14 <prvCheckForValidListAndQueue+0x6c>)
 800b9c8:	4a10      	ldr	r2, [pc, #64]	; (800ba0c <prvCheckForValidListAndQueue+0x64>)
 800b9ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b9cc:	4b12      	ldr	r3, [pc, #72]	; (800ba18 <prvCheckForValidListAndQueue+0x70>)
 800b9ce:	4a10      	ldr	r2, [pc, #64]	; (800ba10 <prvCheckForValidListAndQueue+0x68>)
 800b9d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	4b11      	ldr	r3, [pc, #68]	; (800ba1c <prvCheckForValidListAndQueue+0x74>)
 800b9d8:	4a11      	ldr	r2, [pc, #68]	; (800ba20 <prvCheckForValidListAndQueue+0x78>)
 800b9da:	2110      	movs	r1, #16
 800b9dc:	200a      	movs	r0, #10
 800b9de:	f7fd fbd1 	bl	8009184 <xQueueGenericCreateStatic>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	4a08      	ldr	r2, [pc, #32]	; (800ba08 <prvCheckForValidListAndQueue+0x60>)
 800b9e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b9e8:	4b07      	ldr	r3, [pc, #28]	; (800ba08 <prvCheckForValidListAndQueue+0x60>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d005      	beq.n	800b9fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b9f0:	4b05      	ldr	r3, [pc, #20]	; (800ba08 <prvCheckForValidListAndQueue+0x60>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	490b      	ldr	r1, [pc, #44]	; (800ba24 <prvCheckForValidListAndQueue+0x7c>)
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7fe fbbe 	bl	800a178 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9fc:	f000 f972 	bl	800bce4 <vPortExitCritical>
}
 800ba00:	bf00      	nop
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20001764 	.word	0x20001764
 800ba0c:	20001734 	.word	0x20001734
 800ba10:	20001748 	.word	0x20001748
 800ba14:	2000175c 	.word	0x2000175c
 800ba18:	20001760 	.word	0x20001760
 800ba1c:	20001810 	.word	0x20001810
 800ba20:	20001770 	.word	0x20001770
 800ba24:	0800d35c 	.word	0x0800d35c

0800ba28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	3b04      	subs	r3, #4
 800ba38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	3b04      	subs	r3, #4
 800ba46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	f023 0201 	bic.w	r2, r3, #1
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	3b04      	subs	r3, #4
 800ba56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba58:	4a0c      	ldr	r2, [pc, #48]	; (800ba8c <pxPortInitialiseStack+0x64>)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	3b14      	subs	r3, #20
 800ba62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	3b04      	subs	r3, #4
 800ba6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f06f 0202 	mvn.w	r2, #2
 800ba76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	3b20      	subs	r3, #32
 800ba7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	0800ba91 	.word	0x0800ba91

0800ba90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba96:	2300      	movs	r3, #0
 800ba98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba9a:	4b12      	ldr	r3, [pc, #72]	; (800bae4 <prvTaskExitError+0x54>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa2:	d00a      	beq.n	800baba <prvTaskExitError+0x2a>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	60fb      	str	r3, [r7, #12]
}
 800bab6:	bf00      	nop
 800bab8:	e7fe      	b.n	800bab8 <prvTaskExitError+0x28>
	__asm volatile
 800baba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babe:	f383 8811 	msr	BASEPRI, r3
 800bac2:	f3bf 8f6f 	isb	sy
 800bac6:	f3bf 8f4f 	dsb	sy
 800baca:	60bb      	str	r3, [r7, #8]
}
 800bacc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bace:	bf00      	nop
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d0fc      	beq.n	800bad0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bad6:	bf00      	nop
 800bad8:	bf00      	nop
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr
 800bae4:	20000054 	.word	0x20000054
	...

0800baf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800baf0:	4b07      	ldr	r3, [pc, #28]	; (800bb10 <pxCurrentTCBConst2>)
 800baf2:	6819      	ldr	r1, [r3, #0]
 800baf4:	6808      	ldr	r0, [r1, #0]
 800baf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafa:	f380 8809 	msr	PSP, r0
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f04f 0000 	mov.w	r0, #0
 800bb06:	f380 8811 	msr	BASEPRI, r0
 800bb0a:	4770      	bx	lr
 800bb0c:	f3af 8000 	nop.w

0800bb10 <pxCurrentTCBConst2>:
 800bb10:	20001234 	.word	0x20001234
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb14:	bf00      	nop
 800bb16:	bf00      	nop

0800bb18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb18:	4808      	ldr	r0, [pc, #32]	; (800bb3c <prvPortStartFirstTask+0x24>)
 800bb1a:	6800      	ldr	r0, [r0, #0]
 800bb1c:	6800      	ldr	r0, [r0, #0]
 800bb1e:	f380 8808 	msr	MSP, r0
 800bb22:	f04f 0000 	mov.w	r0, #0
 800bb26:	f380 8814 	msr	CONTROL, r0
 800bb2a:	b662      	cpsie	i
 800bb2c:	b661      	cpsie	f
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	f3bf 8f6f 	isb	sy
 800bb36:	df00      	svc	0
 800bb38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb3a:	bf00      	nop
 800bb3c:	e000ed08 	.word	0xe000ed08

0800bb40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb46:	4b46      	ldr	r3, [pc, #280]	; (800bc60 <xPortStartScheduler+0x120>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a46      	ldr	r2, [pc, #280]	; (800bc64 <xPortStartScheduler+0x124>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d10a      	bne.n	800bb66 <xPortStartScheduler+0x26>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	613b      	str	r3, [r7, #16]
}
 800bb62:	bf00      	nop
 800bb64:	e7fe      	b.n	800bb64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb66:	4b3e      	ldr	r3, [pc, #248]	; (800bc60 <xPortStartScheduler+0x120>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a3f      	ldr	r2, [pc, #252]	; (800bc68 <xPortStartScheduler+0x128>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d10a      	bne.n	800bb86 <xPortStartScheduler+0x46>
	__asm volatile
 800bb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	60fb      	str	r3, [r7, #12]
}
 800bb82:	bf00      	nop
 800bb84:	e7fe      	b.n	800bb84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb86:	4b39      	ldr	r3, [pc, #228]	; (800bc6c <xPortStartScheduler+0x12c>)
 800bb88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	22ff      	movs	r2, #255	; 0xff
 800bb96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bba0:	78fb      	ldrb	r3, [r7, #3]
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	4b31      	ldr	r3, [pc, #196]	; (800bc70 <xPortStartScheduler+0x130>)
 800bbac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bbae:	4b31      	ldr	r3, [pc, #196]	; (800bc74 <xPortStartScheduler+0x134>)
 800bbb0:	2207      	movs	r2, #7
 800bbb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbb4:	e009      	b.n	800bbca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bbb6:	4b2f      	ldr	r3, [pc, #188]	; (800bc74 <xPortStartScheduler+0x134>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	4a2d      	ldr	r2, [pc, #180]	; (800bc74 <xPortStartScheduler+0x134>)
 800bbbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bbc0:	78fb      	ldrb	r3, [r7, #3]
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	005b      	lsls	r3, r3, #1
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbca:	78fb      	ldrb	r3, [r7, #3]
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbd2:	2b80      	cmp	r3, #128	; 0x80
 800bbd4:	d0ef      	beq.n	800bbb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bbd6:	4b27      	ldr	r3, [pc, #156]	; (800bc74 <xPortStartScheduler+0x134>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f1c3 0307 	rsb	r3, r3, #7
 800bbde:	2b04      	cmp	r3, #4
 800bbe0:	d00a      	beq.n	800bbf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	60bb      	str	r3, [r7, #8]
}
 800bbf4:	bf00      	nop
 800bbf6:	e7fe      	b.n	800bbf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bbf8:	4b1e      	ldr	r3, [pc, #120]	; (800bc74 <xPortStartScheduler+0x134>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	021b      	lsls	r3, r3, #8
 800bbfe:	4a1d      	ldr	r2, [pc, #116]	; (800bc74 <xPortStartScheduler+0x134>)
 800bc00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc02:	4b1c      	ldr	r3, [pc, #112]	; (800bc74 <xPortStartScheduler+0x134>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc0a:	4a1a      	ldr	r2, [pc, #104]	; (800bc74 <xPortStartScheduler+0x134>)
 800bc0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc16:	4b18      	ldr	r3, [pc, #96]	; (800bc78 <xPortStartScheduler+0x138>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a17      	ldr	r2, [pc, #92]	; (800bc78 <xPortStartScheduler+0x138>)
 800bc1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc22:	4b15      	ldr	r3, [pc, #84]	; (800bc78 <xPortStartScheduler+0x138>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a14      	ldr	r2, [pc, #80]	; (800bc78 <xPortStartScheduler+0x138>)
 800bc28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc2e:	f000 f8dd 	bl	800bdec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc32:	4b12      	ldr	r3, [pc, #72]	; (800bc7c <xPortStartScheduler+0x13c>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc38:	f000 f8fc 	bl	800be34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc3c:	4b10      	ldr	r3, [pc, #64]	; (800bc80 <xPortStartScheduler+0x140>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a0f      	ldr	r2, [pc, #60]	; (800bc80 <xPortStartScheduler+0x140>)
 800bc42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bc46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc48:	f7ff ff66 	bl	800bb18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc4c:	f7fe ff44 	bl	800aad8 <vTaskSwitchContext>
	prvTaskExitError();
 800bc50:	f7ff ff1e 	bl	800ba90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3718      	adds	r7, #24
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	e000ed00 	.word	0xe000ed00
 800bc64:	410fc271 	.word	0x410fc271
 800bc68:	410fc270 	.word	0x410fc270
 800bc6c:	e000e400 	.word	0xe000e400
 800bc70:	20001860 	.word	0x20001860
 800bc74:	20001864 	.word	0x20001864
 800bc78:	e000ed20 	.word	0xe000ed20
 800bc7c:	20000054 	.word	0x20000054
 800bc80:	e000ef34 	.word	0xe000ef34

0800bc84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
	__asm volatile
 800bc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8e:	f383 8811 	msr	BASEPRI, r3
 800bc92:	f3bf 8f6f 	isb	sy
 800bc96:	f3bf 8f4f 	dsb	sy
 800bc9a:	607b      	str	r3, [r7, #4]
}
 800bc9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc9e:	4b0f      	ldr	r3, [pc, #60]	; (800bcdc <vPortEnterCritical+0x58>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3301      	adds	r3, #1
 800bca4:	4a0d      	ldr	r2, [pc, #52]	; (800bcdc <vPortEnterCritical+0x58>)
 800bca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bca8:	4b0c      	ldr	r3, [pc, #48]	; (800bcdc <vPortEnterCritical+0x58>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d10f      	bne.n	800bcd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bcb0:	4b0b      	ldr	r3, [pc, #44]	; (800bce0 <vPortEnterCritical+0x5c>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00a      	beq.n	800bcd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	603b      	str	r3, [r7, #0]
}
 800bccc:	bf00      	nop
 800bcce:	e7fe      	b.n	800bcce <vPortEnterCritical+0x4a>
	}
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr
 800bcdc:	20000054 	.word	0x20000054
 800bce0:	e000ed04 	.word	0xe000ed04

0800bce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bcea:	4b12      	ldr	r3, [pc, #72]	; (800bd34 <vPortExitCritical+0x50>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10a      	bne.n	800bd08 <vPortExitCritical+0x24>
	__asm volatile
 800bcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf6:	f383 8811 	msr	BASEPRI, r3
 800bcfa:	f3bf 8f6f 	isb	sy
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	607b      	str	r3, [r7, #4]
}
 800bd04:	bf00      	nop
 800bd06:	e7fe      	b.n	800bd06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd08:	4b0a      	ldr	r3, [pc, #40]	; (800bd34 <vPortExitCritical+0x50>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	4a09      	ldr	r2, [pc, #36]	; (800bd34 <vPortExitCritical+0x50>)
 800bd10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd12:	4b08      	ldr	r3, [pc, #32]	; (800bd34 <vPortExitCritical+0x50>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d105      	bne.n	800bd26 <vPortExitCritical+0x42>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	f383 8811 	msr	BASEPRI, r3
}
 800bd24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd26:	bf00      	nop
 800bd28:	370c      	adds	r7, #12
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	20000054 	.word	0x20000054
	...

0800bd40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd40:	f3ef 8009 	mrs	r0, PSP
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	4b15      	ldr	r3, [pc, #84]	; (800bda0 <pxCurrentTCBConst>)
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	f01e 0f10 	tst.w	lr, #16
 800bd50:	bf08      	it	eq
 800bd52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5a:	6010      	str	r0, [r2, #0]
 800bd5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd64:	f380 8811 	msr	BASEPRI, r0
 800bd68:	f3bf 8f4f 	dsb	sy
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f7fe feb2 	bl	800aad8 <vTaskSwitchContext>
 800bd74:	f04f 0000 	mov.w	r0, #0
 800bd78:	f380 8811 	msr	BASEPRI, r0
 800bd7c:	bc09      	pop	{r0, r3}
 800bd7e:	6819      	ldr	r1, [r3, #0]
 800bd80:	6808      	ldr	r0, [r1, #0]
 800bd82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd86:	f01e 0f10 	tst.w	lr, #16
 800bd8a:	bf08      	it	eq
 800bd8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd90:	f380 8809 	msr	PSP, r0
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	f3af 8000 	nop.w

0800bda0 <pxCurrentTCBConst>:
 800bda0:	20001234 	.word	0x20001234
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bda4:	bf00      	nop
 800bda6:	bf00      	nop

0800bda8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	607b      	str	r3, [r7, #4]
}
 800bdc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bdc2:	f7fe fdcf 	bl	800a964 <xTaskIncrementTick>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d003      	beq.n	800bdd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bdcc:	4b06      	ldr	r3, [pc, #24]	; (800bde8 <SysTick_Handler+0x40>)
 800bdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	f383 8811 	msr	BASEPRI, r3
}
 800bdde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bde0:	bf00      	nop
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	e000ed04 	.word	0xe000ed04

0800bdec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bdec:	b480      	push	{r7}
 800bdee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bdf0:	4b0b      	ldr	r3, [pc, #44]	; (800be20 <vPortSetupTimerInterrupt+0x34>)
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bdf6:	4b0b      	ldr	r3, [pc, #44]	; (800be24 <vPortSetupTimerInterrupt+0x38>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bdfc:	4b0a      	ldr	r3, [pc, #40]	; (800be28 <vPortSetupTimerInterrupt+0x3c>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a0a      	ldr	r2, [pc, #40]	; (800be2c <vPortSetupTimerInterrupt+0x40>)
 800be02:	fba2 2303 	umull	r2, r3, r2, r3
 800be06:	099b      	lsrs	r3, r3, #6
 800be08:	4a09      	ldr	r2, [pc, #36]	; (800be30 <vPortSetupTimerInterrupt+0x44>)
 800be0a:	3b01      	subs	r3, #1
 800be0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be0e:	4b04      	ldr	r3, [pc, #16]	; (800be20 <vPortSetupTimerInterrupt+0x34>)
 800be10:	2207      	movs	r2, #7
 800be12:	601a      	str	r2, [r3, #0]
}
 800be14:	bf00      	nop
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	e000e010 	.word	0xe000e010
 800be24:	e000e018 	.word	0xe000e018
 800be28:	20000028 	.word	0x20000028
 800be2c:	10624dd3 	.word	0x10624dd3
 800be30:	e000e014 	.word	0xe000e014

0800be34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800be44 <vPortEnableVFP+0x10>
 800be38:	6801      	ldr	r1, [r0, #0]
 800be3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800be3e:	6001      	str	r1, [r0, #0]
 800be40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be42:	bf00      	nop
 800be44:	e000ed88 	.word	0xe000ed88

0800be48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be4e:	f3ef 8305 	mrs	r3, IPSR
 800be52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2b0f      	cmp	r3, #15
 800be58:	d914      	bls.n	800be84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be5a:	4a17      	ldr	r2, [pc, #92]	; (800beb8 <vPortValidateInterruptPriority+0x70>)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4413      	add	r3, r2
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be64:	4b15      	ldr	r3, [pc, #84]	; (800bebc <vPortValidateInterruptPriority+0x74>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	7afa      	ldrb	r2, [r7, #11]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d20a      	bcs.n	800be84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	607b      	str	r3, [r7, #4]
}
 800be80:	bf00      	nop
 800be82:	e7fe      	b.n	800be82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be84:	4b0e      	ldr	r3, [pc, #56]	; (800bec0 <vPortValidateInterruptPriority+0x78>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be8c:	4b0d      	ldr	r3, [pc, #52]	; (800bec4 <vPortValidateInterruptPriority+0x7c>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	429a      	cmp	r2, r3
 800be92:	d90a      	bls.n	800beaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	603b      	str	r3, [r7, #0]
}
 800bea6:	bf00      	nop
 800bea8:	e7fe      	b.n	800bea8 <vPortValidateInterruptPriority+0x60>
	}
 800beaa:	bf00      	nop
 800beac:	3714      	adds	r7, #20
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	e000e3f0 	.word	0xe000e3f0
 800bebc:	20001860 	.word	0x20001860
 800bec0:	e000ed0c 	.word	0xe000ed0c
 800bec4:	20001864 	.word	0x20001864

0800bec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b08a      	sub	sp, #40	; 0x28
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bed0:	2300      	movs	r3, #0
 800bed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bed4:	f7fe fc8a 	bl	800a7ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bed8:	4b58      	ldr	r3, [pc, #352]	; (800c03c <pvPortMalloc+0x174>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bee0:	f000 f910 	bl	800c104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bee4:	4b56      	ldr	r3, [pc, #344]	; (800c040 <pvPortMalloc+0x178>)
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4013      	ands	r3, r2
 800beec:	2b00      	cmp	r3, #0
 800beee:	f040 808e 	bne.w	800c00e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d01d      	beq.n	800bf34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bef8:	2208      	movs	r2, #8
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4413      	add	r3, r2
 800befe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f003 0307 	and.w	r3, r3, #7
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d014      	beq.n	800bf34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f023 0307 	bic.w	r3, r3, #7
 800bf10:	3308      	adds	r3, #8
 800bf12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f003 0307 	and.w	r3, r3, #7
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00a      	beq.n	800bf34 <pvPortMalloc+0x6c>
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	617b      	str	r3, [r7, #20]
}
 800bf30:	bf00      	nop
 800bf32:	e7fe      	b.n	800bf32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d069      	beq.n	800c00e <pvPortMalloc+0x146>
 800bf3a:	4b42      	ldr	r3, [pc, #264]	; (800c044 <pvPortMalloc+0x17c>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d864      	bhi.n	800c00e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bf44:	4b40      	ldr	r3, [pc, #256]	; (800c048 <pvPortMalloc+0x180>)
 800bf46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bf48:	4b3f      	ldr	r3, [pc, #252]	; (800c048 <pvPortMalloc+0x180>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf4e:	e004      	b.n	800bf5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d903      	bls.n	800bf6c <pvPortMalloc+0xa4>
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1f1      	bne.n	800bf50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf6c:	4b33      	ldr	r3, [pc, #204]	; (800c03c <pvPortMalloc+0x174>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d04b      	beq.n	800c00e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf76:	6a3b      	ldr	r3, [r7, #32]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2208      	movs	r2, #8
 800bf7c:	4413      	add	r3, r2
 800bf7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	6a3b      	ldr	r3, [r7, #32]
 800bf86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	685a      	ldr	r2, [r3, #4]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	1ad2      	subs	r2, r2, r3
 800bf90:	2308      	movs	r3, #8
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d91f      	bls.n	800bfd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	f003 0307 	and.w	r3, r3, #7
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00a      	beq.n	800bfc0 <pvPortMalloc+0xf8>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	613b      	str	r3, [r7, #16]
}
 800bfbc:	bf00      	nop
 800bfbe:	e7fe      	b.n	800bfbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc2:	685a      	ldr	r2, [r3, #4]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	1ad2      	subs	r2, r2, r3
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bfd2:	69b8      	ldr	r0, [r7, #24]
 800bfd4:	f000 f8f8 	bl	800c1c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bfd8:	4b1a      	ldr	r3, [pc, #104]	; (800c044 <pvPortMalloc+0x17c>)
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	4a18      	ldr	r2, [pc, #96]	; (800c044 <pvPortMalloc+0x17c>)
 800bfe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bfe6:	4b17      	ldr	r3, [pc, #92]	; (800c044 <pvPortMalloc+0x17c>)
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	4b18      	ldr	r3, [pc, #96]	; (800c04c <pvPortMalloc+0x184>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d203      	bcs.n	800bffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bff2:	4b14      	ldr	r3, [pc, #80]	; (800c044 <pvPortMalloc+0x17c>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4a15      	ldr	r2, [pc, #84]	; (800c04c <pvPortMalloc+0x184>)
 800bff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffc:	685a      	ldr	r2, [r3, #4]
 800bffe:	4b10      	ldr	r3, [pc, #64]	; (800c040 <pvPortMalloc+0x178>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	431a      	orrs	r2, r3
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	2200      	movs	r2, #0
 800c00c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c00e:	f7fe fbfb 	bl	800a808 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	f003 0307 	and.w	r3, r3, #7
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00a      	beq.n	800c032 <pvPortMalloc+0x16a>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	60fb      	str	r3, [r7, #12]
}
 800c02e:	bf00      	nop
 800c030:	e7fe      	b.n	800c030 <pvPortMalloc+0x168>
	return pvReturn;
 800c032:	69fb      	ldr	r3, [r7, #28]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3728      	adds	r7, #40	; 0x28
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	20005470 	.word	0x20005470
 800c040:	2000547c 	.word	0x2000547c
 800c044:	20005474 	.word	0x20005474
 800c048:	20005468 	.word	0x20005468
 800c04c:	20005478 	.word	0x20005478

0800c050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d048      	beq.n	800c0f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c062:	2308      	movs	r3, #8
 800c064:	425b      	negs	r3, r3
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	4413      	add	r3, r2
 800c06a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	4b21      	ldr	r3, [pc, #132]	; (800c0fc <vPortFree+0xac>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4013      	ands	r3, r2
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10a      	bne.n	800c094 <vPortFree+0x44>
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	60fb      	str	r3, [r7, #12]
}
 800c090:	bf00      	nop
 800c092:	e7fe      	b.n	800c092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00a      	beq.n	800c0b2 <vPortFree+0x62>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	60bb      	str	r3, [r7, #8]
}
 800c0ae:	bf00      	nop
 800c0b0:	e7fe      	b.n	800c0b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	4b11      	ldr	r3, [pc, #68]	; (800c0fc <vPortFree+0xac>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d019      	beq.n	800c0f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d115      	bne.n	800c0f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	4b0b      	ldr	r3, [pc, #44]	; (800c0fc <vPortFree+0xac>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	43db      	mvns	r3, r3
 800c0d2:	401a      	ands	r2, r3
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c0d8:	f7fe fb88 	bl	800a7ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	685a      	ldr	r2, [r3, #4]
 800c0e0:	4b07      	ldr	r3, [pc, #28]	; (800c100 <vPortFree+0xb0>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	4a06      	ldr	r2, [pc, #24]	; (800c100 <vPortFree+0xb0>)
 800c0e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c0ea:	6938      	ldr	r0, [r7, #16]
 800c0ec:	f000 f86c 	bl	800c1c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c0f0:	f7fe fb8a 	bl	800a808 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c0f4:	bf00      	nop
 800c0f6:	3718      	adds	r7, #24
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	2000547c 	.word	0x2000547c
 800c100:	20005474 	.word	0x20005474

0800c104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c10a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c10e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c110:	4b27      	ldr	r3, [pc, #156]	; (800c1b0 <prvHeapInit+0xac>)
 800c112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f003 0307 	and.w	r3, r3, #7
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00c      	beq.n	800c138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	3307      	adds	r3, #7
 800c122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f023 0307 	bic.w	r3, r3, #7
 800c12a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	1ad3      	subs	r3, r2, r3
 800c132:	4a1f      	ldr	r2, [pc, #124]	; (800c1b0 <prvHeapInit+0xac>)
 800c134:	4413      	add	r3, r2
 800c136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c13c:	4a1d      	ldr	r2, [pc, #116]	; (800c1b4 <prvHeapInit+0xb0>)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c142:	4b1c      	ldr	r3, [pc, #112]	; (800c1b4 <prvHeapInit+0xb0>)
 800c144:	2200      	movs	r2, #0
 800c146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	68ba      	ldr	r2, [r7, #8]
 800c14c:	4413      	add	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c150:	2208      	movs	r2, #8
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	1a9b      	subs	r3, r3, r2
 800c156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f023 0307 	bic.w	r3, r3, #7
 800c15e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	4a15      	ldr	r2, [pc, #84]	; (800c1b8 <prvHeapInit+0xb4>)
 800c164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c166:	4b14      	ldr	r3, [pc, #80]	; (800c1b8 <prvHeapInit+0xb4>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2200      	movs	r2, #0
 800c16c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c16e:	4b12      	ldr	r3, [pc, #72]	; (800c1b8 <prvHeapInit+0xb4>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2200      	movs	r2, #0
 800c174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	1ad2      	subs	r2, r2, r3
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c184:	4b0c      	ldr	r3, [pc, #48]	; (800c1b8 <prvHeapInit+0xb4>)
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	4a0a      	ldr	r2, [pc, #40]	; (800c1bc <prvHeapInit+0xb8>)
 800c192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	4a09      	ldr	r2, [pc, #36]	; (800c1c0 <prvHeapInit+0xbc>)
 800c19a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c19c:	4b09      	ldr	r3, [pc, #36]	; (800c1c4 <prvHeapInit+0xc0>)
 800c19e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c1a2:	601a      	str	r2, [r3, #0]
}
 800c1a4:	bf00      	nop
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	20001868 	.word	0x20001868
 800c1b4:	20005468 	.word	0x20005468
 800c1b8:	20005470 	.word	0x20005470
 800c1bc:	20005478 	.word	0x20005478
 800c1c0:	20005474 	.word	0x20005474
 800c1c4:	2000547c 	.word	0x2000547c

0800c1c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c1d0:	4b28      	ldr	r3, [pc, #160]	; (800c274 <prvInsertBlockIntoFreeList+0xac>)
 800c1d2:	60fb      	str	r3, [r7, #12]
 800c1d4:	e002      	b.n	800c1dc <prvInsertBlockIntoFreeList+0x14>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	60fb      	str	r3, [r7, #12]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d8f7      	bhi.n	800c1d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	68ba      	ldr	r2, [r7, #8]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d108      	bne.n	800c20a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	685a      	ldr	r2, [r3, #4]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	441a      	add	r2, r3
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	441a      	add	r2, r3
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d118      	bne.n	800c250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	4b15      	ldr	r3, [pc, #84]	; (800c278 <prvInsertBlockIntoFreeList+0xb0>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	429a      	cmp	r2, r3
 800c228:	d00d      	beq.n	800c246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	441a      	add	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	601a      	str	r2, [r3, #0]
 800c244:	e008      	b.n	800c258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c246:	4b0c      	ldr	r3, [pc, #48]	; (800c278 <prvInsertBlockIntoFreeList+0xb0>)
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	e003      	b.n	800c258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d002      	beq.n	800c266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c266:	bf00      	nop
 800c268:	3714      	adds	r7, #20
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	20005468 	.word	0x20005468
 800c278:	20005470 	.word	0x20005470

0800c27c <MX_USB_HOST_Process>:
  *         Runs the usb host process and FSMs
  * @param  none
  * @retval none
  */
void MX_USB_HOST_Process(void)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c280:	4802      	ldr	r0, [pc, #8]	; (800c28c <MX_USB_HOST_Process+0x10>)
 800c282:	f7fa fc13 	bl	8006aac <USBH_Process>
}
 800c286:	bf00      	nop
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	200057a0 	.word	0x200057a0

0800c290 <MX_USB_HOST_SuspendThread>:
  *         this function is used to suspend the (broken) usb host thread auto-generated by CubeMX. It has to be done before the os is started, in order to avoid hardfaults.
  * @param  none
  * @retval none
  */
#if (USBH_USE_OS == 1)
void MX_USB_HOST_SuspendThread(void){
 800c290:	b580      	push	{r7, lr}
 800c292:	af00      	add	r7, sp, #0
	osThreadSuspend((&hUsbHostFS)->thread);
 800c294:	4b03      	ldr	r3, [pc, #12]	; (800c2a4 <MX_USB_HOST_SuspendThread+0x14>)
 800c296:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fc f936 	bl	800850c <osThreadSuspend>
}
 800c2a0:	bf00      	nop
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	200057a0 	.word	0x200057a0

0800c2a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

	/* Init host Library, add supported class and start the library. */
	/* This bypass the auto generated init in order to register the HID class */
	if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	490e      	ldr	r1, [pc, #56]	; (800c2e8 <MX_USB_HOST_Init+0x40>)
 800c2b0:	480e      	ldr	r0, [pc, #56]	; (800c2ec <MX_USB_HOST_Init+0x44>)
 800c2b2:	f7fa faaf 	bl	8006814 <USBH_Init>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d001      	beq.n	800c2c0 <MX_USB_HOST_Init+0x18>
	{
		Error_Handler();
 800c2bc:	f7f4 fef8 	bl	80010b0 <Error_Handler>
	}
	if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800c2c0:	490b      	ldr	r1, [pc, #44]	; (800c2f0 <MX_USB_HOST_Init+0x48>)
 800c2c2:	480a      	ldr	r0, [pc, #40]	; (800c2ec <MX_USB_HOST_Init+0x44>)
 800c2c4:	f7fa fb56 	bl	8006974 <USBH_RegisterClass>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d001      	beq.n	800c2d2 <MX_USB_HOST_Init+0x2a>
	{
		Error_Handler();
 800c2ce:	f7f4 feef 	bl	80010b0 <Error_Handler>
	}
	if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c2d2:	4806      	ldr	r0, [pc, #24]	; (800c2ec <MX_USB_HOST_Init+0x44>)
 800c2d4:	f7fa fbda 	bl	8006a8c <USBH_Start>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d001      	beq.n	800c2e2 <MX_USB_HOST_Init+0x3a>
	{
		Error_Handler();
 800c2de:	f7f4 fee7 	bl	80010b0 <Error_Handler>
	}
	return;
 800c2e2:	bf00      	nop
    Error_Handler();
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	0800c2f5 	.word	0x0800c2f5
 800c2ec:	200057a0 	.word	0x200057a0
 800c2f0:	2000002c 	.word	0x2000002c

0800c2f4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c300:	78fb      	ldrb	r3, [r7, #3]
 800c302:	3b01      	subs	r3, #1
 800c304:	2b04      	cmp	r3, #4
 800c306:	d819      	bhi.n	800c33c <USBH_UserProcess+0x48>
 800c308:	a201      	add	r2, pc, #4	; (adr r2, 800c310 <USBH_UserProcess+0x1c>)
 800c30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30e:	bf00      	nop
 800c310:	0800c33d 	.word	0x0800c33d
 800c314:	0800c32d 	.word	0x0800c32d
 800c318:	0800c33d 	.word	0x0800c33d
 800c31c:	0800c335 	.word	0x0800c335
 800c320:	0800c325 	.word	0x0800c325
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c324:	4b09      	ldr	r3, [pc, #36]	; (800c34c <USBH_UserProcess+0x58>)
 800c326:	2203      	movs	r2, #3
 800c328:	701a      	strb	r2, [r3, #0]
  break;
 800c32a:	e008      	b.n	800c33e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c32c:	4b07      	ldr	r3, [pc, #28]	; (800c34c <USBH_UserProcess+0x58>)
 800c32e:	2202      	movs	r2, #2
 800c330:	701a      	strb	r2, [r3, #0]
  break;
 800c332:	e004      	b.n	800c33e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c334:	4b05      	ldr	r3, [pc, #20]	; (800c34c <USBH_UserProcess+0x58>)
 800c336:	2201      	movs	r2, #1
 800c338:	701a      	strb	r2, [r3, #0]
  break;
 800c33a:	e000      	b.n	800c33e <USBH_UserProcess+0x4a>

  default:
  break;
 800c33c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c33e:	bf00      	nop
 800c340:	370c      	adds	r7, #12
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	20005480 	.word	0x20005480

0800c350 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b08a      	sub	sp, #40	; 0x28
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c358:	f107 0314 	add.w	r3, r7, #20
 800c35c:	2200      	movs	r2, #0
 800c35e:	601a      	str	r2, [r3, #0]
 800c360:	605a      	str	r2, [r3, #4]
 800c362:	609a      	str	r2, [r3, #8]
 800c364:	60da      	str	r2, [r3, #12]
 800c366:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c370:	d13a      	bne.n	800c3e8 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c372:	2300      	movs	r3, #0
 800c374:	613b      	str	r3, [r7, #16]
 800c376:	4b1e      	ldr	r3, [pc, #120]	; (800c3f0 <HAL_HCD_MspInit+0xa0>)
 800c378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c37a:	4a1d      	ldr	r2, [pc, #116]	; (800c3f0 <HAL_HCD_MspInit+0xa0>)
 800c37c:	f043 0301 	orr.w	r3, r3, #1
 800c380:	6313      	str	r3, [r2, #48]	; 0x30
 800c382:	4b1b      	ldr	r3, [pc, #108]	; (800c3f0 <HAL_HCD_MspInit+0xa0>)
 800c384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c386:	f003 0301 	and.w	r3, r3, #1
 800c38a:	613b      	str	r3, [r7, #16]
 800c38c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c38e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c394:	2302      	movs	r3, #2
 800c396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c398:	2300      	movs	r3, #0
 800c39a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c39c:	2303      	movs	r3, #3
 800c39e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c3a0:	230a      	movs	r3, #10
 800c3a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3a4:	f107 0314 	add.w	r3, r7, #20
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	4812      	ldr	r0, [pc, #72]	; (800c3f4 <HAL_HCD_MspInit+0xa4>)
 800c3ac:	f7f5 ffd4 	bl	8002358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c3b0:	4b0f      	ldr	r3, [pc, #60]	; (800c3f0 <HAL_HCD_MspInit+0xa0>)
 800c3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3b4:	4a0e      	ldr	r2, [pc, #56]	; (800c3f0 <HAL_HCD_MspInit+0xa0>)
 800c3b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ba:	6353      	str	r3, [r2, #52]	; 0x34
 800c3bc:	2300      	movs	r3, #0
 800c3be:	60fb      	str	r3, [r7, #12]
 800c3c0:	4b0b      	ldr	r3, [pc, #44]	; (800c3f0 <HAL_HCD_MspInit+0xa0>)
 800c3c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3c4:	4a0a      	ldr	r2, [pc, #40]	; (800c3f0 <HAL_HCD_MspInit+0xa0>)
 800c3c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c3ca:	6453      	str	r3, [r2, #68]	; 0x44
 800c3cc:	4b08      	ldr	r3, [pc, #32]	; (800c3f0 <HAL_HCD_MspInit+0xa0>)
 800c3ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3d4:	60fb      	str	r3, [r7, #12]
 800c3d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c3d8:	2200      	movs	r2, #0
 800c3da:	2105      	movs	r1, #5
 800c3dc:	2043      	movs	r0, #67	; 0x43
 800c3de:	f7f5 ff91 	bl	8002304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c3e2:	2043      	movs	r0, #67	; 0x43
 800c3e4:	f7f5 ffaa 	bl	800233c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c3e8:	bf00      	nop
 800c3ea:	3728      	adds	r7, #40	; 0x28
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	40023800 	.word	0x40023800
 800c3f4:	40020000 	.word	0x40020000

0800c3f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c406:	4618      	mov	r0, r3
 800c408:	f7fa ffed 	bl	80073e6 <USBH_LL_IncTimer>
}
 800c40c:	bf00      	nop
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c422:	4618      	mov	r0, r3
 800c424:	f7fb f831 	bl	800748a <USBH_LL_Connect>
}
 800c428:	bf00      	nop
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fb f846 	bl	80074d0 <USBH_LL_Disconnect>
}
 800c444:	bf00      	nop
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	460b      	mov	r3, r1
 800c456:	70fb      	strb	r3, [r7, #3]
 800c458:	4613      	mov	r3, r2
 800c45a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c462:	4618      	mov	r0, r3
 800c464:	f7fb f87d 	bl	8007562 <USBH_LL_NotifyURBChange>
#endif
}
 800c468:	bf00      	nop
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fa ffdb 	bl	800743a <USBH_LL_PortEnabled>
}
 800c484:	bf00      	nop
 800c486:	3708      	adds	r7, #8
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fa ffe7 	bl	800746e <USBH_LL_PortDisabled>
}
 800c4a0:	bf00      	nop
 800c4a2:	3708      	adds	r7, #8
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d12a      	bne.n	800c510 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c4ba:	4a18      	ldr	r2, [pc, #96]	; (800c51c <USBH_LL_Init+0x74>)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a15      	ldr	r2, [pc, #84]	; (800c51c <USBH_LL_Init+0x74>)
 800c4c6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c4ca:	4b14      	ldr	r3, [pc, #80]	; (800c51c <USBH_LL_Init+0x74>)
 800c4cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c4d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800c4d2:	4b12      	ldr	r3, [pc, #72]	; (800c51c <USBH_LL_Init+0x74>)
 800c4d4:	220c      	movs	r2, #12
 800c4d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c4d8:	4b10      	ldr	r3, [pc, #64]	; (800c51c <USBH_LL_Init+0x74>)
 800c4da:	2201      	movs	r2, #1
 800c4dc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c4de:	4b0f      	ldr	r3, [pc, #60]	; (800c51c <USBH_LL_Init+0x74>)
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c4e4:	4b0d      	ldr	r3, [pc, #52]	; (800c51c <USBH_LL_Init+0x74>)
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c4ea:	4b0c      	ldr	r3, [pc, #48]	; (800c51c <USBH_LL_Init+0x74>)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c4f0:	480a      	ldr	r0, [pc, #40]	; (800c51c <USBH_LL_Init+0x74>)
 800c4f2:	f7f6 f8f9 	bl	80026e8 <HAL_HCD_Init>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d001      	beq.n	800c500 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c4fc:	f7f4 fdd8 	bl	80010b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c500:	4806      	ldr	r0, [pc, #24]	; (800c51c <USBH_LL_Init+0x74>)
 800c502:	f7f6 fcfd 	bl	8002f00 <HAL_HCD_GetCurrentFrame>
 800c506:	4603      	mov	r3, r0
 800c508:	4619      	mov	r1, r3
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7fa ff5c 	bl	80073c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c510:	2300      	movs	r3, #0
}
 800c512:	4618      	mov	r0, r3
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	20005b84 	.word	0x20005b84

0800c520 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c528:	2300      	movs	r3, #0
 800c52a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c536:	4618      	mov	r0, r3
 800c538:	f7f6 fc6a 	bl	8002e10 <HAL_HCD_Start>
 800c53c:	4603      	mov	r3, r0
 800c53e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c540:	7bfb      	ldrb	r3, [r7, #15]
 800c542:	4618      	mov	r0, r3
 800c544:	f000 f95e 	bl	800c804 <USBH_Get_USB_Status>
 800c548:	4603      	mov	r3, r0
 800c54a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c54c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b084      	sub	sp, #16
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c55e:	2300      	movs	r3, #0
 800c560:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c562:	2300      	movs	r3, #0
 800c564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7f6 fc72 	bl	8002e56 <HAL_HCD_Stop>
 800c572:	4603      	mov	r3, r0
 800c574:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c576:	7bfb      	ldrb	r3, [r7, #15]
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 f943 	bl	800c804 <USBH_Get_USB_Status>
 800c57e:	4603      	mov	r3, r0
 800c580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c582:	7bbb      	ldrb	r3, [r7, #14]
}
 800c584:	4618      	mov	r0, r3
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c594:	2301      	movs	r3, #1
 800c596:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7f6 fcbc 	bl	8002f1c <HAL_HCD_GetCurrentSpeed>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	d00c      	beq.n	800c5c4 <USBH_LL_GetSpeed+0x38>
 800c5aa:	2b02      	cmp	r3, #2
 800c5ac:	d80d      	bhi.n	800c5ca <USBH_LL_GetSpeed+0x3e>
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d002      	beq.n	800c5b8 <USBH_LL_GetSpeed+0x2c>
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d003      	beq.n	800c5be <USBH_LL_GetSpeed+0x32>
 800c5b6:	e008      	b.n	800c5ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c5bc:	e008      	b.n	800c5d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c2:	e005      	b.n	800c5d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c8:	e002      	b.n	800c5d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ce:	bf00      	nop
  }
  return  speed;
 800c5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b084      	sub	sp, #16
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7f6 fc4d 	bl	8002e90 <HAL_HCD_ResetPort>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c5fa:	7bfb      	ldrb	r3, [r7, #15]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 f901 	bl	800c804 <USBH_Get_USB_Status>
 800c602:	4603      	mov	r3, r0
 800c604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c606:	7bbb      	ldrb	r3, [r7, #14]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c622:	78fa      	ldrb	r2, [r7, #3]
 800c624:	4611      	mov	r1, r2
 800c626:	4618      	mov	r0, r3
 800c628:	f7f6 fc55 	bl	8002ed6 <HAL_HCD_HC_GetXferCount>
 800c62c:	4603      	mov	r3, r0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c636:	b590      	push	{r4, r7, lr}
 800c638:	b089      	sub	sp, #36	; 0x24
 800c63a:	af04      	add	r7, sp, #16
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	4608      	mov	r0, r1
 800c640:	4611      	mov	r1, r2
 800c642:	461a      	mov	r2, r3
 800c644:	4603      	mov	r3, r0
 800c646:	70fb      	strb	r3, [r7, #3]
 800c648:	460b      	mov	r3, r1
 800c64a:	70bb      	strb	r3, [r7, #2]
 800c64c:	4613      	mov	r3, r2
 800c64e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c650:	2300      	movs	r3, #0
 800c652:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c654:	2300      	movs	r3, #0
 800c656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c65e:	787c      	ldrb	r4, [r7, #1]
 800c660:	78ba      	ldrb	r2, [r7, #2]
 800c662:	78f9      	ldrb	r1, [r7, #3]
 800c664:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c666:	9302      	str	r3, [sp, #8]
 800c668:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c66c:	9301      	str	r3, [sp, #4]
 800c66e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	4623      	mov	r3, r4
 800c676:	f7f6 f899 	bl	80027ac <HAL_HCD_HC_Init>
 800c67a:	4603      	mov	r3, r0
 800c67c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
 800c680:	4618      	mov	r0, r3
 800c682:	f000 f8bf 	bl	800c804 <USBH_Get_USB_Status>
 800c686:	4603      	mov	r3, r0
 800c688:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c68a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	bd90      	pop	{r4, r7, pc}

0800c694 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	460b      	mov	r3, r1
 800c69e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6ae:	78fa      	ldrb	r2, [r7, #3]
 800c6b0:	4611      	mov	r1, r2
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7f6 f912 	bl	80028dc <HAL_HCD_HC_Halt>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c6bc:	7bfb      	ldrb	r3, [r7, #15]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f000 f8a0 	bl	800c804 <USBH_Get_USB_Status>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c6d2:	b590      	push	{r4, r7, lr}
 800c6d4:	b089      	sub	sp, #36	; 0x24
 800c6d6:	af04      	add	r7, sp, #16
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	4608      	mov	r0, r1
 800c6dc:	4611      	mov	r1, r2
 800c6de:	461a      	mov	r2, r3
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	70fb      	strb	r3, [r7, #3]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	70bb      	strb	r3, [r7, #2]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c6fa:	787c      	ldrb	r4, [r7, #1]
 800c6fc:	78ba      	ldrb	r2, [r7, #2]
 800c6fe:	78f9      	ldrb	r1, [r7, #3]
 800c700:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c704:	9303      	str	r3, [sp, #12]
 800c706:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c708:	9302      	str	r3, [sp, #8]
 800c70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70c:	9301      	str	r3, [sp, #4]
 800c70e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c712:	9300      	str	r3, [sp, #0]
 800c714:	4623      	mov	r3, r4
 800c716:	f7f6 f905 	bl	8002924 <HAL_HCD_HC_SubmitRequest>
 800c71a:	4603      	mov	r3, r0
 800c71c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c71e:	7bfb      	ldrb	r3, [r7, #15]
 800c720:	4618      	mov	r0, r3
 800c722:	f000 f86f 	bl	800c804 <USBH_Get_USB_Status>
 800c726:	4603      	mov	r3, r0
 800c728:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c72a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	bd90      	pop	{r4, r7, pc}

0800c734 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	460b      	mov	r3, r1
 800c73e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c746:	78fa      	ldrb	r2, [r7, #3]
 800c748:	4611      	mov	r1, r2
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7f6 fbae 	bl	8002eac <HAL_HCD_HC_GetURBState>
 800c750:	4603      	mov	r3, r0
}
 800c752:	4618      	mov	r0, r3
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b082      	sub	sp, #8
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	460b      	mov	r3, r1
 800c764:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d103      	bne.n	800c778 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c770:	78fb      	ldrb	r3, [r7, #3]
 800c772:	4618      	mov	r0, r3
 800c774:	f000 f872 	bl	800c85c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c778:	20c8      	movs	r0, #200	; 0xc8
 800c77a:	f7f5 fce7 	bl	800214c <HAL_Delay>
  return USBH_OK;
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	460b      	mov	r3, r1
 800c792:	70fb      	strb	r3, [r7, #3]
 800c794:	4613      	mov	r3, r2
 800c796:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c79e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c7a0:	78fa      	ldrb	r2, [r7, #3]
 800c7a2:	68f9      	ldr	r1, [r7, #12]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4413      	add	r3, r2
 800c7aa:	00db      	lsls	r3, r3, #3
 800c7ac:	440b      	add	r3, r1
 800c7ae:	333b      	adds	r3, #59	; 0x3b
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00a      	beq.n	800c7cc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c7b6:	78fa      	ldrb	r2, [r7, #3]
 800c7b8:	68f9      	ldr	r1, [r7, #12]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	4413      	add	r3, r2
 800c7c0:	00db      	lsls	r3, r3, #3
 800c7c2:	440b      	add	r3, r1
 800c7c4:	3350      	adds	r3, #80	; 0x50
 800c7c6:	78ba      	ldrb	r2, [r7, #2]
 800c7c8:	701a      	strb	r2, [r3, #0]
 800c7ca:	e009      	b.n	800c7e0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c7cc:	78fa      	ldrb	r2, [r7, #3]
 800c7ce:	68f9      	ldr	r1, [r7, #12]
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	4413      	add	r3, r2
 800c7d6:	00db      	lsls	r3, r3, #3
 800c7d8:	440b      	add	r3, r1
 800c7da:	3351      	adds	r3, #81	; 0x51
 800c7dc:	78ba      	ldrb	r2, [r7, #2]
 800c7de:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3714      	adds	r7, #20
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr

0800c7ee <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b082      	sub	sp, #8
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7f5 fca8 	bl	800214c <HAL_Delay>
}
 800c7fc:	bf00      	nop
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	4603      	mov	r3, r0
 800c80c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c80e:	2300      	movs	r3, #0
 800c810:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c812:	79fb      	ldrb	r3, [r7, #7]
 800c814:	2b03      	cmp	r3, #3
 800c816:	d817      	bhi.n	800c848 <USBH_Get_USB_Status+0x44>
 800c818:	a201      	add	r2, pc, #4	; (adr r2, 800c820 <USBH_Get_USB_Status+0x1c>)
 800c81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c81e:	bf00      	nop
 800c820:	0800c831 	.word	0x0800c831
 800c824:	0800c837 	.word	0x0800c837
 800c828:	0800c83d 	.word	0x0800c83d
 800c82c:	0800c843 	.word	0x0800c843
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c830:	2300      	movs	r3, #0
 800c832:	73fb      	strb	r3, [r7, #15]
    break;
 800c834:	e00b      	b.n	800c84e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c836:	2302      	movs	r3, #2
 800c838:	73fb      	strb	r3, [r7, #15]
    break;
 800c83a:	e008      	b.n	800c84e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c83c:	2301      	movs	r3, #1
 800c83e:	73fb      	strb	r3, [r7, #15]
    break;
 800c840:	e005      	b.n	800c84e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c842:	2302      	movs	r3, #2
 800c844:	73fb      	strb	r3, [r7, #15]
    break;
 800c846:	e002      	b.n	800c84e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c848:	2302      	movs	r3, #2
 800c84a:	73fb      	strb	r3, [r7, #15]
    break;
 800c84c:	bf00      	nop
  }
  return usb_status;
 800c84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	4603      	mov	r3, r0
 800c864:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c866:	79fb      	ldrb	r3, [r7, #7]
 800c868:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c86a:	79fb      	ldrb	r3, [r7, #7]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d102      	bne.n	800c876 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c870:	2301      	movs	r3, #1
 800c872:	73fb      	strb	r3, [r7, #15]
 800c874:	e001      	b.n	800c87a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c876:	2300      	movs	r3, #0
 800c878:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,(GPIO_PinState)data);
 800c87a:	7bfb      	ldrb	r3, [r7, #15]
 800c87c:	461a      	mov	r2, r3
 800c87e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c882:	4803      	ldr	r0, [pc, #12]	; (800c890 <MX_DriverVbusFS+0x34>)
 800c884:	f7f5 fefc 	bl	8002680 <HAL_GPIO_WritePin>
}
 800c888:	bf00      	nop
 800c88a:	3710      	adds	r7, #16
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	40020400 	.word	0x40020400

0800c894 <__errno>:
 800c894:	4b01      	ldr	r3, [pc, #4]	; (800c89c <__errno+0x8>)
 800c896:	6818      	ldr	r0, [r3, #0]
 800c898:	4770      	bx	lr
 800c89a:	bf00      	nop
 800c89c:	20000058 	.word	0x20000058

0800c8a0 <__libc_init_array>:
 800c8a0:	b570      	push	{r4, r5, r6, lr}
 800c8a2:	4d0d      	ldr	r5, [pc, #52]	; (800c8d8 <__libc_init_array+0x38>)
 800c8a4:	4c0d      	ldr	r4, [pc, #52]	; (800c8dc <__libc_init_array+0x3c>)
 800c8a6:	1b64      	subs	r4, r4, r5
 800c8a8:	10a4      	asrs	r4, r4, #2
 800c8aa:	2600      	movs	r6, #0
 800c8ac:	42a6      	cmp	r6, r4
 800c8ae:	d109      	bne.n	800c8c4 <__libc_init_array+0x24>
 800c8b0:	4d0b      	ldr	r5, [pc, #44]	; (800c8e0 <__libc_init_array+0x40>)
 800c8b2:	4c0c      	ldr	r4, [pc, #48]	; (800c8e4 <__libc_init_array+0x44>)
 800c8b4:	f000 fc56 	bl	800d164 <_init>
 800c8b8:	1b64      	subs	r4, r4, r5
 800c8ba:	10a4      	asrs	r4, r4, #2
 800c8bc:	2600      	movs	r6, #0
 800c8be:	42a6      	cmp	r6, r4
 800c8c0:	d105      	bne.n	800c8ce <__libc_init_array+0x2e>
 800c8c2:	bd70      	pop	{r4, r5, r6, pc}
 800c8c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8c8:	4798      	blx	r3
 800c8ca:	3601      	adds	r6, #1
 800c8cc:	e7ee      	b.n	800c8ac <__libc_init_array+0xc>
 800c8ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8d2:	4798      	blx	r3
 800c8d4:	3601      	adds	r6, #1
 800c8d6:	e7f2      	b.n	800c8be <__libc_init_array+0x1e>
 800c8d8:	0800d4dc 	.word	0x0800d4dc
 800c8dc:	0800d4dc 	.word	0x0800d4dc
 800c8e0:	0800d4dc 	.word	0x0800d4dc
 800c8e4:	0800d4e0 	.word	0x0800d4e0

0800c8e8 <free>:
 800c8e8:	4b02      	ldr	r3, [pc, #8]	; (800c8f4 <free+0xc>)
 800c8ea:	4601      	mov	r1, r0
 800c8ec:	6818      	ldr	r0, [r3, #0]
 800c8ee:	f000 b819 	b.w	800c924 <_free_r>
 800c8f2:	bf00      	nop
 800c8f4:	20000058 	.word	0x20000058

0800c8f8 <memcpy>:
 800c8f8:	440a      	add	r2, r1
 800c8fa:	4291      	cmp	r1, r2
 800c8fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c900:	d100      	bne.n	800c904 <memcpy+0xc>
 800c902:	4770      	bx	lr
 800c904:	b510      	push	{r4, lr}
 800c906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c90a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c90e:	4291      	cmp	r1, r2
 800c910:	d1f9      	bne.n	800c906 <memcpy+0xe>
 800c912:	bd10      	pop	{r4, pc}

0800c914 <memset>:
 800c914:	4402      	add	r2, r0
 800c916:	4603      	mov	r3, r0
 800c918:	4293      	cmp	r3, r2
 800c91a:	d100      	bne.n	800c91e <memset+0xa>
 800c91c:	4770      	bx	lr
 800c91e:	f803 1b01 	strb.w	r1, [r3], #1
 800c922:	e7f9      	b.n	800c918 <memset+0x4>

0800c924 <_free_r>:
 800c924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c926:	2900      	cmp	r1, #0
 800c928:	d048      	beq.n	800c9bc <_free_r+0x98>
 800c92a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c92e:	9001      	str	r0, [sp, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	f1a1 0404 	sub.w	r4, r1, #4
 800c936:	bfb8      	it	lt
 800c938:	18e4      	addlt	r4, r4, r3
 800c93a:	f000 f8cd 	bl	800cad8 <__malloc_lock>
 800c93e:	4a20      	ldr	r2, [pc, #128]	; (800c9c0 <_free_r+0x9c>)
 800c940:	9801      	ldr	r0, [sp, #4]
 800c942:	6813      	ldr	r3, [r2, #0]
 800c944:	4615      	mov	r5, r2
 800c946:	b933      	cbnz	r3, 800c956 <_free_r+0x32>
 800c948:	6063      	str	r3, [r4, #4]
 800c94a:	6014      	str	r4, [r2, #0]
 800c94c:	b003      	add	sp, #12
 800c94e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c952:	f000 b8c7 	b.w	800cae4 <__malloc_unlock>
 800c956:	42a3      	cmp	r3, r4
 800c958:	d90b      	bls.n	800c972 <_free_r+0x4e>
 800c95a:	6821      	ldr	r1, [r4, #0]
 800c95c:	1862      	adds	r2, r4, r1
 800c95e:	4293      	cmp	r3, r2
 800c960:	bf04      	itt	eq
 800c962:	681a      	ldreq	r2, [r3, #0]
 800c964:	685b      	ldreq	r3, [r3, #4]
 800c966:	6063      	str	r3, [r4, #4]
 800c968:	bf04      	itt	eq
 800c96a:	1852      	addeq	r2, r2, r1
 800c96c:	6022      	streq	r2, [r4, #0]
 800c96e:	602c      	str	r4, [r5, #0]
 800c970:	e7ec      	b.n	800c94c <_free_r+0x28>
 800c972:	461a      	mov	r2, r3
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	b10b      	cbz	r3, 800c97c <_free_r+0x58>
 800c978:	42a3      	cmp	r3, r4
 800c97a:	d9fa      	bls.n	800c972 <_free_r+0x4e>
 800c97c:	6811      	ldr	r1, [r2, #0]
 800c97e:	1855      	adds	r5, r2, r1
 800c980:	42a5      	cmp	r5, r4
 800c982:	d10b      	bne.n	800c99c <_free_r+0x78>
 800c984:	6824      	ldr	r4, [r4, #0]
 800c986:	4421      	add	r1, r4
 800c988:	1854      	adds	r4, r2, r1
 800c98a:	42a3      	cmp	r3, r4
 800c98c:	6011      	str	r1, [r2, #0]
 800c98e:	d1dd      	bne.n	800c94c <_free_r+0x28>
 800c990:	681c      	ldr	r4, [r3, #0]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	6053      	str	r3, [r2, #4]
 800c996:	4421      	add	r1, r4
 800c998:	6011      	str	r1, [r2, #0]
 800c99a:	e7d7      	b.n	800c94c <_free_r+0x28>
 800c99c:	d902      	bls.n	800c9a4 <_free_r+0x80>
 800c99e:	230c      	movs	r3, #12
 800c9a0:	6003      	str	r3, [r0, #0]
 800c9a2:	e7d3      	b.n	800c94c <_free_r+0x28>
 800c9a4:	6825      	ldr	r5, [r4, #0]
 800c9a6:	1961      	adds	r1, r4, r5
 800c9a8:	428b      	cmp	r3, r1
 800c9aa:	bf04      	itt	eq
 800c9ac:	6819      	ldreq	r1, [r3, #0]
 800c9ae:	685b      	ldreq	r3, [r3, #4]
 800c9b0:	6063      	str	r3, [r4, #4]
 800c9b2:	bf04      	itt	eq
 800c9b4:	1949      	addeq	r1, r1, r5
 800c9b6:	6021      	streq	r1, [r4, #0]
 800c9b8:	6054      	str	r4, [r2, #4]
 800c9ba:	e7c7      	b.n	800c94c <_free_r+0x28>
 800c9bc:	b003      	add	sp, #12
 800c9be:	bd30      	pop	{r4, r5, pc}
 800c9c0:	20005484 	.word	0x20005484

0800c9c4 <_malloc_r>:
 800c9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c6:	1ccd      	adds	r5, r1, #3
 800c9c8:	f025 0503 	bic.w	r5, r5, #3
 800c9cc:	3508      	adds	r5, #8
 800c9ce:	2d0c      	cmp	r5, #12
 800c9d0:	bf38      	it	cc
 800c9d2:	250c      	movcc	r5, #12
 800c9d4:	2d00      	cmp	r5, #0
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	db01      	blt.n	800c9de <_malloc_r+0x1a>
 800c9da:	42a9      	cmp	r1, r5
 800c9dc:	d903      	bls.n	800c9e6 <_malloc_r+0x22>
 800c9de:	230c      	movs	r3, #12
 800c9e0:	6033      	str	r3, [r6, #0]
 800c9e2:	2000      	movs	r0, #0
 800c9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e6:	f000 f877 	bl	800cad8 <__malloc_lock>
 800c9ea:	4921      	ldr	r1, [pc, #132]	; (800ca70 <_malloc_r+0xac>)
 800c9ec:	680a      	ldr	r2, [r1, #0]
 800c9ee:	4614      	mov	r4, r2
 800c9f0:	b99c      	cbnz	r4, 800ca1a <_malloc_r+0x56>
 800c9f2:	4f20      	ldr	r7, [pc, #128]	; (800ca74 <_malloc_r+0xb0>)
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	b923      	cbnz	r3, 800ca02 <_malloc_r+0x3e>
 800c9f8:	4621      	mov	r1, r4
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	f000 f83c 	bl	800ca78 <_sbrk_r>
 800ca00:	6038      	str	r0, [r7, #0]
 800ca02:	4629      	mov	r1, r5
 800ca04:	4630      	mov	r0, r6
 800ca06:	f000 f837 	bl	800ca78 <_sbrk_r>
 800ca0a:	1c43      	adds	r3, r0, #1
 800ca0c:	d123      	bne.n	800ca56 <_malloc_r+0x92>
 800ca0e:	230c      	movs	r3, #12
 800ca10:	6033      	str	r3, [r6, #0]
 800ca12:	4630      	mov	r0, r6
 800ca14:	f000 f866 	bl	800cae4 <__malloc_unlock>
 800ca18:	e7e3      	b.n	800c9e2 <_malloc_r+0x1e>
 800ca1a:	6823      	ldr	r3, [r4, #0]
 800ca1c:	1b5b      	subs	r3, r3, r5
 800ca1e:	d417      	bmi.n	800ca50 <_malloc_r+0x8c>
 800ca20:	2b0b      	cmp	r3, #11
 800ca22:	d903      	bls.n	800ca2c <_malloc_r+0x68>
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	441c      	add	r4, r3
 800ca28:	6025      	str	r5, [r4, #0]
 800ca2a:	e004      	b.n	800ca36 <_malloc_r+0x72>
 800ca2c:	6863      	ldr	r3, [r4, #4]
 800ca2e:	42a2      	cmp	r2, r4
 800ca30:	bf0c      	ite	eq
 800ca32:	600b      	streq	r3, [r1, #0]
 800ca34:	6053      	strne	r3, [r2, #4]
 800ca36:	4630      	mov	r0, r6
 800ca38:	f000 f854 	bl	800cae4 <__malloc_unlock>
 800ca3c:	f104 000b 	add.w	r0, r4, #11
 800ca40:	1d23      	adds	r3, r4, #4
 800ca42:	f020 0007 	bic.w	r0, r0, #7
 800ca46:	1ac2      	subs	r2, r0, r3
 800ca48:	d0cc      	beq.n	800c9e4 <_malloc_r+0x20>
 800ca4a:	1a1b      	subs	r3, r3, r0
 800ca4c:	50a3      	str	r3, [r4, r2]
 800ca4e:	e7c9      	b.n	800c9e4 <_malloc_r+0x20>
 800ca50:	4622      	mov	r2, r4
 800ca52:	6864      	ldr	r4, [r4, #4]
 800ca54:	e7cc      	b.n	800c9f0 <_malloc_r+0x2c>
 800ca56:	1cc4      	adds	r4, r0, #3
 800ca58:	f024 0403 	bic.w	r4, r4, #3
 800ca5c:	42a0      	cmp	r0, r4
 800ca5e:	d0e3      	beq.n	800ca28 <_malloc_r+0x64>
 800ca60:	1a21      	subs	r1, r4, r0
 800ca62:	4630      	mov	r0, r6
 800ca64:	f000 f808 	bl	800ca78 <_sbrk_r>
 800ca68:	3001      	adds	r0, #1
 800ca6a:	d1dd      	bne.n	800ca28 <_malloc_r+0x64>
 800ca6c:	e7cf      	b.n	800ca0e <_malloc_r+0x4a>
 800ca6e:	bf00      	nop
 800ca70:	20005484 	.word	0x20005484
 800ca74:	20005488 	.word	0x20005488

0800ca78 <_sbrk_r>:
 800ca78:	b538      	push	{r3, r4, r5, lr}
 800ca7a:	4d06      	ldr	r5, [pc, #24]	; (800ca94 <_sbrk_r+0x1c>)
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	4604      	mov	r4, r0
 800ca80:	4608      	mov	r0, r1
 800ca82:	602b      	str	r3, [r5, #0]
 800ca84:	f7f4 fc6a 	bl	800135c <_sbrk>
 800ca88:	1c43      	adds	r3, r0, #1
 800ca8a:	d102      	bne.n	800ca92 <_sbrk_r+0x1a>
 800ca8c:	682b      	ldr	r3, [r5, #0]
 800ca8e:	b103      	cbz	r3, 800ca92 <_sbrk_r+0x1a>
 800ca90:	6023      	str	r3, [r4, #0]
 800ca92:	bd38      	pop	{r3, r4, r5, pc}
 800ca94:	20005e48 	.word	0x20005e48

0800ca98 <siprintf>:
 800ca98:	b40e      	push	{r1, r2, r3}
 800ca9a:	b500      	push	{lr}
 800ca9c:	b09c      	sub	sp, #112	; 0x70
 800ca9e:	ab1d      	add	r3, sp, #116	; 0x74
 800caa0:	9002      	str	r0, [sp, #8]
 800caa2:	9006      	str	r0, [sp, #24]
 800caa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800caa8:	4809      	ldr	r0, [pc, #36]	; (800cad0 <siprintf+0x38>)
 800caaa:	9107      	str	r1, [sp, #28]
 800caac:	9104      	str	r1, [sp, #16]
 800caae:	4909      	ldr	r1, [pc, #36]	; (800cad4 <siprintf+0x3c>)
 800cab0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cab4:	9105      	str	r1, [sp, #20]
 800cab6:	6800      	ldr	r0, [r0, #0]
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	a902      	add	r1, sp, #8
 800cabc:	f000 f874 	bl	800cba8 <_svfiprintf_r>
 800cac0:	9b02      	ldr	r3, [sp, #8]
 800cac2:	2200      	movs	r2, #0
 800cac4:	701a      	strb	r2, [r3, #0]
 800cac6:	b01c      	add	sp, #112	; 0x70
 800cac8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cacc:	b003      	add	sp, #12
 800cace:	4770      	bx	lr
 800cad0:	20000058 	.word	0x20000058
 800cad4:	ffff0208 	.word	0xffff0208

0800cad8 <__malloc_lock>:
 800cad8:	4801      	ldr	r0, [pc, #4]	; (800cae0 <__malloc_lock+0x8>)
 800cada:	f000 baf9 	b.w	800d0d0 <__retarget_lock_acquire_recursive>
 800cade:	bf00      	nop
 800cae0:	20005e50 	.word	0x20005e50

0800cae4 <__malloc_unlock>:
 800cae4:	4801      	ldr	r0, [pc, #4]	; (800caec <__malloc_unlock+0x8>)
 800cae6:	f000 baf4 	b.w	800d0d2 <__retarget_lock_release_recursive>
 800caea:	bf00      	nop
 800caec:	20005e50 	.word	0x20005e50

0800caf0 <__ssputs_r>:
 800caf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf4:	688e      	ldr	r6, [r1, #8]
 800caf6:	429e      	cmp	r6, r3
 800caf8:	4682      	mov	sl, r0
 800cafa:	460c      	mov	r4, r1
 800cafc:	4690      	mov	r8, r2
 800cafe:	461f      	mov	r7, r3
 800cb00:	d838      	bhi.n	800cb74 <__ssputs_r+0x84>
 800cb02:	898a      	ldrh	r2, [r1, #12]
 800cb04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb08:	d032      	beq.n	800cb70 <__ssputs_r+0x80>
 800cb0a:	6825      	ldr	r5, [r4, #0]
 800cb0c:	6909      	ldr	r1, [r1, #16]
 800cb0e:	eba5 0901 	sub.w	r9, r5, r1
 800cb12:	6965      	ldr	r5, [r4, #20]
 800cb14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	444b      	add	r3, r9
 800cb20:	106d      	asrs	r5, r5, #1
 800cb22:	429d      	cmp	r5, r3
 800cb24:	bf38      	it	cc
 800cb26:	461d      	movcc	r5, r3
 800cb28:	0553      	lsls	r3, r2, #21
 800cb2a:	d531      	bpl.n	800cb90 <__ssputs_r+0xa0>
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	f7ff ff49 	bl	800c9c4 <_malloc_r>
 800cb32:	4606      	mov	r6, r0
 800cb34:	b950      	cbnz	r0, 800cb4c <__ssputs_r+0x5c>
 800cb36:	230c      	movs	r3, #12
 800cb38:	f8ca 3000 	str.w	r3, [sl]
 800cb3c:	89a3      	ldrh	r3, [r4, #12]
 800cb3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb42:	81a3      	strh	r3, [r4, #12]
 800cb44:	f04f 30ff 	mov.w	r0, #4294967295
 800cb48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb4c:	6921      	ldr	r1, [r4, #16]
 800cb4e:	464a      	mov	r2, r9
 800cb50:	f7ff fed2 	bl	800c8f8 <memcpy>
 800cb54:	89a3      	ldrh	r3, [r4, #12]
 800cb56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb5e:	81a3      	strh	r3, [r4, #12]
 800cb60:	6126      	str	r6, [r4, #16]
 800cb62:	6165      	str	r5, [r4, #20]
 800cb64:	444e      	add	r6, r9
 800cb66:	eba5 0509 	sub.w	r5, r5, r9
 800cb6a:	6026      	str	r6, [r4, #0]
 800cb6c:	60a5      	str	r5, [r4, #8]
 800cb6e:	463e      	mov	r6, r7
 800cb70:	42be      	cmp	r6, r7
 800cb72:	d900      	bls.n	800cb76 <__ssputs_r+0x86>
 800cb74:	463e      	mov	r6, r7
 800cb76:	4632      	mov	r2, r6
 800cb78:	6820      	ldr	r0, [r4, #0]
 800cb7a:	4641      	mov	r1, r8
 800cb7c:	f000 faaa 	bl	800d0d4 <memmove>
 800cb80:	68a3      	ldr	r3, [r4, #8]
 800cb82:	6822      	ldr	r2, [r4, #0]
 800cb84:	1b9b      	subs	r3, r3, r6
 800cb86:	4432      	add	r2, r6
 800cb88:	60a3      	str	r3, [r4, #8]
 800cb8a:	6022      	str	r2, [r4, #0]
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	e7db      	b.n	800cb48 <__ssputs_r+0x58>
 800cb90:	462a      	mov	r2, r5
 800cb92:	f000 fab9 	bl	800d108 <_realloc_r>
 800cb96:	4606      	mov	r6, r0
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d1e1      	bne.n	800cb60 <__ssputs_r+0x70>
 800cb9c:	6921      	ldr	r1, [r4, #16]
 800cb9e:	4650      	mov	r0, sl
 800cba0:	f7ff fec0 	bl	800c924 <_free_r>
 800cba4:	e7c7      	b.n	800cb36 <__ssputs_r+0x46>
	...

0800cba8 <_svfiprintf_r>:
 800cba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbac:	4698      	mov	r8, r3
 800cbae:	898b      	ldrh	r3, [r1, #12]
 800cbb0:	061b      	lsls	r3, r3, #24
 800cbb2:	b09d      	sub	sp, #116	; 0x74
 800cbb4:	4607      	mov	r7, r0
 800cbb6:	460d      	mov	r5, r1
 800cbb8:	4614      	mov	r4, r2
 800cbba:	d50e      	bpl.n	800cbda <_svfiprintf_r+0x32>
 800cbbc:	690b      	ldr	r3, [r1, #16]
 800cbbe:	b963      	cbnz	r3, 800cbda <_svfiprintf_r+0x32>
 800cbc0:	2140      	movs	r1, #64	; 0x40
 800cbc2:	f7ff feff 	bl	800c9c4 <_malloc_r>
 800cbc6:	6028      	str	r0, [r5, #0]
 800cbc8:	6128      	str	r0, [r5, #16]
 800cbca:	b920      	cbnz	r0, 800cbd6 <_svfiprintf_r+0x2e>
 800cbcc:	230c      	movs	r3, #12
 800cbce:	603b      	str	r3, [r7, #0]
 800cbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd4:	e0d1      	b.n	800cd7a <_svfiprintf_r+0x1d2>
 800cbd6:	2340      	movs	r3, #64	; 0x40
 800cbd8:	616b      	str	r3, [r5, #20]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800cbde:	2320      	movs	r3, #32
 800cbe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbe4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbe8:	2330      	movs	r3, #48	; 0x30
 800cbea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd94 <_svfiprintf_r+0x1ec>
 800cbee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbf2:	f04f 0901 	mov.w	r9, #1
 800cbf6:	4623      	mov	r3, r4
 800cbf8:	469a      	mov	sl, r3
 800cbfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbfe:	b10a      	cbz	r2, 800cc04 <_svfiprintf_r+0x5c>
 800cc00:	2a25      	cmp	r2, #37	; 0x25
 800cc02:	d1f9      	bne.n	800cbf8 <_svfiprintf_r+0x50>
 800cc04:	ebba 0b04 	subs.w	fp, sl, r4
 800cc08:	d00b      	beq.n	800cc22 <_svfiprintf_r+0x7a>
 800cc0a:	465b      	mov	r3, fp
 800cc0c:	4622      	mov	r2, r4
 800cc0e:	4629      	mov	r1, r5
 800cc10:	4638      	mov	r0, r7
 800cc12:	f7ff ff6d 	bl	800caf0 <__ssputs_r>
 800cc16:	3001      	adds	r0, #1
 800cc18:	f000 80aa 	beq.w	800cd70 <_svfiprintf_r+0x1c8>
 800cc1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc1e:	445a      	add	r2, fp
 800cc20:	9209      	str	r2, [sp, #36]	; 0x24
 800cc22:	f89a 3000 	ldrb.w	r3, [sl]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 80a2 	beq.w	800cd70 <_svfiprintf_r+0x1c8>
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc36:	f10a 0a01 	add.w	sl, sl, #1
 800cc3a:	9304      	str	r3, [sp, #16]
 800cc3c:	9307      	str	r3, [sp, #28]
 800cc3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc42:	931a      	str	r3, [sp, #104]	; 0x68
 800cc44:	4654      	mov	r4, sl
 800cc46:	2205      	movs	r2, #5
 800cc48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc4c:	4851      	ldr	r0, [pc, #324]	; (800cd94 <_svfiprintf_r+0x1ec>)
 800cc4e:	f7f3 fae7 	bl	8000220 <memchr>
 800cc52:	9a04      	ldr	r2, [sp, #16]
 800cc54:	b9d8      	cbnz	r0, 800cc8e <_svfiprintf_r+0xe6>
 800cc56:	06d0      	lsls	r0, r2, #27
 800cc58:	bf44      	itt	mi
 800cc5a:	2320      	movmi	r3, #32
 800cc5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc60:	0711      	lsls	r1, r2, #28
 800cc62:	bf44      	itt	mi
 800cc64:	232b      	movmi	r3, #43	; 0x2b
 800cc66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc6a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc6e:	2b2a      	cmp	r3, #42	; 0x2a
 800cc70:	d015      	beq.n	800cc9e <_svfiprintf_r+0xf6>
 800cc72:	9a07      	ldr	r2, [sp, #28]
 800cc74:	4654      	mov	r4, sl
 800cc76:	2000      	movs	r0, #0
 800cc78:	f04f 0c0a 	mov.w	ip, #10
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc82:	3b30      	subs	r3, #48	; 0x30
 800cc84:	2b09      	cmp	r3, #9
 800cc86:	d94e      	bls.n	800cd26 <_svfiprintf_r+0x17e>
 800cc88:	b1b0      	cbz	r0, 800ccb8 <_svfiprintf_r+0x110>
 800cc8a:	9207      	str	r2, [sp, #28]
 800cc8c:	e014      	b.n	800ccb8 <_svfiprintf_r+0x110>
 800cc8e:	eba0 0308 	sub.w	r3, r0, r8
 800cc92:	fa09 f303 	lsl.w	r3, r9, r3
 800cc96:	4313      	orrs	r3, r2
 800cc98:	9304      	str	r3, [sp, #16]
 800cc9a:	46a2      	mov	sl, r4
 800cc9c:	e7d2      	b.n	800cc44 <_svfiprintf_r+0x9c>
 800cc9e:	9b03      	ldr	r3, [sp, #12]
 800cca0:	1d19      	adds	r1, r3, #4
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	9103      	str	r1, [sp, #12]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	bfbb      	ittet	lt
 800ccaa:	425b      	neglt	r3, r3
 800ccac:	f042 0202 	orrlt.w	r2, r2, #2
 800ccb0:	9307      	strge	r3, [sp, #28]
 800ccb2:	9307      	strlt	r3, [sp, #28]
 800ccb4:	bfb8      	it	lt
 800ccb6:	9204      	strlt	r2, [sp, #16]
 800ccb8:	7823      	ldrb	r3, [r4, #0]
 800ccba:	2b2e      	cmp	r3, #46	; 0x2e
 800ccbc:	d10c      	bne.n	800ccd8 <_svfiprintf_r+0x130>
 800ccbe:	7863      	ldrb	r3, [r4, #1]
 800ccc0:	2b2a      	cmp	r3, #42	; 0x2a
 800ccc2:	d135      	bne.n	800cd30 <_svfiprintf_r+0x188>
 800ccc4:	9b03      	ldr	r3, [sp, #12]
 800ccc6:	1d1a      	adds	r2, r3, #4
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	9203      	str	r2, [sp, #12]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	bfb8      	it	lt
 800ccd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ccd4:	3402      	adds	r4, #2
 800ccd6:	9305      	str	r3, [sp, #20]
 800ccd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cda4 <_svfiprintf_r+0x1fc>
 800ccdc:	7821      	ldrb	r1, [r4, #0]
 800ccde:	2203      	movs	r2, #3
 800cce0:	4650      	mov	r0, sl
 800cce2:	f7f3 fa9d 	bl	8000220 <memchr>
 800cce6:	b140      	cbz	r0, 800ccfa <_svfiprintf_r+0x152>
 800cce8:	2340      	movs	r3, #64	; 0x40
 800ccea:	eba0 000a 	sub.w	r0, r0, sl
 800ccee:	fa03 f000 	lsl.w	r0, r3, r0
 800ccf2:	9b04      	ldr	r3, [sp, #16]
 800ccf4:	4303      	orrs	r3, r0
 800ccf6:	3401      	adds	r4, #1
 800ccf8:	9304      	str	r3, [sp, #16]
 800ccfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccfe:	4826      	ldr	r0, [pc, #152]	; (800cd98 <_svfiprintf_r+0x1f0>)
 800cd00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd04:	2206      	movs	r2, #6
 800cd06:	f7f3 fa8b 	bl	8000220 <memchr>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d038      	beq.n	800cd80 <_svfiprintf_r+0x1d8>
 800cd0e:	4b23      	ldr	r3, [pc, #140]	; (800cd9c <_svfiprintf_r+0x1f4>)
 800cd10:	bb1b      	cbnz	r3, 800cd5a <_svfiprintf_r+0x1b2>
 800cd12:	9b03      	ldr	r3, [sp, #12]
 800cd14:	3307      	adds	r3, #7
 800cd16:	f023 0307 	bic.w	r3, r3, #7
 800cd1a:	3308      	adds	r3, #8
 800cd1c:	9303      	str	r3, [sp, #12]
 800cd1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd20:	4433      	add	r3, r6
 800cd22:	9309      	str	r3, [sp, #36]	; 0x24
 800cd24:	e767      	b.n	800cbf6 <_svfiprintf_r+0x4e>
 800cd26:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd2a:	460c      	mov	r4, r1
 800cd2c:	2001      	movs	r0, #1
 800cd2e:	e7a5      	b.n	800cc7c <_svfiprintf_r+0xd4>
 800cd30:	2300      	movs	r3, #0
 800cd32:	3401      	adds	r4, #1
 800cd34:	9305      	str	r3, [sp, #20]
 800cd36:	4619      	mov	r1, r3
 800cd38:	f04f 0c0a 	mov.w	ip, #10
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd42:	3a30      	subs	r2, #48	; 0x30
 800cd44:	2a09      	cmp	r2, #9
 800cd46:	d903      	bls.n	800cd50 <_svfiprintf_r+0x1a8>
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d0c5      	beq.n	800ccd8 <_svfiprintf_r+0x130>
 800cd4c:	9105      	str	r1, [sp, #20]
 800cd4e:	e7c3      	b.n	800ccd8 <_svfiprintf_r+0x130>
 800cd50:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd54:	4604      	mov	r4, r0
 800cd56:	2301      	movs	r3, #1
 800cd58:	e7f0      	b.n	800cd3c <_svfiprintf_r+0x194>
 800cd5a:	ab03      	add	r3, sp, #12
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	462a      	mov	r2, r5
 800cd60:	4b0f      	ldr	r3, [pc, #60]	; (800cda0 <_svfiprintf_r+0x1f8>)
 800cd62:	a904      	add	r1, sp, #16
 800cd64:	4638      	mov	r0, r7
 800cd66:	f3af 8000 	nop.w
 800cd6a:	1c42      	adds	r2, r0, #1
 800cd6c:	4606      	mov	r6, r0
 800cd6e:	d1d6      	bne.n	800cd1e <_svfiprintf_r+0x176>
 800cd70:	89ab      	ldrh	r3, [r5, #12]
 800cd72:	065b      	lsls	r3, r3, #25
 800cd74:	f53f af2c 	bmi.w	800cbd0 <_svfiprintf_r+0x28>
 800cd78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd7a:	b01d      	add	sp, #116	; 0x74
 800cd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd80:	ab03      	add	r3, sp, #12
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	462a      	mov	r2, r5
 800cd86:	4b06      	ldr	r3, [pc, #24]	; (800cda0 <_svfiprintf_r+0x1f8>)
 800cd88:	a904      	add	r1, sp, #16
 800cd8a:	4638      	mov	r0, r7
 800cd8c:	f000 f87a 	bl	800ce84 <_printf_i>
 800cd90:	e7eb      	b.n	800cd6a <_svfiprintf_r+0x1c2>
 800cd92:	bf00      	nop
 800cd94:	0800d4a0 	.word	0x0800d4a0
 800cd98:	0800d4aa 	.word	0x0800d4aa
 800cd9c:	00000000 	.word	0x00000000
 800cda0:	0800caf1 	.word	0x0800caf1
 800cda4:	0800d4a6 	.word	0x0800d4a6

0800cda8 <_printf_common>:
 800cda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdac:	4616      	mov	r6, r2
 800cdae:	4699      	mov	r9, r3
 800cdb0:	688a      	ldr	r2, [r1, #8]
 800cdb2:	690b      	ldr	r3, [r1, #16]
 800cdb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	bfb8      	it	lt
 800cdbc:	4613      	movlt	r3, r2
 800cdbe:	6033      	str	r3, [r6, #0]
 800cdc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	b10a      	cbz	r2, 800cdce <_printf_common+0x26>
 800cdca:	3301      	adds	r3, #1
 800cdcc:	6033      	str	r3, [r6, #0]
 800cdce:	6823      	ldr	r3, [r4, #0]
 800cdd0:	0699      	lsls	r1, r3, #26
 800cdd2:	bf42      	ittt	mi
 800cdd4:	6833      	ldrmi	r3, [r6, #0]
 800cdd6:	3302      	addmi	r3, #2
 800cdd8:	6033      	strmi	r3, [r6, #0]
 800cdda:	6825      	ldr	r5, [r4, #0]
 800cddc:	f015 0506 	ands.w	r5, r5, #6
 800cde0:	d106      	bne.n	800cdf0 <_printf_common+0x48>
 800cde2:	f104 0a19 	add.w	sl, r4, #25
 800cde6:	68e3      	ldr	r3, [r4, #12]
 800cde8:	6832      	ldr	r2, [r6, #0]
 800cdea:	1a9b      	subs	r3, r3, r2
 800cdec:	42ab      	cmp	r3, r5
 800cdee:	dc26      	bgt.n	800ce3e <_printf_common+0x96>
 800cdf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cdf4:	1e13      	subs	r3, r2, #0
 800cdf6:	6822      	ldr	r2, [r4, #0]
 800cdf8:	bf18      	it	ne
 800cdfa:	2301      	movne	r3, #1
 800cdfc:	0692      	lsls	r2, r2, #26
 800cdfe:	d42b      	bmi.n	800ce58 <_printf_common+0xb0>
 800ce00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce04:	4649      	mov	r1, r9
 800ce06:	4638      	mov	r0, r7
 800ce08:	47c0      	blx	r8
 800ce0a:	3001      	adds	r0, #1
 800ce0c:	d01e      	beq.n	800ce4c <_printf_common+0xa4>
 800ce0e:	6823      	ldr	r3, [r4, #0]
 800ce10:	68e5      	ldr	r5, [r4, #12]
 800ce12:	6832      	ldr	r2, [r6, #0]
 800ce14:	f003 0306 	and.w	r3, r3, #6
 800ce18:	2b04      	cmp	r3, #4
 800ce1a:	bf08      	it	eq
 800ce1c:	1aad      	subeq	r5, r5, r2
 800ce1e:	68a3      	ldr	r3, [r4, #8]
 800ce20:	6922      	ldr	r2, [r4, #16]
 800ce22:	bf0c      	ite	eq
 800ce24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce28:	2500      	movne	r5, #0
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	bfc4      	itt	gt
 800ce2e:	1a9b      	subgt	r3, r3, r2
 800ce30:	18ed      	addgt	r5, r5, r3
 800ce32:	2600      	movs	r6, #0
 800ce34:	341a      	adds	r4, #26
 800ce36:	42b5      	cmp	r5, r6
 800ce38:	d11a      	bne.n	800ce70 <_printf_common+0xc8>
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	e008      	b.n	800ce50 <_printf_common+0xa8>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	4652      	mov	r2, sl
 800ce42:	4649      	mov	r1, r9
 800ce44:	4638      	mov	r0, r7
 800ce46:	47c0      	blx	r8
 800ce48:	3001      	adds	r0, #1
 800ce4a:	d103      	bne.n	800ce54 <_printf_common+0xac>
 800ce4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce54:	3501      	adds	r5, #1
 800ce56:	e7c6      	b.n	800cde6 <_printf_common+0x3e>
 800ce58:	18e1      	adds	r1, r4, r3
 800ce5a:	1c5a      	adds	r2, r3, #1
 800ce5c:	2030      	movs	r0, #48	; 0x30
 800ce5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce62:	4422      	add	r2, r4
 800ce64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce6c:	3302      	adds	r3, #2
 800ce6e:	e7c7      	b.n	800ce00 <_printf_common+0x58>
 800ce70:	2301      	movs	r3, #1
 800ce72:	4622      	mov	r2, r4
 800ce74:	4649      	mov	r1, r9
 800ce76:	4638      	mov	r0, r7
 800ce78:	47c0      	blx	r8
 800ce7a:	3001      	adds	r0, #1
 800ce7c:	d0e6      	beq.n	800ce4c <_printf_common+0xa4>
 800ce7e:	3601      	adds	r6, #1
 800ce80:	e7d9      	b.n	800ce36 <_printf_common+0x8e>
	...

0800ce84 <_printf_i>:
 800ce84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce88:	460c      	mov	r4, r1
 800ce8a:	4691      	mov	r9, r2
 800ce8c:	7e27      	ldrb	r7, [r4, #24]
 800ce8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce90:	2f78      	cmp	r7, #120	; 0x78
 800ce92:	4680      	mov	r8, r0
 800ce94:	469a      	mov	sl, r3
 800ce96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce9a:	d807      	bhi.n	800ceac <_printf_i+0x28>
 800ce9c:	2f62      	cmp	r7, #98	; 0x62
 800ce9e:	d80a      	bhi.n	800ceb6 <_printf_i+0x32>
 800cea0:	2f00      	cmp	r7, #0
 800cea2:	f000 80d8 	beq.w	800d056 <_printf_i+0x1d2>
 800cea6:	2f58      	cmp	r7, #88	; 0x58
 800cea8:	f000 80a3 	beq.w	800cff2 <_printf_i+0x16e>
 800ceac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ceb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ceb4:	e03a      	b.n	800cf2c <_printf_i+0xa8>
 800ceb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ceba:	2b15      	cmp	r3, #21
 800cebc:	d8f6      	bhi.n	800ceac <_printf_i+0x28>
 800cebe:	a001      	add	r0, pc, #4	; (adr r0, 800cec4 <_printf_i+0x40>)
 800cec0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cec4:	0800cf1d 	.word	0x0800cf1d
 800cec8:	0800cf31 	.word	0x0800cf31
 800cecc:	0800cead 	.word	0x0800cead
 800ced0:	0800cead 	.word	0x0800cead
 800ced4:	0800cead 	.word	0x0800cead
 800ced8:	0800cead 	.word	0x0800cead
 800cedc:	0800cf31 	.word	0x0800cf31
 800cee0:	0800cead 	.word	0x0800cead
 800cee4:	0800cead 	.word	0x0800cead
 800cee8:	0800cead 	.word	0x0800cead
 800ceec:	0800cead 	.word	0x0800cead
 800cef0:	0800d03d 	.word	0x0800d03d
 800cef4:	0800cf61 	.word	0x0800cf61
 800cef8:	0800d01f 	.word	0x0800d01f
 800cefc:	0800cead 	.word	0x0800cead
 800cf00:	0800cead 	.word	0x0800cead
 800cf04:	0800d05f 	.word	0x0800d05f
 800cf08:	0800cead 	.word	0x0800cead
 800cf0c:	0800cf61 	.word	0x0800cf61
 800cf10:	0800cead 	.word	0x0800cead
 800cf14:	0800cead 	.word	0x0800cead
 800cf18:	0800d027 	.word	0x0800d027
 800cf1c:	680b      	ldr	r3, [r1, #0]
 800cf1e:	1d1a      	adds	r2, r3, #4
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	600a      	str	r2, [r1, #0]
 800cf24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cf28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e0a3      	b.n	800d078 <_printf_i+0x1f4>
 800cf30:	6825      	ldr	r5, [r4, #0]
 800cf32:	6808      	ldr	r0, [r1, #0]
 800cf34:	062e      	lsls	r6, r5, #24
 800cf36:	f100 0304 	add.w	r3, r0, #4
 800cf3a:	d50a      	bpl.n	800cf52 <_printf_i+0xce>
 800cf3c:	6805      	ldr	r5, [r0, #0]
 800cf3e:	600b      	str	r3, [r1, #0]
 800cf40:	2d00      	cmp	r5, #0
 800cf42:	da03      	bge.n	800cf4c <_printf_i+0xc8>
 800cf44:	232d      	movs	r3, #45	; 0x2d
 800cf46:	426d      	negs	r5, r5
 800cf48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf4c:	485e      	ldr	r0, [pc, #376]	; (800d0c8 <_printf_i+0x244>)
 800cf4e:	230a      	movs	r3, #10
 800cf50:	e019      	b.n	800cf86 <_printf_i+0x102>
 800cf52:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cf56:	6805      	ldr	r5, [r0, #0]
 800cf58:	600b      	str	r3, [r1, #0]
 800cf5a:	bf18      	it	ne
 800cf5c:	b22d      	sxthne	r5, r5
 800cf5e:	e7ef      	b.n	800cf40 <_printf_i+0xbc>
 800cf60:	680b      	ldr	r3, [r1, #0]
 800cf62:	6825      	ldr	r5, [r4, #0]
 800cf64:	1d18      	adds	r0, r3, #4
 800cf66:	6008      	str	r0, [r1, #0]
 800cf68:	0628      	lsls	r0, r5, #24
 800cf6a:	d501      	bpl.n	800cf70 <_printf_i+0xec>
 800cf6c:	681d      	ldr	r5, [r3, #0]
 800cf6e:	e002      	b.n	800cf76 <_printf_i+0xf2>
 800cf70:	0669      	lsls	r1, r5, #25
 800cf72:	d5fb      	bpl.n	800cf6c <_printf_i+0xe8>
 800cf74:	881d      	ldrh	r5, [r3, #0]
 800cf76:	4854      	ldr	r0, [pc, #336]	; (800d0c8 <_printf_i+0x244>)
 800cf78:	2f6f      	cmp	r7, #111	; 0x6f
 800cf7a:	bf0c      	ite	eq
 800cf7c:	2308      	moveq	r3, #8
 800cf7e:	230a      	movne	r3, #10
 800cf80:	2100      	movs	r1, #0
 800cf82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf86:	6866      	ldr	r6, [r4, #4]
 800cf88:	60a6      	str	r6, [r4, #8]
 800cf8a:	2e00      	cmp	r6, #0
 800cf8c:	bfa2      	ittt	ge
 800cf8e:	6821      	ldrge	r1, [r4, #0]
 800cf90:	f021 0104 	bicge.w	r1, r1, #4
 800cf94:	6021      	strge	r1, [r4, #0]
 800cf96:	b90d      	cbnz	r5, 800cf9c <_printf_i+0x118>
 800cf98:	2e00      	cmp	r6, #0
 800cf9a:	d04d      	beq.n	800d038 <_printf_i+0x1b4>
 800cf9c:	4616      	mov	r6, r2
 800cf9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cfa2:	fb03 5711 	mls	r7, r3, r1, r5
 800cfa6:	5dc7      	ldrb	r7, [r0, r7]
 800cfa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cfac:	462f      	mov	r7, r5
 800cfae:	42bb      	cmp	r3, r7
 800cfb0:	460d      	mov	r5, r1
 800cfb2:	d9f4      	bls.n	800cf9e <_printf_i+0x11a>
 800cfb4:	2b08      	cmp	r3, #8
 800cfb6:	d10b      	bne.n	800cfd0 <_printf_i+0x14c>
 800cfb8:	6823      	ldr	r3, [r4, #0]
 800cfba:	07df      	lsls	r7, r3, #31
 800cfbc:	d508      	bpl.n	800cfd0 <_printf_i+0x14c>
 800cfbe:	6923      	ldr	r3, [r4, #16]
 800cfc0:	6861      	ldr	r1, [r4, #4]
 800cfc2:	4299      	cmp	r1, r3
 800cfc4:	bfde      	ittt	le
 800cfc6:	2330      	movle	r3, #48	; 0x30
 800cfc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cfcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cfd0:	1b92      	subs	r2, r2, r6
 800cfd2:	6122      	str	r2, [r4, #16]
 800cfd4:	f8cd a000 	str.w	sl, [sp]
 800cfd8:	464b      	mov	r3, r9
 800cfda:	aa03      	add	r2, sp, #12
 800cfdc:	4621      	mov	r1, r4
 800cfde:	4640      	mov	r0, r8
 800cfe0:	f7ff fee2 	bl	800cda8 <_printf_common>
 800cfe4:	3001      	adds	r0, #1
 800cfe6:	d14c      	bne.n	800d082 <_printf_i+0x1fe>
 800cfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfec:	b004      	add	sp, #16
 800cfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cff2:	4835      	ldr	r0, [pc, #212]	; (800d0c8 <_printf_i+0x244>)
 800cff4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cff8:	6823      	ldr	r3, [r4, #0]
 800cffa:	680e      	ldr	r6, [r1, #0]
 800cffc:	061f      	lsls	r7, r3, #24
 800cffe:	f856 5b04 	ldr.w	r5, [r6], #4
 800d002:	600e      	str	r6, [r1, #0]
 800d004:	d514      	bpl.n	800d030 <_printf_i+0x1ac>
 800d006:	07d9      	lsls	r1, r3, #31
 800d008:	bf44      	itt	mi
 800d00a:	f043 0320 	orrmi.w	r3, r3, #32
 800d00e:	6023      	strmi	r3, [r4, #0]
 800d010:	b91d      	cbnz	r5, 800d01a <_printf_i+0x196>
 800d012:	6823      	ldr	r3, [r4, #0]
 800d014:	f023 0320 	bic.w	r3, r3, #32
 800d018:	6023      	str	r3, [r4, #0]
 800d01a:	2310      	movs	r3, #16
 800d01c:	e7b0      	b.n	800cf80 <_printf_i+0xfc>
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	f043 0320 	orr.w	r3, r3, #32
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	2378      	movs	r3, #120	; 0x78
 800d028:	4828      	ldr	r0, [pc, #160]	; (800d0cc <_printf_i+0x248>)
 800d02a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d02e:	e7e3      	b.n	800cff8 <_printf_i+0x174>
 800d030:	065e      	lsls	r6, r3, #25
 800d032:	bf48      	it	mi
 800d034:	b2ad      	uxthmi	r5, r5
 800d036:	e7e6      	b.n	800d006 <_printf_i+0x182>
 800d038:	4616      	mov	r6, r2
 800d03a:	e7bb      	b.n	800cfb4 <_printf_i+0x130>
 800d03c:	680b      	ldr	r3, [r1, #0]
 800d03e:	6826      	ldr	r6, [r4, #0]
 800d040:	6960      	ldr	r0, [r4, #20]
 800d042:	1d1d      	adds	r5, r3, #4
 800d044:	600d      	str	r5, [r1, #0]
 800d046:	0635      	lsls	r5, r6, #24
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	d501      	bpl.n	800d050 <_printf_i+0x1cc>
 800d04c:	6018      	str	r0, [r3, #0]
 800d04e:	e002      	b.n	800d056 <_printf_i+0x1d2>
 800d050:	0671      	lsls	r1, r6, #25
 800d052:	d5fb      	bpl.n	800d04c <_printf_i+0x1c8>
 800d054:	8018      	strh	r0, [r3, #0]
 800d056:	2300      	movs	r3, #0
 800d058:	6123      	str	r3, [r4, #16]
 800d05a:	4616      	mov	r6, r2
 800d05c:	e7ba      	b.n	800cfd4 <_printf_i+0x150>
 800d05e:	680b      	ldr	r3, [r1, #0]
 800d060:	1d1a      	adds	r2, r3, #4
 800d062:	600a      	str	r2, [r1, #0]
 800d064:	681e      	ldr	r6, [r3, #0]
 800d066:	6862      	ldr	r2, [r4, #4]
 800d068:	2100      	movs	r1, #0
 800d06a:	4630      	mov	r0, r6
 800d06c:	f7f3 f8d8 	bl	8000220 <memchr>
 800d070:	b108      	cbz	r0, 800d076 <_printf_i+0x1f2>
 800d072:	1b80      	subs	r0, r0, r6
 800d074:	6060      	str	r0, [r4, #4]
 800d076:	6863      	ldr	r3, [r4, #4]
 800d078:	6123      	str	r3, [r4, #16]
 800d07a:	2300      	movs	r3, #0
 800d07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d080:	e7a8      	b.n	800cfd4 <_printf_i+0x150>
 800d082:	6923      	ldr	r3, [r4, #16]
 800d084:	4632      	mov	r2, r6
 800d086:	4649      	mov	r1, r9
 800d088:	4640      	mov	r0, r8
 800d08a:	47d0      	blx	sl
 800d08c:	3001      	adds	r0, #1
 800d08e:	d0ab      	beq.n	800cfe8 <_printf_i+0x164>
 800d090:	6823      	ldr	r3, [r4, #0]
 800d092:	079b      	lsls	r3, r3, #30
 800d094:	d413      	bmi.n	800d0be <_printf_i+0x23a>
 800d096:	68e0      	ldr	r0, [r4, #12]
 800d098:	9b03      	ldr	r3, [sp, #12]
 800d09a:	4298      	cmp	r0, r3
 800d09c:	bfb8      	it	lt
 800d09e:	4618      	movlt	r0, r3
 800d0a0:	e7a4      	b.n	800cfec <_printf_i+0x168>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	4632      	mov	r2, r6
 800d0a6:	4649      	mov	r1, r9
 800d0a8:	4640      	mov	r0, r8
 800d0aa:	47d0      	blx	sl
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	d09b      	beq.n	800cfe8 <_printf_i+0x164>
 800d0b0:	3501      	adds	r5, #1
 800d0b2:	68e3      	ldr	r3, [r4, #12]
 800d0b4:	9903      	ldr	r1, [sp, #12]
 800d0b6:	1a5b      	subs	r3, r3, r1
 800d0b8:	42ab      	cmp	r3, r5
 800d0ba:	dcf2      	bgt.n	800d0a2 <_printf_i+0x21e>
 800d0bc:	e7eb      	b.n	800d096 <_printf_i+0x212>
 800d0be:	2500      	movs	r5, #0
 800d0c0:	f104 0619 	add.w	r6, r4, #25
 800d0c4:	e7f5      	b.n	800d0b2 <_printf_i+0x22e>
 800d0c6:	bf00      	nop
 800d0c8:	0800d4b1 	.word	0x0800d4b1
 800d0cc:	0800d4c2 	.word	0x0800d4c2

0800d0d0 <__retarget_lock_acquire_recursive>:
 800d0d0:	4770      	bx	lr

0800d0d2 <__retarget_lock_release_recursive>:
 800d0d2:	4770      	bx	lr

0800d0d4 <memmove>:
 800d0d4:	4288      	cmp	r0, r1
 800d0d6:	b510      	push	{r4, lr}
 800d0d8:	eb01 0402 	add.w	r4, r1, r2
 800d0dc:	d902      	bls.n	800d0e4 <memmove+0x10>
 800d0de:	4284      	cmp	r4, r0
 800d0e0:	4623      	mov	r3, r4
 800d0e2:	d807      	bhi.n	800d0f4 <memmove+0x20>
 800d0e4:	1e43      	subs	r3, r0, #1
 800d0e6:	42a1      	cmp	r1, r4
 800d0e8:	d008      	beq.n	800d0fc <memmove+0x28>
 800d0ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0f2:	e7f8      	b.n	800d0e6 <memmove+0x12>
 800d0f4:	4402      	add	r2, r0
 800d0f6:	4601      	mov	r1, r0
 800d0f8:	428a      	cmp	r2, r1
 800d0fa:	d100      	bne.n	800d0fe <memmove+0x2a>
 800d0fc:	bd10      	pop	{r4, pc}
 800d0fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d106:	e7f7      	b.n	800d0f8 <memmove+0x24>

0800d108 <_realloc_r>:
 800d108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d10a:	4607      	mov	r7, r0
 800d10c:	4614      	mov	r4, r2
 800d10e:	460e      	mov	r6, r1
 800d110:	b921      	cbnz	r1, 800d11c <_realloc_r+0x14>
 800d112:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d116:	4611      	mov	r1, r2
 800d118:	f7ff bc54 	b.w	800c9c4 <_malloc_r>
 800d11c:	b922      	cbnz	r2, 800d128 <_realloc_r+0x20>
 800d11e:	f7ff fc01 	bl	800c924 <_free_r>
 800d122:	4625      	mov	r5, r4
 800d124:	4628      	mov	r0, r5
 800d126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d128:	f000 f814 	bl	800d154 <_malloc_usable_size_r>
 800d12c:	42a0      	cmp	r0, r4
 800d12e:	d20f      	bcs.n	800d150 <_realloc_r+0x48>
 800d130:	4621      	mov	r1, r4
 800d132:	4638      	mov	r0, r7
 800d134:	f7ff fc46 	bl	800c9c4 <_malloc_r>
 800d138:	4605      	mov	r5, r0
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d0f2      	beq.n	800d124 <_realloc_r+0x1c>
 800d13e:	4631      	mov	r1, r6
 800d140:	4622      	mov	r2, r4
 800d142:	f7ff fbd9 	bl	800c8f8 <memcpy>
 800d146:	4631      	mov	r1, r6
 800d148:	4638      	mov	r0, r7
 800d14a:	f7ff fbeb 	bl	800c924 <_free_r>
 800d14e:	e7e9      	b.n	800d124 <_realloc_r+0x1c>
 800d150:	4635      	mov	r5, r6
 800d152:	e7e7      	b.n	800d124 <_realloc_r+0x1c>

0800d154 <_malloc_usable_size_r>:
 800d154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d158:	1f18      	subs	r0, r3, #4
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	bfbc      	itt	lt
 800d15e:	580b      	ldrlt	r3, [r1, r0]
 800d160:	18c0      	addlt	r0, r0, r3
 800d162:	4770      	bx	lr

0800d164 <_init>:
 800d164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d166:	bf00      	nop
 800d168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d16a:	bc08      	pop	{r3}
 800d16c:	469e      	mov	lr, r3
 800d16e:	4770      	bx	lr

0800d170 <_fini>:
 800d170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d172:	bf00      	nop
 800d174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d176:	bc08      	pop	{r3}
 800d178:	469e      	mov	lr, r3
 800d17a:	4770      	bx	lr
